[
  {
    "id": "U1_T1_E1",
    "unit_id": 1,
    "topic_id": 1,
    "unit_name": "Python Temelleri",
    "topic_name": "Giriş",
    "title": "Ekrana Merhaba Yazdır",
    "difficulty": "Kolay",
    "lesson_html": "<h1>print() Fonksiyonu</h1><p>Python'da ekrana (veya konsola) bir mesaj yazdırmak için <code>print()</code> fonksiyonu kullanılır.</p><p>Yazdırmak istediğiniz metni tırnak işaretleri (<code>'</code> veya <code>\"</code>) içine almanız gerekir. Bu metinlere 'string' denir.</p><pre><code>print(\"Merhaba Dünya\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Merhaba Python!",
      "description": "<code>print()</code> fonksiyonunu kullanarak konsola <code>Merhaba Python!</code> yazdırın.",
      "hint": "Yazdırmak istediğiniz metni <code>print()</code> fonksiyonunun parantezleri içine tırnak işaretleriyle yerleştirin."
    },
    "default_code": "# Kodunuzu buraya yazın\n",
    "solution": "print(\"Merhaba Python!\")"
  },
  {
    "id": "U1_T1_E2",
    "unit_id": 1,
    "topic_id": 1,
    "unit_name": "Python Temelleri",
    "topic_name": "Giriş",
    "title": "Birden Fazla Değer Yazdırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Birden Fazla Değer</h1><p><code>print()</code> fonksiyonu virgülle ayrılmış birden fazla değeri aynı anda yazdırabilir. Python, bu değerler arasına varsayılan olarak bir boşluk koyar.</p><pre><code>print(\"Sayı:\", 10)</code></pre><p>Çıktısı <code>Sayı: 10</code> olacaktır.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Bilgisi",
      "description": "Tek bir <code>print()</code> fonksiyonu kullanarak konsola <code>Kullanıcı: admin</code> yazdırın. 'Kullanıcı:' ve 'admin' kelimelerini virgülle ayırarak fonksiyona verin.",
      "hint": "<code>print(..., ...)</code> sözdizimini kullanın."
    },
    "default_code": "# Kodunuzu buraya yazın\n",
    "solution": "print(\"Kullanıcı:\", \"admin\")"
  },
  {
    "id": "U1_T1_E3",
    "unit_id": 1,
    "topic_id": 1,
    "unit_name": "Python Temelleri",
    "topic_name": "Giriş",
    "title": "Yorum Satırları",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Yorum Satırları</h1><p>Kodunuzu açıklamak için yorum satırları kullanılır. Python, <code>#</code> işaretiyle başlayan satırları görmezden gelir (çalıştırmaz).</p><p>Yorumlar, kodun ne yaptığını açıklamak veya geçici olarak bir kod satırını devre dışı bırakmak için kullanışlıdır.</p><pre><code># Bu bir yorum satırıdır\nprint(\"Bu çalışır\")\n# print(\"Bu çalışmaz\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kodu Yorumla",
      "description": "Aşağıdaki kodda <code>print(\"Hata\")</code> yazan satırı bir yorum satırı haline getirerek çalışmasını engelleyin ve <code>print(\"Başarı\")</code> satırının çalışmasını sağlayın.",
      "hint": "Çalışmasını istemediğiniz satırın başına <code>#</code> işareti koyun."
    },
    "default_code": "# Bu satırı çalışır halde bırakın\nprint(\"Başarı\")\n\n# Bu satırı yoruma alın\nprint(\"Hata\")",
    "solution": "# Bu satırı çalışır halde bırakın\nprint(\"Başarı\")\n\n# Bu satırı yoruma alın\n# print(\"Hata\")"
  },
  {
    "id": "U1_T1_E4",
    "unit_id": 1,
    "topic_id": 1,
    "unit_name": "Python Temelleri",
    "topic_name": "Giriş",
    "title": "Sayıları Yazdırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Sayıları Yazdırma</h1><p><code>print()</code> fonksiyonu sayıları (integer veya float) yazdırmak için de kullanılır. Sayıları yazdırırken tırnak işareti kullanmanıza gerek yoktur.</p><pre><code>print(100)\nprint(20.5)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Skor",
      "description": "Konsola <code>2500</code> tamsayısını yazdırın.",
      "hint": "Sayıyı <code>print()</code> parantezleri içine tırnak işaretleri olmadan yazın."
    },
    "default_code": "# Skoru konsola yazdırın\n",
    "solution": "print(2500)"
  },
  {
    "id": "U1_T1_E5",
    "unit_id": 1,
    "topic_id": 1,
    "unit_name": "Python Temelleri",
    "topic_name": "Giriş",
    "title": "Boş Satır Yazdırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boş Satır</h1><p>Konsola boş bir satır eklemek (bir satır atlamak) için, <code>print()</code> fonksiyonunu içine hiçbir şey yazmadan çağırabilirsiniz.</p><pre><code>print(\"İlk satır\")\nprint()\nprint(\"İkinci satır\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Mesajları Ayır",
      "description": "<code>Mesaj 1</code> ve <code>Mesaj 2</code> çıktıları arasına boş bir satır ekleyin.",
      "hint": "İki <code>print()</code> fonksiyonu arasına boş parantezli bir <code>print()</code> ekleyin."
    },
    "default_code": "print(\"Mesaj 1\")\n# Buraya boş satır ekleyin\nprint(\"Mesaj 2\")",
    "solution": "print(\"Mesaj 1\")\nprint()\nprint(\"Mesaj 2\")"
  },
  {
    "id": "U1_T2_E1",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişken Nedir?",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değişkenler</h1><p>Değişkenler, verileri depolamak için kullanılan isimlendirilmiş kaplardır.</p><p>Python'da bir değişken oluşturmak için <code>=</code> (atama operatörü) kullanılır. Değişkenin adını sola, depolamak istediğiniz değeri sağa yazarsınız.</p><pre><code># 'score' adında bir değişken oluştur ve 100 değerini ata\nscore = 100</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Puan Değişkeni",
      "description": "<code>puan</code> adında bir değişken oluşturun ve ona <code>50</code> değerini atayın.",
      "hint": "<code>değişken_adı = değer</code> sözdizimini kullanın."
    },
    "default_code": "# Değişkeni burada tanımlayın\n",
    "solution": "puan = 50"
  },
  {
    "id": "U1_T2_E2",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişkeni Yazdırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değişkeni Yazdırma</h1><p>Bir değişkenin içinde depolanan değeri görmek için <code>print()</code> fonksiyonunu kullanabilirsiniz. Değişken adını tırnak işaretleri olmadan <code>print()</code> içine yazmanız yeterlidir.</p><pre><code>kullanici_adi = \"siber_analist\"\nprint(kullanici_adi)</code></pre><p>Çıktı: <code>siber_analist</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Değişkeni Yazdır",
      "description": "Aşağıda <code>hedef_ip</code> adında bir değişken tanımlanmıştır. Bu değişkenin değerini konsola yazdırın.",
      "hint": "<code>print()</code> fonksiyonunun içine değişkenin adını (<code>hedef_ip</code>) tırnak işaretleri olmadan yazın."
    },
    "default_code": "hedef_ip = \"192.168.1.1\"\n\n# Değişkeni buraya yazdırın\n",
    "solution": "hedef_ip = \"192.168.1.1\"\n\nprint(hedef_ip)"
  },
  {
    "id": "U1_T2_E3",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişken Değerini Güncelleme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değeri Güncelleme</h1><p>Değişkenlerin değeri program akışı sırasında değiştirilebilir. Aynı değişkene yeni bir değer atamanız yeterlidir.</p><pre><code>seviye = 1\nprint(seviye)\n\nseviye = 2\nprint(seviye)</code></pre><p>Çıktı önce <code>1</code>, sonra <code>2</code> olacaktır.</p>",
    "challenge": {
      "title": "Meydan Okuma: Seviye Atla",
      "description": "<code>seviye</code> değişkeni başlangıçta <code>1</code> olarak ayarlanmıştır. Bu değişkenin değerini <code>2</code> olarak güncelleyin ve ardından konsola yazdırın.",
      "hint": "Önce <code>seviye = 2</code> yazın, sonraki satıra <code>print(seviye)</code> yazın."
    },
    "default_code": "seviye = 1\n\n# Değişkeni burada güncelleyin ve yazdırın\n",
    "solution": "seviye = 1\n\nseviye = 2\nprint(seviye)"
  },
  {
    "id": "U1_T2_E4",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişken İsimlendirme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>İsimlendirme Kuralları</h1><p>Python'da değişken adları:</p><ul><li>Bir harf veya alt çizgi (<code>_</code>) ile başlamalıdır.</li><li>Sayı ile başlayamaz.</li><li>Yalnızca harf, sayı ve alt çizgi içerebilir.</li><li>Büyük/küçük harfe duyarlıdır (<code>puan</code> ve <code>Puan</code> farklı değişkenlerdir).</li></ul><p>Genel kabul (PEP 8), küçük harf ve kelimeler arası alt çizgi (<code>snake_case</code>) kullanmaktır.</p><pre><code># İyi\nkullanici_adi = \"admin\"\n\n# Kötü (ama geçerli)\nKullaniciAdi = \"admin\"\n\n# Geçersiz (Hata verir)\n1kullanici = \"admin\"</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Geçersiz Değişken",
      "description": "Aşağıdaki kodda geçersiz bir değişken adı (<code>1_port</code>) kullanılmıştır. Değişken adını geçerli bir hale getirin (örn: <code>port_1</code> veya <code>acik_port</code>) ve değeri <code>80</code> olarak atayın. Sonra bu değişkeni yazdırın.",
      "hint": "Değişken adları sayı ile başlayamaz. <code>1_port</code> adını <code>port_1</code> olarak değiştirmeyi deneyin."
    },
    "default_code": "# Hatalı satırı düzeltin\n1_port = 80\n\n# Düzeltilmiş değişkeni yazdırın\n",
    "solution": "# Hatalı satırı düzeltin\nport_1 = 80\n\n# Düzeltilmiş değişkeni yazdırın\nprint(port_1)"
  },
  {
    "id": "U1_T2_E5",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "String İçinde Değişken (f-string)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>f-string</h1><p>Bir değişkenin değerini bir metin (string) içinde göstermenin en modern yolu 'f-string' kullanmaktır. String'in başına <code>f</code> harfi koyar ve değişkeni <code>{}</code> süslü parantezleri içine alırsınız.</p><pre><code>kullanici = \"root\"\nprint(f\"Giriş yapan kullanıcı: {kullanici}\")</code></pre><p>Çıktı: <code>Giriş yapan kullanıcı: root</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Tehdit Raporu",
      "description": "<code>tehdit_seviyesi</code> değişkenini kullanarak konsola tam olarak <code>Tehdit Seviyesi: Yüksek</code> yazdırın. f-string kullanmalısınız.",
      "hint": "<code>print(f\"...\")</code> yapısını kullanın ve <code>{...}</code> içine değişkenin adını yazın."
    },
    "default_code": "tehdit_seviyesi = \"Yüksek\"\n\n# f-string kullanarak çıktıyı yazdırın\n",
    "solution": "tehdit_seviyesi = \"Yüksek\"\n\nprint(f\"Tehdit Seviyesi: {tehdit_seviyesi}\")"
  },
  {
    "id": "U1_T2_E6",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişkenlerle Matematik",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değişkenlerle Matematik</h1><p>Değişkenleri matematiksel işlemlerde kullanabilirsiniz. Python önce sağdaki işlemi yapar, sonra sonucu soldaki değişkene atar.</p><pre><code>sayi1 = 10\nsayi2 = 5\ntoplam = sayi1 + sayi2\nprint(toplam)</code></pre><p>Çıktı: <code>15</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Kalan Hak",
      "description": "<code>toplam_hak</code> 5, <code>kullanilan_hak</code> 2 olarak verilmiştir. <code>kalan_hak</code> adında yeni bir değişken oluşturun ve bu iki değişkenin farkını ona atayın. Son olarak <code>kalan_hak</code> değişkenini yazdırın.",
      "hint": "<code>kalan_hak = toplam_hak - kullanilan_hak</code> satırını ekleyin."
    },
    "default_code": "toplam_hak = 5\nkullanilan_hak = 2\n\n# kalan_hak değişkenini burada hesaplayın\n\n\n# kalan_hak değişkenini yazdırın\n",
    "solution": "toplam_hak = 5\nkullanilan_hak = 2\n\nkalan_hak = toplam_hak - kullanilan_hak\n\nprint(kalan_hak)"
  },
  {
    "id": "U1_T2_E7",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değeri Kısayoldan Artırma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Değeri Artırma (+=)</h1><p>Bir değişkenin kendi değerini kullanarak yeni bir değer atamak çok yaygın bir işlemdir. Örneğin, <code>sayac = sayac + 1</code>.</p><p>Python bunun için bir kısayol sağlar: <code>+=</code> operatörü. <code>sayac += 1</code> ifadesi, <code>sayac = sayac + 1</code> ile tamamen aynı anlama gelir.</p><pre><code>puan = 100\npuan += 50  # puan = puan + 50\nprint(puan)</code></pre><p>Çıktı: <code>150</code>. Bu operatör <code>-=</code>, <code>*=</code>, <code>/=</code> için de geçerlidir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Giriş Denemesi",
      "description": "<code>giris_denemesi</code> değişkeni 0 olarak ayarlanmıştır. <code>+=</code> operatörünü kullanarak bu değişkenin değerini 1 artırın ve yeni değerini konsola yazdırın.",
      "hint": "Değişkenin adını, <code>+=</code> operatörünü ve artırmak istediğiniz sayıyı (1) yazın."
    },
    "default_code": "giris_denemesi = 0\n\n# Kısayol operatörünü kullanarak değeri 1 artırın\n\n\n# Yeni değeri yazdırın\n",
    "solution": "giris_denemesi = 0\n\ngiris_denemesi += 1\n\nprint(giris_denemesi)"
  },
  {
    "id": "U1_T2_E8",
    "unit_id": 1,
    "topic_id": 2,
    "unit_name": "Python Temelleri",
    "topic_name": "Değişkenler ve Atama",
    "title": "Değişken Takası",
    "difficulty": "Orta",
    "lesson_html": "<h1>Değişken Takası</h1><p>İki değişkenin değerlerini birbirleriyle değiştirmek (takas etmek) için Python'da çok zarif bir yöntem vardır.</p><pre><code>a = 10\nb = 20\n\na, b = b, a\n\nprint(f\"a: {a}\") # Çıktı: a: 20\nprint(f\"b: {b}\") # Çıktı: b: 10</code></pre><p>Bu, Python'un aynı anda birden fazla atama yapabilme özelliği sayesinde çalışır. Sağdaki <code>b, a</code> değerleri (yani 20, 10) sırasıyla soldaki <code>a, b</code> değişkenlerine atanır.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kaynak ve Hedef IP",
      "description": "<code>kaynak_ip</code> ve <code>hedef_ip</code> değişkenlerinin değerlerini tek satırlık Python takas yöntemiyle değiştirin ve ardından her iki değişkeni de yazdırın.",
      "hint": "<code>değişken1, değişken2 = değişken2, değişken1</code> sözdizimini kullanın."
    },
    "default_code": "kaynak_ip = \"10.0.0.1\"\nhedef_ip = \"8.8.8.8\"\n\n# Değişkenleri burada tek satırda takas edin\n\n\nprint(f\"Kaynak: {kaynak_ip}\")\nprint(f\"Hedef: {hedef_ip}\")",
    "solution": "kaynak_ip = \"10.0.0.1\"\nhedef_ip = \"8.8.8.8\"\n\nkaynak_ip, hedef_ip = hedef_ip, kaynak_ip\n\nprint(f\"Kaynak: {kaynak_ip}\")\nprint(f\"Hedef: {hedef_ip}\")"
  },
  {
    "id": "U1_T3_E1",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Tamsayı (Integer)",
    "difficulty": "Kolay",
    "lesson_html": "<p>Tamsayılar, ondalık kısmı olmayan pozitif veya negatif bütün sayılardır. Python'da <code>int</code> olarak adlandırılırlar.</p><pre><code># Örnek tamsayılar port = 80/hata_kodu = 404/negatif_sayi = -10</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Numarası",
      "description": "<code>acik_port</code> adında bir değişken oluşturun ve ona <code>443</code> tamsayı değerini atayın. Ardından bu değişkeni konsola yazdırın.",
      "hint": "<code>acik_port = 443</code> ve ardından <code>print(acik_port)</code> yazmalısınız."
    },
    "default_code": "# Değişkeni burada tanımlayın ve yazdırın\n",
    "solution": "acik_port = 443\nprint(acik_port)"
  },
  {
    "id": "U1_T3_E2",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Veri Tipini Kontrol Etme (type())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>type() Fonksiyonu</h1><p>Bir değişkenin veya değerin veri tipini öğrenmek için <code>type()</code> fonksiyonunu kullanabilirsiniz. Bu, özellikle dışarıdan gelen veriyi (örn: kullanıcı girdisi, API cevabı) analiz ederken çok kullanışlıdır.</p><pre><code>sayi = 100\nprint(type(sayi))</code></pre><p>Çıktı: <code>&lt;class 'int'&gt;</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Değişken Tipini Bul",
      "description": "<code>paket_boyutu</code> adında bir değişken <code>1500</code> olarak ayarlandı. Bu değişkenin veri tipini <code>type()</code> fonksiyonu ile bularak konsola yazdırın.",
      "hint": "<code>print()</code> fonksiyonunun içine <code>type(paket_boyutu)</code> yazın."
    },
    "default_code": "paket_boyutu = 1500\n\n# Değişkenin tipini yazdırın\n",
    "solution": "paket_boyutu = 1500\n\nprint(type(paket_boyutu))"
  },
  {
    "id": "U1_T3_E3",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Kayan Noktalı Sayı (Float)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Kayan Noktalı Sayı (Float)</h1><p>Ondalıklı sayılar Python'da <code>float</code> olarak adlandırılır. Bilimsel hesaplamalarda veya kesinlik gerektiren ölçümlerde kullanılırlar.</p><pre><code># Örnek float'lar\npi_sayisi = 3.14\nrisk_skoru = 0.85</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Skoru",
      "description": "<code>risk_skoru</code> adında bir değişken oluşturun ve ona <code>0.5</code> değerini atayın. Ardından bu değişkenin tipini <code>type()</code> fonksiyonu ile konsola yazdırın.",
      "hint": "Değişkeni <code>0.5</code> olarak atayın ve <code>print(type(risk_skoru))</code> kullanın."
    },
    "default_code": "# Değişkeni tanımlayın ve tipini yazdırın\n",
    "solution": "risk_skoru = 0.5\nprint(type(risk_skoru))"
  },
  {
    "id": "U1_T3_E4",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Metin (String)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Metin (String)</h1><p>Metin verileri <code>str</code> (string) olarak adlandırılır. Tek (<code>'</code>) veya çift (<code>\"</code>) tırnak işaretleri içinde tanımlanırlar.</p><pre><code>kullanici = \"admin\"\nparola = '12345!'</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Protokol Adı",
      "description": "<code>protokol</code> adında bir değişken oluşturun ve ona <code>\"TCP\"</code> metin değerini atayın. Ardından bu değişkenin tipini <code>type()</code> fonksiyonu ile konsola yazdırın.",
      "hint": "Değeri tırnak işaretleri içine almayı unutmayın."
    },
    "default_code": "# Değişkeni tanımlayın ve tipini yazdırın\n",
    "solution": "protokol = \"TCP\"\nprint(type(protokol))"
  },
  {
    "id": "U1_T3_E5",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "String Birleştirme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>String Birleştirme</h1><p>İki veya daha fazla string'i birleştirmek için <code>+</code> operatörünü kullanabilirsiniz.</p><pre><code>parca1 = \"Merhaba\"\nparca2 = \"Dünya\"\nbirlesik = parca1 + \" \" + parca2\nprint(birlesik) # Çıktı: Merhaba Dünya</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Mesajı",
      "description": "<code>ip_adresi</code> ve <code>eylem</code> değişkenlerini birleştirerek <code>log_mesaji</code> adında yeni bir değişken oluşturun. Çıktı <code>192.168.1.1:Bağlantı denemesi</code> formatında olmalı. (Araya <code>:</code> koymayı unutmayın). Sonra <code>log_mesaji</code> değişkenini yazdırın.",
      "hint": "<code>log_mesaji = ip_adresi + \":\" + eylem</code>"
    },
    "default_code": "ip_adresi = \"192.168.1.1\"\neylem = \"Bağlantı denemesi\"\n\n# Değişkenleri burada birleştirin\n\n\n# log_mesaji'nı yazdırın\n",
    "solution": "ip_adresi = \"192.168.1.1\"\neylem = \"Bağlantı denemesi\"\n\nlog_mesaji = ip_adresi + \":\" + eylem\n\nprint(log_mesaji)"
  },
  {
    "id": "U1_T3_E6",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "String ve Sayı Hatası",
    "difficulty": "Orta",
    "lesson_html": "<h1>String ve Sayı Hatası</h1><p>Python'da <code>+</code> operatörünü kullanarak bir string (<code>str</code>) ile bir tamsayıyı (<code>int</code>) doğrudan birleştiremezsiniz. Bu bir <code>TypeError</code> hatası verir.</p><pre><code># HATA VEREN KOD\nport = 80\nprint(\"Port: \" + port)</code></pre><p>Bunu düzeltmek için sayıyı <code>str()</code> fonksiyonu ile string'e dönüştürmeniz gerekir.</p><pre><code># DOĞRU KOD\nport = 80\nprint(\"Port: \" + str(port))</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hatalı Kodu Düzelt",
      "description": "Aşağıdaki kod, bir tamsayıyı string ile birleştirmeye çalıştığı için hata veriyor. <code>hata_kodu</code> değişkenini <code>str()</code> fonksiyonu kullanarak string'e çevirin ve kodu düzeltin.",
      "hint": "<code>port</code> değişkenini <code>str(port)</code> olarak değiştirin."
    },
    "default_code": "mesaj = \"Hata kodu: \"\nhata_kodu = 404\n\n# Aşağıdaki satırı düzeltin\nprint(mesaj + hata_kodu)",
    "solution": "mesaj = \"Hata kodu: \"\nhata_kodu = 404\n\n# Aşağıdaki satırı düzeltin\nprint(mesaj + str(hata_kodu))"
  },
  {
    "id": "U1_T3_E7",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Boolean (Mantıksal)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boolean (Mantıksal)</h1><p>Boolean (<code>bool</code>) veri tipi, yalnızca iki değer alabilir: <code>True</code> (Doğru) veya <code>False</code> (Yanlış). Koşullu ifadelerde ve mantıksal kontrollerde kullanılırlar.</p><p><strong>Önemli:</strong> <code>True</code> ve <code>False</code> büyük harfle başlamalıdır.</p><pre><code>giris_yapti = True\nadmin_yetkisi = False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yetki Durumu",
      "description": "<code>guvenli_mod</code> adında bir değişken oluşturun ve ona <code>True</code> boolean değerini atayın. Ardından bu değişkeni yazdırın.",
      "hint": "<code>T</code> harfinin büyük olduğuna emin olun (<code>True</code>)."
    },
    "default_code": "# Değişkeni burada tanımlayın ve yazdırın\n",
    "solution": "guvenli_mod = True\nprint(guvenli_mod)"
  },
  {
    "id": "U1_T3_E8",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Boolean Tipini Kontrol Etme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boolean Tipi</h1><p>Boolean değerlerin tipi <code>&lt;class 'bool'&gt;</code> olarak görünür. <code>True</code> ve <code>False</code> tırnak içinde değildir; tırnak içinde olsalardı string olurlardı (<code>\"True\"</code>).</p><pre><code>aktif = True\nprint(type(aktif))</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Boolean Tipini Yazdır",
      "description": "<code>erisim_izni</code> değişkeni <code>False</code> olarak ayarlandı. Bu değişkenin veri tipini <code>type()</code> fonksiyonu ile konsola yazdırın.",
      "hint": "<code>print(type(erisim_izni))</code>"
    },
    "default_code": "erisim_izni = False\n\n# Değişkenin tipini yazdırın\n",
    "solution": "erisim_izni = False\n\nprint(type(erisim_izni))"
  },
  {
    "id": "U1_T3_E9",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Veri Tipi Dönüştürme (Casting) 1",
    "difficulty": "Orta",
    "lesson_html": "<h1>Veri Tipi Dönüştürme (Casting)</h1><p>Bazen bir veri tipini diğerine dönüştürmeniz gerekir. Örneğin, kullanıcıdan alınan girdi (her zaman <code>str</code> gelir) ile matematiksel işlem yapmak için onu <code>int</code>'e çevirmeniz gerekir.</p><p>Bunun için <code>int()</code>, <code>float()</code>, <code>str()</code> gibi fonksiyonlar kullanılır.</p><pre><code>port_girdisi = \"8080\" # Bu bir string\nport_numarasi = int(port_girdisi) # Bu bir int\nprint(type(port_numarasi))</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: String'i Tamsayıya Çevir",
      "description": "<code>girdi_str</code> değişkeni <code>\"22\"</code> string değerine sahiptir. Bu değeri <code>int()</code> fonksiyonu kullanarak tamsayıya çevirin ve <code>port_int</code> adında yeni bir değişkene atayın. Sonra <code>port_int</code> değişkeninin tipini yazdırın.",
      "hint": "<code>port_int = int(girdi_str)</code>"
    },
    "default_code": "girdi_str = \"22\"\n\n# Dönüştürme işlemini burada yapın\n\n\n# Yeni değişkenin tipini yazdırın\n",
    "solution": "girdi_str = \"22\"\n\nport_int = int(girdi_str)\n\nprint(type(port_int))"
  },
  {
    "id": "U1_T3_E10",
    "unit_id": 1,
    "topic_id": 3,
    "unit_name": "Python Temelleri",
    "topic_name": "Temel Veri Tipleri",
    "title": "Veri Tipi Dönüştürme (Casting) 2",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tamsayıyı Float'a Çevirme</h1><p>Aynı şekilde, <code>int</code> bir değeri <code>float</code>'a veya <code>float</code> bir değeri <code>int</code>'e (ondalık kısmı keserek) çevirebilirsiniz.</p><pre><code>sayi_int = 10\nsayi_float = float(sayi_int)\nprint(sayi_float) # Çıktı: 10.0\n\nskor_float = 9.8\nskor_int = int(skor_float)\nprint(skor_int) # Çıktı: 9 (yuvarlamaz, keser)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Seviyesi",
      "description": "<code>risk_skoru_float</code> değişkeni <code>7.8</code> olarak verilmiştir. Bu skoru <code>int()</code> kullanarak tamsayıya çevirin (ondalık kısmını atın) ve <code>risk_seviyesi_int</code> adlı değişkene atayın. Sonra <code>risk_seviyesi_int</code> değişkenini yazdırın.",
      "hint": "<code>risk_seviyesi_int = int(risk_skoru_float)</code>"
    },
    "default_code": "risk_skoru_float = 7.8\n\n# Dönüştürme işlemini burada yapın\n\n\n# Yeni değişkeni yazdırın\n",
    "solution": "risk_skoru_float = 7.8\n\nrisk_seviyesi_int = int(risk_skoru_float)\n\nprint(risk_seviyesi_int)"
  },
  {
    "id": "U1_T4_E1",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Toplama ve Çıkarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Aritmetik Operatörler</h1><p>Python temel matematiksel işlemler için operatörler sağlar:</p><ul><li><code>+</code> (Toplama)</li><li><code>-</code> (Çıkarma)</li></ul><pre><code>toplam = 10 + 5\nfark = 100 - 20\nprint(toplam)\nprint(fark)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Paket Sayısı",
      "description": "<code>gelen_paket</code> 50, <code>giden_paket</code> 30 olarak verilmiştir. <code>toplam_paket</code> adında bir değişken oluşturun ve bu iki değişkenin toplamını ona atayın. Sonra <code>toplam_paket</code>'i yazdırın.",
      "hint": "<code>toplam_paket = gelen_paket + giden_paket</code>"
    },
    "default_code": "gelen_paket = 50\ngiden_paket = 30\n\n# Toplamı burada hesaplayın\n\n\n# Toplamı yazdırın\n",
    "solution": "gelen_paket = 50\ngiden_paket = 30\n\ntoplam_paket = gelen_paket + giden_paket\n\nprint(toplam_paket)"
  },
  {
    "id": "U1_T4_E2",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Çarpma ve Bölme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Çarpma ve Bölme</h1><p>Matematiksel işlemlere devam:</p><ul><li><code>*</code> (Çarpma)</li><li><code>/</code> (Bölme)</li></ul><p><strong>Önemli:</strong> <code>/</code> operatörü ile yapılan bölme işlemi, sonuç tamsayı bile olsa, her zaman bir <code>float</code> (ondalıklı sayı) döndürür.</p><pre><code>carpim = 5 * 10 # Sonuç: 50 (int)\nbolum = 10 / 2 # Sonuç: 5.0 (float)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ortalama Hız",
      "description": "<code>toplam_veri_mb</code> 1000, <code>gecen_sure_sn</code> 10 olarak verilmiştir. <code>hiz_mbps</code> adında bir değişken oluşturun ve <code>toplam_veri_mb</code>'ı <code>gecen_sure_sn</code>'ye bölerek hızı hesaplayın. Sonra <code>hiz_mbps</code>'yi yazdırın.",
      "hint": "<code>hiz_mbps = toplam_veri_mb / gecen_sure_sn</code>"
    },
    "default_code": "toplam_veri_mb = 1000\ngecen_sure_sn = 10\n\n# Hızı burada hesaplayın\n\n\n# Hızı yazdırın\n",
    "solution": "toplam_veri_mb = 1000\ngecen_sure_sn = 10\n\nhiz_mbps = toplam_veri_mb / gecen_sure_sn\n\nprint(hiz_mbps)"
  },
  {
    "id": "U1_T4_E3",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "İşlem Önceliği",
    "difficulty": "Orta",
    "lesson_html": "<h1>İşlem Önceliği</h1><p>Python, matematikteki işlem önceliği kurallarına uyar (PEMDAS/ÇarpBölTopÇık):</p><ol><li><code>()</code> (Parantez içi)</li><li><code>**</code> (Üs alma)</li><li><code>*</code> (Çarpma), <code>/</code> (Bölme)</li><li><code>+</code> (Toplama), <code>-</code> (Çıkarma)</li></ol><pre><code>sonuc = 10 + 5 * 2 # Önce çarpma: 10 + 10 = 20\nsonuc_parantez = (10 + 5) * 2 # Önce parantez: 15 * 2 = 30</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Önceliği Değiştir",
      "description": "<code>sonuc</code> değişkeninin değerinin <code>50</code> olmasını istiyoruz. Aşağıdaki kodda parantezleri (<code>()</code>) kullanarak <code>20 + 30</code> işleminin <code>/ 2</code> işleminden önce yapılmasını sağlayın.",
      "hint": "Toplama işlemini parantez içine alın: <code>(20 + 30)</code>"
    },
    "default_code": "# Sonucun 35 değil 25 olmasını sağlayın (Düzeltme: 50 değil 25 olmalı)\n# (20 + 30) / 2 = 25\nsonuc = 20 + 30 / 2 \n\n# Kodu yukarıda düzeltin\nprint(sonuc)",
    "solution": "sonuc = (20 + 30) / 2 \n\nprint(sonuc)"
  },
  {
    "id": "U1_T4_E4",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Tam Bölme (Floor Division)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tam Bölme (Floor Division)</h1><p>Bazen bölme işleminin ondalıklı kısmını atıp sadece tamsayı kısmını almak istersiniz. Bunun için <code>//</code> operatörü kullanılır.</p><p>Bu, sonucu <code>float</code> yapan <code>/</code> operatöründen farklıdır.</p><pre><code>bolum_float = 10 / 3 # Sonuç: 3.333...\nbolum_int = 10 // 3 # Sonuç: 3</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Paket Sayısı",
      "description": "<code>toplam_bayt</code> 5000, <code>paket_boyutu</code> 1500 olarak verilmiştir. <code>//</code> operatörünü kullanarak kaç adet *tam* paket gönderilebileceğini hesaplayın ve <code>tam_paket_sayisi</code> değişkenine atayın. Sonra bu değişkeni yazdırın.",
      "hint": "<code>tam_paket_sayisi = toplam_bayt // paket_boyutu</code>"
    },
    "default_code": "toplam_bayt = 5000\npaket_boyutu = 1500\n\n# Tam paket sayısını burada hesaplayın\n\n\n# Sonucu yazdırın\n",
    "solution": "toplam_bayt = 5000\npaket_boyutu = 1500\n\ntam_paket_sayisi = toplam_bayt // paket_boyutu\n\nprint(tam_paket_sayisi)"
  },
  {
    "id": "U1_T4_E5",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Kalanı Bulma (Modülüs)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Kalanı Bulma (Modülüs)</h1><p><code>%</code> (modülüs) operatörü, bir bölme işleminden kalanı verir. Bu, bir sayının çift mi tek mi olduğunu anlamak veya belirli aralıklarla bir iş yapmak için çok kullanışlıdır.</p><pre><code># 10'un 3'e bölümünden kalan\nkalan = 10 % 3 # Sonuç: 1\n\n# 80'in 2'ye bölümünden kalan (çift sayı kontrolü)\nkalan_port = 80 % 2 # Sonuç: 0</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Artan Baytlar",
      "description": "<code>toplam_bayt</code> 5000, <code>paket_boyutu</code> 1500 olarak verilmiştir. <code>%</code> operatörünü kullanarak, tam paketler gönderildikten sonra geriye kaç bayt kaldığını (artanı) hesaplayın ve <code>artan_bayt</code> değişkenine atayın. Sonra bu değişkeni yazdırın.",
      "hint": "<code>artan_bayt = toplam_bayt % paket_boyutu</code>"
    },
    "default_code": "toplam_bayt = 5000\npaket_boyutu = 1500\n\n# Artan bayt'ı burada hesaplayın\n\n\n# Sonucu yazdırın\n",
    "solution": "toplam_bayt = 5000\npaket_boyutu = 1500\n\nartan_bayt = toplam_bayt % paket_boyutu\n\nprint(artan_bayt)"
  },
  {
    "id": "U1_T4_E6",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Üs Alma (Exponentiation)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Üs Alma (Exponentiation)</h1><p>Bir sayının kuvvetini (üssünü) almak için <code>**</code> operatörü kullanılır. Bu, özellikle kriptografide anahtar uzaylarını hesaplarken önemlidir.</p><pre><code># 2'nin 3. kuvveti (2*2*2)\nikinin_kupu = 2 ** 3 # Sonuç: 8\n\n# 8-bit bir anahtarın olası kombinasyon sayısı\nkombinasyonlar = 2 ** 8 # Sonuç: 256</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kombinasyon Hesabı",
      "description": "4 haneli (0-9) bir PIN kodunun kaç farklı kombinasyonu olduğunu hesaplayın. (Her hane için 10 olasılık vardır). <code>10</code>'un <code>4</code>. kuvvetini <code>**</code> operatörünü kullanarak hesaplayın ve <code>kombinasyon_sayisi</code> değişkenine atayıp yazdırın.",
      "hint": "<code>kombinasyon_sayisi = 10 ** 4</code>"
    },
    "default_code": "# Kombinasyon sayısını burada hesaplayın\n\n\n# Sonucu yazdırın\n",
    "solution": "kombinasyon_sayisi = 10 ** 4\nprint(kombinasyon_sayisi)"
  },
  {
    "id": "U1_T4_E7",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Karşılaştırma: Eşittir (==)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Karşılaştırma Operatörleri (==)</h1><p>Karşılaştırma operatörleri iki değeri karşılaştırır ve sonuç olarak <code>True</code> (Doğru) veya <code>False</code> (Yanlış) bir boolean değer döndürür.</p><p><code>==</code> (çift eşittir) operatörü, iki değerin birbirine eşit olup olmadığını kontrol eder. (Tek <code>=</code> atama operatörüdür, karıştırmayın!)</p><pre><code>print(5 == 5) # Çıktı: True\nprint(5 == 6) # Çıktı: False\nprint(\"admin\" == \"admin\") # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adı Kontrolü",
      "description": "<code>kullanici_adi</code> değişkeninin değerinin <code>\"root\"</code> stringine eşit olup olmadığını kontrol edin. Sonucu <code>is_root</code> adlı bir değişkene atayın ve bu değişkeni yazdırın.",
      "hint": "<code>is_root = (kullanici_adi == \"root\")</code>"
    },
    "default_code": "kullanici_adi = \"root\"\n\n# Kontrolü burada yapın ve değişkene atayın\n\n\n# Sonucu (True/False) yazdırın\n",
    "solution": "kullanici_adi = \"root\"\n\nis_root = (kullanici_adi == \"root\")\n\nprint(is_root)"
  },
  {
    "id": "U1_T4_E8",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Karşılaştırma: Eşit Değildir (!=)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Karşılaştırma Operatörü (!=)</h1><p><code>!=</code> (eşit değildir) operatörü, iki değerin birbirinden farklı olup olmadığını kontrol eder. Eşit değillerse <code>True</code>, eşitlerse <code>False</code> döndürür.</p><pre><code>print(5 != 6) # Çıktı: True\nprint(5 != 5) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Kontrolü",
      "description": "<code>yasakli_port</code> 22 olarak verilmiştir. <code>hedef_port</code>'un <code>yasakli_port</code>'a eşit *olmadığını* <code>!=</code> operatörü ile kontrol edin. Sonucu <code>is_guvenli</code> adlı bir değişkene atayın ve bu değişkeni yazdırın.",
      "hint": "<code>is_guvenli = (hedef_port != yasakli_port)</code>"
    },
    "default_code": "yasakli_port = 22\nhedef_port = 80\n\n# Kontrolü burada yapın ve değişkene atayın\n\n\n# Sonucu (True/False) yazdırın\n",
    "solution": "yasakli_port = 22\nhedef_port = 80\n\nis_guvenli = (hedef_port != yasakli_port)\n\nprint(is_guvenli)"
  },
  {
    "id": "U1_T4_E9",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Karşılaştırma: Büyüktür/Küçüktür (>, <)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Karşılaştırma Operatörleri (>, <)</h1><p><code>></code> (büyüktür) ve <code><</code> (küçüktür) operatörleri sayısal değerleri karşılaştırır.</p><pre><code>print(10 > 5) # Çıktı: True\nprint(10 < 5) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Skoru Kontrolü",
      "description": "<code>risk_skoru</code> 6 olarak verilmiştir. Bu skorun <code>5</code>'ten büyük olup olmadığını <code>></code> operatörü ile kontrol edin. Sonucu <code>is_yuksek_riskli</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>is_yuksek_riskli = (risk_skoru > 5)</code>"
    },
    "default_code": "risk_skoru = 6\n\n# Kontrolü burada yapın ve değişkene atayın\n\n\n# Sonucu (True/False) yazdırın\n",
    "solution": "risk_skoru = 6\n\nis_yuksek_riskli = (risk_skoru > 5)\n\nprint(is_yuksek_riskli)"
  },
  {
    "id": "U1_T4_E10",
    "unit_id": 1,
    "topic_id": 4,
    "unit_name": "Python Temelleri",
    "topic_name": "Operatörler",
    "title": "Karşılaştırma: Büyük/Küçük Eşit (>=, <=)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Karşılaştırma Operatörleri (>=, <=)</h1><p><code>>=</code> (büyük veya eşittir) ve <code><=</code> (küçük veya eşittir) operatörleri, değerin kendisini de kontrol kapsamına dahil eder.</p><pre><code>print(10 >= 10) # Çıktı: True\nprint(10 > 10)  # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yetkili Port",
      "description": "Sistemlerde genellikle 1024'ten küçük portlar 'yetkili port' olarak kabul edilir (root yetkisi gerektirir). <code>hedef_port</code> 1024'e 'küçük veya eşit' (<code><=</code>) olup olmadığını kontrol ederek <code>is_yetkili_port</code> değişkenine atayın ve yazdırın.",
      "hint": "Eşik değer 1024'tür. <code><=</code> operatörünü kullanın."
    },
    "default_code": "hedef_port = 80\n\n# Kontrolü burada yapın ve değişkene atayın\n\n\n# Sonucu (True/False) yazdırın\n",
    "solution": "hedef_port = 80\n\nis_yetkili_port = (hedef_port <= 1024)\n\nprint(is_yetkili_port)"
  },
  {
    "id": "U1_T5_E1",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Mantıksal 'and'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Mantıksal Operatörler: and</h1><p>Mantıksal operatörler, <code>True</code>/<code>False</code> (boolean) değerleri üzerinde işlem yapar. Genellikle <code>if</code> bloklarında birden fazla koşulu birleştirmek için kullanılırlar.</p><p><code>and</code> (ve) operatörü, her iki koşul da <code>True</code> ise <code>True</code> döndürür. Biri bile <code>False</code> ise <code>False</code> döndürür.</p><pre><code>print(True and True)   # Çıktı: True\nprint(True and False)  # Çıktı: False\nprint(False and False) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Admin Girişi",
      "description": "Bir kullanıcının admin erişimi alabilmesi için hem <code>kullanici_dogru</code> hem de <code>parola_dogru</code> değişkenlerinin <code>True</code> olması gerekiyor. <code>and</code> operatörünü kullanarak bu iki koşulun sonucunu <code>erisime_izin_ver</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>erisime_izin_ver = kullanici_dogru and parola_dogru</code>"
    },
    "default_code": "kullanici_dogru = True\nparola_dogru = True\n\n# Kontrolü burada yapın ve değişkene atayın\n\n\n# Sonucu (True/False) yazdırın\n",
    "solution": "kullanici_dogru = True\nparola_dogru = True\n\nerisime_izin_ver = kullanici_dogru and parola_dogru\n\nprint(erisime_izin_ver)"
  },
  {
    "id": "U1_T5_E2",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Mantıksal 'and' (Örnek 2)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'and' Operatörü</h1><p><code>and</code> operatöründe, koşullardan biri bile <code>False</code> olursa, genel sonuç her zaman <code>False</code> olur.</p><pre><code>giris_yapti = True\nyetkisi_var = False\n\nerisim = giris_yapti and yetkisi_var\nprint(erisim) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Bağlantı",
      "description": "Güvenli bir bağlantı için hem <code>firewall_aktif</code> hem de <code>port_kapali</code> <code>True</code> olmalıdır. Ancak <code>port_kapali</code> <code>False</code> olarak ayarlanmıştır. Bu iki değişkeni <code>and</code> ile birleştirip <code>is_guvenli</code> değişkenine atayın ve sonucu yazdırın (Sonuç <code>False</code> çıkmalı).",
      "hint": "<code>is_guvenli = firewall_aktif and port_kapali</code>"
    },
    "default_code": "firewall_aktif = True\nport_kapali = False\n\n# Kontrolü burada yapın\n\n\n# Sonucu yazdırın\n",
    "solution": "firewall_aktif = True\nport_kapali = False\n\nis_guvenli = firewall_aktif and port_kapali\n\nprint(is_guvenli)"
  },
  {
    "id": "U1_T5_E3",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Mantıksal 'or'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Mantıksal Operatörler: or</h1><p><code>or</code> (veya) operatörü, koşullardan *en az biri* <code>True</code> ise <code>True</code> döndürür. Sadece her iki koşul da <code>False</code> ise <code>False</code> döndürür.</p><pre><code>print(True or True)   # Çıktı: True\nprint(True or False)  # Çıktı: True\nprint(False or False) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Şüpheli Aktivite",
      "description": "Bir aktivitenin şüpheli sayılması için <code>cok_fazla_deneme</code> VEYA <code>yanlis_konum</code> koşullarından birinin <code>True</code> olması yeterlidir. <code>or</code> kullanarak bu iki koşulu birleştirin ve <code>is_supheli</code> değişkenine atayıp yazdırın.",
      "hint": "<code>is_supheli = cok_fazla_deneme or yanlis_konum</code>"
    },
    "default_code": "cok_fazla_deneme = False\nyanlis_konum = True\n\n# Kontrolü burada yapın\n\n\n# Sonucu yazdırın\n",
    "solution": "cok_fazla_deneme = False\nyanlis_konum = True\n\nis_supheli = cok_fazla_deneme or yanlis_konum\n\nprint(is_supheli)"
  },
  {
    "id": "U1_T5_E4",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Mantıksal 'or' (Örnek 2)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'or' Operatörü</h1><p><code>or</code> operatöründe, her iki koşul da <code>False</code> olduğunda sonuç <code>False</code> olur. Diğer tüm durumlarda <code>True</code>'dur.</p>",
    "challenge": {
      "title": "Meydan Okuma: Alarm Yok",
      "description": "<code>hareket_algilandi</code> ve <code>kapi_acik</code> değişkenlerinin ikisi de <code>False</code>. Bu iki durumu <code>or</code> ile birleştirip <code>alarm_cal</code> değişkenine atayın ve sonucu yazdırın (Sonuç <code>False</code> çıkmalı).",
      "hint": "<code>alarm_cal = hareket_algilandi or kapi_acik</code>"
    },
    "default_code": "hareket_algilandi = False\nkapi_acik = False\n\n# Kontrolü burada yapın\n\n\n# Sonucu yazdırın\n",
    "solution": "hareket_algilandi = False\nkapi_acik = False\n\nalarm_cal = hareket_algilandi or kapi_acik\n\nprint(alarm_cal)"
  },
  {
    "id": "U1_T5_E5",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Mantıksal 'not'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Mantıksal Operatörler: not</h1><p><code>not</code> (değil) operatörü, tek bir boolean değeri tersine çevirir. <code>True</code>'u <code>False</code> yapar, <code>False</code>'u <code>True</code> yapar.</p><pre><code>print(not True)  # Çıktı: False\nprint(not False) # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bağlantı Durumu",
      "description": "<code>baglanti_var</code> değişkeni <code>True</code> olarak ayarlanmıştır. <code>not</code> operatörünü kullanarak bu durumun tersini (bağlantının *olmadığı* durumu) <code>baglanti_yok</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>baglanti_yok = not baglanti_var</code>"
    },
    "default_code": "baglanti_var = True\n\n# Değişkenin tersini alın\n\n\n# Sonucu yazdırın\n",
    "solution": "baglanti_var = True\n\nbaglanti_yok = not baglanti_var\n\nprint(baglanti_yok)"
  },
  {
    "id": "U1_T5_E6",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Operatörleri Birleştirme (and, or)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Mantıksal Operatörleri Birleştirme</h1><p><code>and</code>, <code>or</code> ve <code>not</code> operatörlerini, tıpkı matematiksel operatörler gibi (parantezler kullanarak) birleştirebilirsiniz. <code>and</code> işlemi <code>or</code> işleminden önce yapılır (tıpkı çarpmanın toplamadan önce yapılması gibi).</p><pre><code># (True or False) -> True. (True and True) -> True.\nsonuc = (True or False) and True \nprint(sonuc) # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Erişim Kontrolü",
      "description": "Bir kullanıcının 'Yönetici' VEYA (aynı anda 'Editör' VE 'Giriş Yapmış') olması durumunda erişim verilecektir. <code>kullanici_rolu</code>, <code>is_editor</code> ve <code>is_logged_in</code> değişkenlerini kullanarak bu mantığı <code>erisim_ver</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>erisim_ver = (kullanici_rolu == \"Yönetici\") or (is_editor and is_logged_in)</code>"
    },
    "default_code": "kullanici_rolu = \"Misafir\"\nis_editor = True\nis_logged_in = True\n\n# Kontrolü burada yapın\n\n\n# Sonucu yazdırın\n",
    "solution": "kullanici_rolu = \"Misafir\"\nis_editor = True\nis_logged_in = True\n\nerisim_ver = (kullanici_rolu == \"Yönetici\") or (is_editor and is_logged_in)\n\nprint(erisim_ver)"
  },
  {
    "id": "U1_T5_E7",
    "unit_id": 1,
    "topic_id": 5,
    "unit_name": "Python Temelleri",
    "topic_name": "Mantıksal Operatörler",
    "title": "Operatörleri Birleştirme (and, not)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'and' ve 'not' Birleşimi</h1><p><code>not</code> operatörü genellikle bir durumun *olmadığını* kontrol etmek için kullanılır.</p><pre><code>sicaklik = 25\nyagmur_yagiyor = False\n\n# Dışarı çıkmak için: Sıcaklık > 20 VE yağmur yağmıyor OLMALI\ndisari_cik = (sicaklik > 20) and (not yagmur_yagiyor)\nprint(disari_cik) # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Port",
      "description": "Bir portun 'güvenli' sayılması için <code>port > 1024</code> VE <code>is_yasakli_port</code>'un <code>False</code> (yani yasaklı DEĞİL) olması gerekir. <code>and</code> ve <code>not</code> operatörlerini kullanarak bu mantığı <code>is_guvenli</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>is_guvenli = (port > 1024) and (not is_yasakli_port)</code>"
    },
    "default_code": "port = 8080\nis_yasakli_port = False\n\n# Kontrolü burada yapın\n\n\n# Sonucu yazdırın\n",
    "solution": "port = 8080\nis_yasakli_port = False\n\nis_guvenli = (port > 1024) and (not is_yasakli_port)\n\nprint(is_guvenli)"
  },
  {
    "id": "U1_T6_E1",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "String Uzunluğu (len())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>String Uzunluğu: len()</h1><p><code>len()</code> fonksiyonu, bir string'in (veya liste gibi diğer veri yapılarının) kaç karakterden oluştuğunu (uzunluğunu) döndürür. Boşluklar da birer karakterdir.</p><pre><code>metin = \"Merhaba\"\nprint(len(metin)) # Çıktı: 7\n\nparola = \"sifre123\"\nprint(len(parola)) # Çıktı: 8</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Parola Uzunluğu",
      "description": "Siber güvenlikte parola politikaları önemlidir. <code>yeni_parola</code> değişkeninin uzunluğunu <code>len()</code> fonksiyonu ile hesaplayın ve konsola yazdırın.",
      "hint": "<code>print(len(yeni_parola))</code>"
    },
    "default_code": "yeni_parola = \"Guv3nl!_P@r0lA\"\n\n# Parolanın uzunluğunu hesaplayıp yazdırın\n",
    "solution": "yeni_parola = \"Guv3nl!_P@r0lA\"\n\nprint(len(yeni_parola))"
  },
  {
    "id": "U1_T6_E2",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Büyük/Küçük Harf (.upper(), .lower())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>String Metodları: .upper() / .lower()</h1><p>String'ler, üzerlerinde işlem yapabilen 'metod' adı verilen özel fonksiyonlara sahiptir. Bu metodlar <code>degisken.metod()</code> şeklinde çağrılır.</p><ul><li><code>.upper()</code>: Tüm metni BÜYÜK harfe çevirir.</li><li><code>.lower()</code>: Tüm metni küçük harfe çevirir.</li></ul><p>Bu, kullanıcı girdilerini karşılaştırırken (örn: 'admin', 'Admin', 'ADMIN' hepsini aynı kabul etmek için) çok önemlidir.</p><pre><code>metin = \"Merhaba\"\nprint(metin.upper()) # Çıktı: MERHABA\nprint(metin.lower()) # Çıktı: merhaba</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Girdiyi Normalleştir",
      "description": "<code>kullanici_girdisi</code> \"ADMIN\" olarak verilmiştir. Karşılaştırma yapmadan önce bu girdiyi <code>.lower()</code> metodu ile tamamen küçük harfe çevirin ve <code>normallestirilmis_girdi</code> değişkenine atayın. Sonra bu yeni değişkeni yazdırın.",
      "hint": "<code>normallestirilmis_girdi = kullanici_girdisi.lower()</code>"
    },
    "default_code": "kullanici_girdisi = \"ADMIN\"\n\n# Girdiyi küçük harfe çevirin\n\n\n# Yeni değişkeni yazdırın\n",
    "solution": "kullanici_girdisi = \"ADMIN\"\n\nnormallestirilmis_girdi = kullanici_girdisi.lower()\n\nprint(normallestirilmis_girdi)"
  },
  {
    "id": "U1_T6_E3",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Büyük Harfe Çevirme (.upper())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>String Metodu: .upper()</h1><p><code>.upper()</code> metodu, string'deki tüm karakterleri büyük harfe dönüştürür. Orijinal değişkeni değiştirmez, yeni bir string döndürür.</p><pre><code>isim = \"root\"\nbuyuk_isim = isim.upper()\nprint(buyuk_isim) # Çıktı: ROOT\nprint(isim)       # Çıktı: root (orijinal değişmez)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hata Kodunu Vurgula",
      "description": "<code>hata_mesaji</code> \"acil durum\" olarak verilmiştir. Mesajı daha görünür kılmak için <code>.upper()</code> metodu ile tamamen BÜYÜK harfe çevirin ve konsola yazdırın.",
      "hint": "<code>print(hata_mesaji.upper())</code>"
    },
    "default_code": "hata_mesaji = \"acil durum\"\n\n# Mesajı büyük harfe çevirip yazdırın\n",
    "solution": "hata_mesaji = \"acil durum\"\n\nprint(hata_mesaji.upper())"
  },
  {
    "id": "U1_T6_E4",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Boşlukları Temizleme (.strip())",
    "difficulty": "Orta",
    "lesson_html": "<h1>String Metodu: .strip()</h1><p>Kullanıcıdan gelen verilerde genellikle başta veya sonda istenmeyen boşluklar olabilir. <code>.strip()</code> metodu, bir string'in başındaki ve sonundaki tüm boşluk (ve benzeri görünmez) karakterleri temizler.</p><pre><code>girdi = \"  admin  \"\nprint(f\"Orijinal: '{girdi}'\")\n\ntemiz_girdi = girdi.strip()\nprint(f\"Temiz: '{temiz_girdi}'\")</code></pre><p>Çıktı:<br><code>Orijinal: '  admin  '</code><br><code>Temiz: 'admin'</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adını Temizle",
      "description": "<code>kullanici_adi</code> değişkeni, başında ve sonunda istenmeyen boşluklar ('   root   ') içermektedir. <code>.strip()</code> metodunu kullanarak bu boşlukları temizleyin ve sonucu <code>temiz_kullanici</code> değişkenine atayıp yazdırın.",
      "hint": "<code>temiz_kullanici = kullanici_adi.strip()</code>"
    },
    "default_code": "kullanici_adi = \"   root   \"\n\n# Boşlukları temizleyin\n\n\n# Temizlenmiş değişkeni yazdırın\n",
    "solution": "kullanici_adi = \"   root   \"\n\ntemiz_kullanici = kullanici_adi.strip()\n\nprint(temiz_kullanici)"
  },
  {
    "id": "U1_T6_E5",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Metin Değiştirme (.replace())",
    "difficulty": "Orta",
    "lesson_html": "<h1>String Metodu: .replace()</h1><p><code>.replace()</code> metodu, bir string içindeki belirli bir metin parçasını başka bir metin parçasıyla değiştirir.</p><p>Sözdizimi: <code>degisken.replace(\"eski_deger\", \"yeni_deger\")</code></p><pre><code>mesaj = \"Merhaba Dünya\"\nyeni_mesaj = mesaj.replace(\"Dünya\", \"Python\")\nprint(yeni_mesaj) # Çıktı: Merhaba Python</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Adresini Sansürle",
      "description": "<code>log_kaydi</code>, 'Kullanıcı 192.168.1.10 bağlandı' şeklinde bir metin içermektedir. Gizlilik için bu IP adresini (<code>\"192.168.1.10\"</code>) <code>\"IP_GIZLI\"</code> metni ile <code>.replace()</code> kullanarak değiştirin ve yeni log kaydını yazdırın.",
      "hint": "<code>yeni_log = log_kaydi.replace(\"192.168.1.10\", \"IP_GIZLI\")</code>"
    },
    "default_code": "log_kaydi = \"Kullanıcı 192.168.1.10 bağlandı\"\n\n# IP adresini değiştirin\n\n\n# Yeni log kaydını yazdırın\n",
    "solution": "log_kaydi = \"Kullanıcı 192.168.1.10 bağlandı\"\n\nyeni_log = log_kaydi.replace(\"192.168.1.10\", \"IP_GIZLI\")\n\nprint(yeni_log)"
  },
  {
    "id": "U1_T6_E6",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Metin Bulma (.find())",
    "difficulty": "Orta",
    "lesson_html": "<h1>String Metodu: .find()</h1><p><code>.find()</code> metodu, bir string içinde başka bir string'i arar. Aradığı metni bulursa, bulduğu yerin *başlangıç indeksini* (sıra numarasını) döndürür. Bulamazsa <code>-1</code> döndürür.</p><p>Not: Python'da indeksler <code>0</code>'dan başlar.</p><pre><code>metin = \"Merhaba Dünya\"\nprint(metin.find(\"Dünya\")) # Çıktı: 8\nprint(metin.find(\"Python\")) # Çıktı: -1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hata Kelimesini Bul",
      "description": "<code>log_kaydi</code> içinde 'ERROR' kelimesinin geçip geçmediğini kontrol etmek istiyoruz. <code>.find()</code> metodunu kullanarak 'ERROR' kelimesini arayın ve bulduğu indeks numarasını (veya bulamazsa -1) konsola yazdırın.",
      "hint": "<code>print(log_kaydi.find(\"ERROR\"))</code>"
    },
    "default_code": "log_kaydi = \"INFO: Sistem başladı. ERROR: Disk dolu.\"\n\n# 'ERROR' kelimesinin indeksini bulun\n",
    "solution": "log_kaydi = \"INFO: Sistem başladı. ERROR: Disk dolu.\"\n\nprint(log_kaydi.find(\"ERROR\"))"
  },
  {
    "id": "U1_T6_E7",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Metin İçeriyor mu? ('in' operatörü)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'in' Operatörü</h1><p>Bir string'in içinde belirli bir metnin olup olmadığını kontrol etmenin <code>.find()</code>'dan daha kolay bir yolu <code>in</code> operatörünü kullanmaktır. Bu operatör <code>True</code> veya <code>False</code> döndürür.</p><pre><code>metin = \"Merhaba Dünya\"\nprint(\"Dünya\" in metin) # Çıktı: True\nprint(\"Python\" in metin) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Şüpheli Kelime Kontrolü",
      "description": "<code>email_icerigi</code> değişkeninde 'şifre' kelimesinin geçip geçmediğini <code>in</code> operatörünü kullanarak kontrol edin. Sonucu (<code>True</code>/<code>False</code>) <code>is_supheli</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>is_supheli = \"şifre\" in email_icerigi</code>"
    },
    "default_code": "email_icerigi = \"Lütfen şifre bilgilerinizi güncelleyin.\"\n\n# 'şifre' kelimesinin içerip içermediğini kontrol edin\n\n\n# Sonucu yazdırın\n",
    "solution": "email_icerigi = \"Lütfen şifre bilgilerinizi güncelleyin.\"\n\nis_supheli = \"şifre\" in email_icerigi\n\nprint(is_supheli)"
  },
  {
    "id": "U1_T6_E8",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Başlangıç Kontrolü (.startswith())",
    "difficulty": "Zor",
    "lesson_html": "<h1>String Metodu: .startswith()</h1><p><code>.startswith()</code> metodu, bir string'in belirli bir metinle başlayıp başlamadığını kontrol eder. <code>True</code> veya <code>False</code> döndürür.</p><p>Bu, protokolleri (http, https) veya komutları kontrol etmek için kullanışlıdır.</p><pre><code>url = \"https://google.com\"\nprint(url.startswith(\"https://\")) # Çıktı: True\nprint(url.startswith(\"http://\"))  # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli URL Kontrolü",
      "description": "<code>ziyaret_edilen_url</code> değişkenindeki adresin güvenli bir protokol (<code>\"https://\"</code>) ile başlayıp başlamadığını <code>.startswith()</code> metodu ile kontrol edin. Sonucu <code>is_guvenli</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>is_guvenli = ziyaret_edilen_url.startswith(\"https://\")</code>"
    },
    "default_code": "ziyaret_edilen_url = \"http://ornek-site.com\"\n\n# URL'nin 'https://' ile başlayıp başlamadığını kontrol edin\n\n\n# Sonucu yazdırın\n",
    "solution": "ziyaret_edilen_url = \"http://ornek-site.com\"\n\nis_guvenli = ziyaret_edilen_url.startswith(\"http://\")\n\nprint(is_guvenli)"
  },
  {
    "id": "U1_T6_E9",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Bitiş Kontrolü (.endswith())",
    "difficulty": "Zor",
    "lesson_html": "<h1>String Metodu: .endswith()</h1><p><code>.endswith()</code> metodu, bir string'in belirli bir metinle bitip bitmediğini kontrol eder. <code>True</code> veya <code>False</code> döndürür.</p><p>Bu, dosya uzantılarını (örn: .exe, .txt) kontrol etmek için kullanışlıdır.</p><pre><code>dosya = \"rapor.pdf\"\nprint(dosya.endswith(\".pdf\")) # Çıktı: True\nprint(dosya.endswith(\".txt\")) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tehlikeli Dosya Kontrolü",
      "description": "<code>yuklenen_dosya</code> değişkenindeki dosya adının, potansiyel tehlikeli bir uzantı olan <code>\".exe\"</code> ile bitip bitmediğini <code>.endswith()</code> metodu ile kontrol edin. Sonucu <code>is_tehlikeli</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>is_tehlikeli = yuklenen_dosya.endswith(\".exe\")</code>"
    },
    "default_code": "yuklenen_dosya = \"virus.exe\"\n\n# Dosyanın '.exe' ile bitip bitmediğini kontrol edin\n\n\n# Sonucu yazdırın\n",
    "solution": "yuklenen_dosya = \"virus.exe\"\n\nis_tehlikeli = yuklenen_dosya.endswith(\".exe\")\n\nprint(is_tehlikeli)"
  },
  {
    "id": "U1_T6_E10",
    "unit_id": 1,
    "topic_id": 6,
    "unit_name": "Python Temelleri",
    "topic_name": "String Manipülasyonu",
    "title": "Metodları Zincirleme",
    "difficulty": "Zor",
    "lesson_html": "<h1>Metodları Zincirleme</h1><p>String metodları genellikle yeni bir string döndürdüğü için, bu metodları art arda (zincirleme) kullanabilirsiniz. İşlemler soldan sağa doğru yapılır.</p><pre><code># Önce baş/sondaki boşlukları sil, sonra hepsini küçük harf yap\ngirdi = \"  Admin@Test.COM  \"\ntemiz_girdi = girdi.strip().lower()\nprint(temiz_girdi) # Çıktı: admin@test.com</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Girdiyi Tamamen Normalleştir",
      "description": "<code>log_girdisi</code> değişkeni karışık harfler ve başında boşluklar içermektedir. Tek bir satırda, önce <code>.strip()</code> metodunu kullanarak boşlukları temizleyin, ardından <code>.upper()</code> metodunu kullanarak tamamını büyük harfe çevirin. Sonucu <code>normallesmis_log</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>normallesmis_log = log_girdisi.strip().upper()</code>"
    },
    "default_code": "log_girdisi = \"  info: Baglanti basarili   \"\n\n# Metodları zincirleyerek girdiyi normalleştirin\n\n\n# Sonucu yazdırın\n",
    "solution": "log_girdisi = \"  info: Baglanti basarili   \"\n\nnormallesmis_log = log_girdisi.strip().upper()\n\nprint(normallesmis_log)"
  },
  {
    "id": "U2_T1_E1",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Basit 'if' Koşulu",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'if' Koşulu</h1><p>Python'da belirli bir kod bloğunu yalnızca bir koşul <code>True</code> (Doğru) olduğunda çalıştırmak için <code>if</code> anahtar kelimesi kullanılır.</p><p>Sözdizimi, koşuldan sonra iki nokta üst üste (<code>:</code>) ve çalıştırılacak kodun bir alt satırda <strong>girintili</strong> (genellikle 4 boşluk) olmasını gerektirir.</p><pre><code>durum = True\nif durum:\n    print(\"Koşul sağlandı\") # Bu satır girintili\n\nprint(\"Bu satır her zaman çalışır\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Erişim Kontrolü",
      "description": "<code>giris_yapti</code> değişkeni <code>True</code> olarak ayarlanmıştır. Bir <code>if</code> koşulu yazarak, bu değişken <code>True</code> ise konsola <code>\"Erişim verildi\"</code> yazdırın.",
      "hint": "<code>if giris_yapti:</code> yazdıktan sonra bir alt satıra geçip 4 boşluk girinti bırakarak <code>print(...)</code> komutunu yazın."
    },
    "default_code": "giris_yapti = True\n\n# 'if' bloğunu buraya yazın\n",
    "solution": "giris_yapti = True\n\nif giris_yapti:\n    print(\"Erişim verildi\")"
  },
  {
    "id": "U2_T1_E2",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'if' ve Karşılaştırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'if' ve Karşılaştırma</h1><p><code>if</code> bloğu, <code>True</code> veya <code>False</code> döndüren herhangi bir ifadeyi (karşılaştırma operatörleri gibi) kontrol edebilir.</p><pre><code>port = 80\nif port == 80:\n    print(\"HTTP Portu açık\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Kontrolü",
      "description": "<code>hedef_port</code> değişkeninin değeri <code>22</code>'ye eşitse (<code>==</code>), konsola <code>\"SSH portu tespit edildi\"</code> yazdıran bir <code>if</code> bloğu oluşturun.",
      "hint": "Koşulunuz <code>if hedef_port == 22:</code> şeklinde olmalı."
    },
    "default_code": "hedef_port = 22\n\n# 'if' bloğunu buraya yazın\n",
    "solution": "hedef_port = 22\n\nif hedef_port == 22:\n    print(\"SSH portu tespit edildi\")"
  },
  {
    "id": "U2_T1_E3",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'if' Koşulu Sağlanmazsa",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Koşul Sağlanmazsa</h1><p>Eğer <code>if</code> bloğundaki koşul <code>False</code> (Yanlış) olarak değerlendirilirse, girintili kod bloğu <strong>çalıştırılmaz</strong> ve program akışı <code>if</code> bloğundan sonraki ilk girintisiz satırdan devam eder.</p><pre><code>aktif = False\nif aktif:\n    print(\"Bu mesaj görünmeyecek\")\n\nprint(\"Program bitti\") # Sadece bu mesaj görünür</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yanlış Parola",
      "description": "<code>parola_dogru</code> değişkeni <code>False</code> olarak ayarlanmıştır. <code>if parola_dogru:</code> koşuluyla <code>print(\"Giriş başarılı\")</code> yazdıran bir kod yazın. Programı çalıştırdığınızda konsolda hiçbir şeyin yazmadığını (çünkü koşulun sağlanmadığını) gözlemleyin.",
      "hint": "<code>if</code> bloğunun içine yazdığınız <code>print</code> komutu çalışmayacaktır. Bu beklenen bir davranıştır."
    },
    "default_code": "parola_dogru = False\n\n# 'if' bloğunu buraya yazın\n",
    "solution": "parola_dogru = False\n\nif parola_dogru:\n    print(\"Giriş başarılı\")"
  },
  {
    "id": "U2_T1_E4",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'else' (Değilse) Bloğu",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'else' (Değilse) Bloğu</h1><p><code>else</code> bloğu, <code>if</code> koşulu <code>False</code> olduğunda çalıştırılacak bir kod bloğu tanımlamanızı sağlar.</p><p><code>else</code>, <code>if</code> bloğuyla aynı girinti seviyesinde olmalı ve iki nokta üst üste (<code>:</code>) içermelidir.</p><pre><code>port = 22\nif port == 80:\n    print(\"Web sunucusu\")\nelse:\n    print(\"Başka bir servis\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Erişim Reddi",
      "description": "<code>is_admin</code> değişkeni <code>False</code>'tur. <code>if is_admin:</code> koşulu sağlanırsa <code>\"Yönetici girişi\"</code>, sağlanmazsa (<code>else</code>) <code>\"Erişim reddedildi\"</code> yazdıran bir kod bloğu yazın.",
      "hint": "<code>if is_admin: ...</code> bloğundan sonra aynı hizada <code>else:</code> yazın ve altına girintili olarak <code>print(\"Erişim reddedildi\")</code> ekleyin."
    },
    "default_code": "is_admin = False\n\n# if/else bloğunu buraya yazın\n",
    "solution": "is_admin = False\n\nif is_admin:\n    print(\"Yönetici girişi\")\nelse:\n    print(\"Erişim reddedildi\")"
  },
  {
    "id": "U2_T1_E5",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'if/else' ve 'in' Operatörü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'if/else' ve 'in' Operatörü</h1><p><code>in</code> operatörü, bir <code>if</code> koşulunda kullanmak için mükemmeldir. <code>True</code> veya <code>False</code> döndürür.</p><pre><code>log = \"HATA: Servis durdu\"\nif \"HATA\" in log:\n    print(\"Log dosyasında hata bulundu\")\nelse:\n    print(\"Log temiz\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Şüpheli Kelime Tespiti",
      "description": "<code>email_konusu</code> değişkeni 'Ücretsiz teklif' içermektedir. <code>email_konusu</code> içinde 'Ücretsiz' kelimesi (<code>in</code>) geçiyorsa <code>\"Spam olabilir\"</code>, geçmiyorsa (<code>else</code>) <code>\"Güvenli görünüyor\"</code> yazdırın.",
      "hint": "<code>if \"Ücretsiz\" in email_konusu: ... else: ...</code>"
    },
    "default_code": "email_konusu = \"Ücretsiz teklif\"\n\n# if/else bloğunu buraya yazın\n",
    "solution": "email_konusu = \"Ücretsiz teklif\"\n\nif \"Ücretsiz\" in email_konusu:\n    print(\"Spam olabilir\")\nelse:\n    print(\"Güvenli görünüyor\")"
  },
  {
    "id": "U2_T1_E6",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'elif' (Değilse Eğer) Bloğu",
    "difficulty": "Orta",
    "lesson_html": "<h1>'elif' (Değilse Eğer) Bloğu</h1><p>İkiden fazla koşulunuz olduğunda <code>elif</code> (else if'in kısaltması) kullanılır. <code>if</code> koşulu <code>False</code> ise, Python <code>elif</code> koşulunu kontrol eder. O da <code>False</code> ise sonrakini kontrol eder.</p><pre><code>port = 22\nif port == 80:\n    print(\"HTTP\")\nelif port == 443:\n    print(\"HTTPS\")\nelif port == 22:\n    print(\"SSH\")\nelse:\n    print(\"Bilinmeyen port\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Seviyesi",
      "description": "<code>risk_skoru</code> 5'tir. <code>if</code>/<code>elif</code>/<code>else</code> kullanarak:<ul><li>Eğer skor <code>8</code>'den büyükse <code>\"Kritik Risk\"</code> yazdırın.</li><li>Değilse, eğer skor <code>5</code>'ten büyükse (<code>> 5</code>) <code>\"Yüksek Risk\"</code> yazdırın.</li><li>Değilse (<code>else</code>) <code>\"Orta Risk\"</code> yazdırın.</li></ul>(Bu kodda <code>risk_skoru</code> 5 olduğu için son <code>else</code> bloğu çalışmalı, çünkü 5 > 5 <code>False</code>'tur)",
      "hint": "<code>if risk_skoru > 8: ... elif risk_skoru > 5: ... else: ...</code>"
    },
    "default_code": "risk_skoru = 5\n\n# if/elif/else zincirini buraya yazın\n",
    "solution": "risk_skoru = 5\n\nif risk_skoru > 8:\n    print(\"Kritik Risk\")\nelif risk_skoru > 5:\n    print(\"Yüksek Risk\")\nelse:\n    print(\"Orta Risk\")"
  },
  {
    "id": "U2_T1_E7",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "'elif' (Örnek 2)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'elif' Sırası</h1><p><code>if/elif/else</code> zincirinde Python, koşullardan biri <code>True</code> olduğunda o bloğu çalıştırır ve zincirin geri kalanını (diğer <code>elif</code> veya <code>else</code>'leri) <strong>kontrol etmeden</strong> atlar.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Rolü",
      "description": "<code>kullanici_rolu</code> \"editor\" olarak ayarlanmıştır. <code>if</code>/<code>elif</code>/<code>else</code> kullanarak:<ul><li>Rol <code>\"admin\"</code> ise <code>\"Tam Yetki\"</code> yazdırın.</li><li>Değilse, eğer rol <code>\"editor\"</code> ise <code>\"Sınırlı Yetki\"</code> yazdırın.</li><li>Değilse (<code>else</code>) <code>\"Yetki Yok\"</code> yazdırın.</li></ul>",
      "hint": "<code>if kullanici_rolu == \"admin\": ... elif kullanici_rolu == \"editor\": ... else: ...</code>"
    },
    "default_code": "kullanici_rolu = \"editor\"\n\n# if/elif/else zincirini buraya yazın\n",
    "solution": "kullanici_rolu = \"editor\"\n\nif kullanici_rolu == \"admin\":\n    print(\"Tam Yetki\")\nelif kullanici_rolu == \"editor\":\n    print(\"Sınırlı Yetki\")\nelse:\n    print(\"Yetki Yok\")"
  },
  {
    "id": "U2_T1_E8",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Mantıksal 'and' ile 'if'",
    "difficulty": "Orta",
    "lesson_html": "<h1>'if' ve Mantıksal 'and'</h1><p>Birden fazla koşulun aynı anda <code>True</code> olmasını kontrol etmek için <code>and</code> operatörünü kullanabilirsiniz.</p><pre><code>kullanici = \"admin\"\nparola = \"1234\"\n\nif kullanici == \"admin\" and parola == \"1234\":\n    print(\"Giriş başarılı\")\nelse:\n    print(\"Hatalı bilgi\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Erişim",
      "description": "Bir kullanıcının güvenli bölgeye erişmesi için hem <code>is_giris_yapti</code>'nın <code>True</code> OLMASI hem de <code>is_konum_turkiye</code>'nin <code>True</code> OLMASI gerekir. <code>and</code> kullanarak bu iki koşulu tek bir <code>if</code> bloğunda birleştirin. Koşul sağlanırsa <code>\"Güvenli Erişim\"</code>, sağlanmazsa <code>\"Erişim Engellendi\"</code> yazdırın.",
      "hint": "<code>if is_giris_yapti and is_konum_turkiye: ... else: ...</code>"
    },
    "default_code": "is_giris_yapti = True\nis_konum_turkiye = False\n\n# 'and' ile if/else bloğunu buraya yazın\n",
    "solution": "is_giris_yapti = True\nis_konum_turkiye = False\n\nif is_giris_yapti and is_konum_turkiye:\n    print(\"Güvenli Erişim\")\nelse:\n    print(\"Erişim Engellendi\")"
  },
  {
    "id": "U2_T1_E9",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Mantıksal 'or' ile 'if'",
    "difficulty": "Orta",
    "lesson_html": "<h1>'if' ve Mantıksal 'or'</h1><p>Koşullardan en az birinin <code>True</code> olmasının yeterli olduğu durumlar için <code>or</code> operatörünü kullanabilirsiniz.</p><pre><code>rol = \"admin\"\nif rol == \"admin\" or rol == \"moderator\":\n    print(\"Yönetim paneline erişim izni verildi\")\nelse:\n    print(\"Yetki yok\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Alarm Durumu",
      "description": "Alarmın çalması için <code>kapi_acik</code> VEYA <code>hareket_algilandi</code> değişkenlerinden birinin <code>True</code> olması yeterlidir. <code>or</code> kullanarak bu iki koşulu tek bir <code>if</code> bloğunda birleştirin. Koşul sağlanırsa <code>\"ALARM!\"</code>, sağlanmazsa <code>\"Sistem normal\"</code> yazdırın.",
      "hint": "<code>if kapi_acik or hareket_algilandi: ... else: ...</code>"
    },
    "default_code": "kapi_acik = False\nhareket_algilandi = True\n\n# 'or' ile if/else bloğunu buraya yazın\n",
    "solution": "kapi_acik = False\nhareket_algilandi = True\n\nif kapi_acik or hareket_algilandi:\n    print(\"ALARM!\")\nelse:\n    print(\"Sistem normal\")"
  },
  {
    "id": "U2_T1_E10",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Mantıksal 'not' ile 'if'",
    "difficulty": "Orta",
    "lesson_html": "<h1>'if' ve Mantıksal 'not'</h1><p>Bir koşulun <code>False</code> (yani *olmadığı*) durumu kontrol etmek için <code>not</code> operatörü kullanılır.</p><pre><code>baglanti_var = False\nif not baglanti_var:\n    print(\"Bağlantı yok, yeniden deneniyor...\")</code></pre><p>Bu, <code>if baglanti_var == False:</code> yazmakla aynı anlama gelir ancak daha 'Pythonic' (daha okunaklı) kabul edilir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı Olmayan IP",
      "description": "<code>is_yasakli</code> değişkeni <code>False</code>'tur. <code>if</code> bloğunda <code>not</code> operatörünü kullanarak bu değişkenin <code>False</code> olduğunu (yani 'yasaklı *değil*') kontrol edin. Koşul sağlanırsa (ki sağlanacak) <code>\"IP temiz, izin verildi\"</code> yazdırın.",
      "hint": "<code>if not is_yasakli:</code>"
    },
    "default_code": "is_yasakli = False\n\n# 'not' ile if bloğunu buraya yazın\n",
    "solution": "is_yasakli = False\n\nif not is_yasakli:\n    print(\"IP temiz, izin verildi\")"
  },
  {
    "id": "U2_T1_E11",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Koşullarda İşlem Önceliği",
    "difficulty": "Orta",
    "lesson_html": "<h1>Koşullarda İşlem Önceliği</h1><p>Tıpkı matematikteki gibi, mantıksal operatörlerin de bir işlem önceliği vardır: <code>not</code> en önce, sonra <code>and</code>, en son <code>or</code> yapılır. Karışıklığı önlemek için her zaman parantez <code>()</code> kullanın.</p><pre><code># (False and True) -> False. (False or True) -> True.\nsonuc = False and True or True \n\n# Parantezli (daha okunaklı):\nsonuc = (False and True) or True\nprint(sonuc) # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Karmaşık Erişim",
      "description": "Erişim için: (<code>is_admin</code> OLMALI VEYA <code>is_editor</code> OLMALI) VE <code>is_aktif_kullanici</code> OLMALI.<br><code>is_admin</code> <code>False</code>, <code>is_editor</code> <code>True</code>, <code>is_aktif_kullanici</code> <code>True</code> olarak verilmiştir. Parantezleri kullanarak bu mantığı doğru şekilde kurun ve <code>erisim</code> değişkenine atayıp yazdırın (Sonuç <code>True</code> çıkmalı).",
      "hint": "<code>erisim = (is_admin or is_editor) and is_aktif_kullanici</code>"
    },
    "default_code": "is_admin = False\nis_editor = True\nis_aktif_kullanici = True\n\n# Parantezleri kullanarak koşulu buraya yazın\nerisim = False # Bu satırı değiştirin\n\nprint(erisim)",
    "solution": "is_admin = False\nis_editor = True\nis_aktif_kullanici = True\n\nerisim = (is_admin or is_editor) and is_aktif_kullanici\n\nprint(erisim)"
  },
  {
    "id": "U2_T1_E12",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "String Metodları ile 'if'",
    "difficulty": "Orta",
    "lesson_html": "<h1>String Metodları ve 'if'</h1><p>String metodları (<code>.startswith()</code>, <code>.endswith()</code>, <code>.isupper()</code> vb.) genellikle <code>True</code>/<code>False</code> döndürür ve doğrudan <code>if</code> koşullarında kullanılabilirler.</p><pre><code>dosya = \"virus.exe\"\nif dosya.endswith(\".exe\"):\n    print(\"Tehlikeli dosya uzantısı!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli URL Kontrolü",
      "description": "<code>url</code> değişkeni 'http://example.com' içermektedir. <code>.startswith()</code> metodunu kullanarak bu URL'in <code>\"https://\"</code> ile başlayıp başlamadığını kontrol edin. Başlamıyorsa (<code>else</code> bloğu) <code>\"Güvenli değil: HTTPS kullanmıyor\"</code> yazdırın.",
      "hint": "<code>if url.startswith(\"https://\"): ... else: ...</code>"
    },
    "default_code": "url = \"http://example.com\"\n\n# if/else bloğunu .startswith() ile buraya yazın\n",
    "solution": "url = \"http://example.com\"\n\nif url.startswith(\"https://\"):\n    print(\"Güvenli bağlantı\")\nelse:\n    print(\"Güvenli değil: HTTPS kullanmıyor\")"
  },
  {
    "id": "U2_T1_E13",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Boş String Kontrolü",
    "difficulty": "Zor",
    "lesson_html": "<h1>'Truthiness' - Boş Değerler</h1><p>Python'da <code>if</code> koşulları sadece <code>True</code>/<code>False</code> değil, diğer değerleri de 'doğru' veya 'yanlış' olarak yorumlar.</p><ul><li><code>False</code> kabul edilenler: <code>None</code>, <code>False</code>, sayı <code>0</code>, boş string <code>\"\"</code>, boş liste <code>[]</code>, boş sözlük <code>{}</code>.</li><li>Bunların dışındaki her şey <code>True</code> kabul edilir.</li></ul><pre><code>kullanici_adi = \"\"\nif not kullanici_adi:\n    print(\"Kullanıcı adı boş olamaz\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Boş Girdi Kontrolü",
      "description": "<code>parola_girdisi</code> boş bir string (<code>\"\"</code>) olarak ayarlanmıştır. Bu değişkenin 'boş' (yani <code>False</code>) olup olmadığını <code>if not ...</code> ile kontrol edin. Eğer boşsa <code>\"Parola boş bırakılamaz\"</code> yazdırın.",
      "hint": "<code>if not parola_girdisi:</code>"
    },
    "default_code": "parola_girdisi = \"\"\n\n# Parolanın boş olup olmadığını kontrol edin\n",
    "solution": "parola_girdisi = \"\"\n\nif not parola_girdisi:\n    print(\"Parola boş bırakılamaz\")"
  },
  {
    "id": "U2_T1_E14",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "Sıfır (0) Kontrolü",
    "difficulty": "Zor",
    "lesson_html": "<h1>'Truthiness' - Sayı Sıfır</h1><p>Boş string'ler gibi, <code>0</code> (sıfır) tamsayısı da <code>if</code> koşulunda <code>False</code> olarak kabul edilir. 0 dışındaki tüm sayılar (negatifler dahil) <code>True</code> kabul edilir.</p><pre><code>hata_sayisi = 0\nif hata_sayisi:\n    # Bu blok çalışmaz, çünkü hata_sayisi 0 (False)\n    print(f\"{hata_sayisi} adet hata bulundu\")\nelse:\n    # Bu blok çalışır\n    print(\"Sistem temiz, hata yok\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hata Sayacı",
      "description": "<code>basarisiz_giris_sayisi</code> 3'tür. <code>if</code> bloğu ile bu değişkenin 0'dan farklı olup olmadığını (yani <code>True</code> kabul edilip edilmediğini) kontrol edin. Eğer 0'dan farklıysa (yani <code>if basarisiz_giris_sayisi:</code> koşulu <code>True</code> ise) <code>\"Başarısız giriş denemeleri var\"</code> yazdırın.",
      "hint": "<code>if basarisiz_giris_sayisi:</code>"
    },
    "default_code": "basarisiz_giris_sayisi = 3\n\n# Deneme sayısının 0'dan farklı olup olmadığını kontrol edin\n",
    "solution": "basarisiz_giris_sayisi = 3\n\nif basarisiz_giris_sayisi:\n    print(\"Başarısız giriş denemeleri var\")"
  },
  {
    "id": "U2_T1_E15",
    "unit_id": 2,
    "topic_id": 1,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Koşullu İfadeler",
    "title": "İç İçe 'if' (Nested if)",
    "difficulty": "Zor",
    "lesson_html": "<h1>İç İçe 'if' (Nested if)</h1><p>Bir <code>if</code> bloğunun içine, daha fazla kontrol yapmak için başka bir <code>if</code> bloğu (daha da girintili olarak) yerleştirebilirsiniz.</p><pre><code>kullanici = \"admin\"\nparola = \"1234\"\n\nif kullanici == \"admin\":\n    print(\"Kullanıcı adı doğru\")\n    if parola == \"1234\":\n        print(\"Parola doğru. Giriş yapıldı.\")\n    else:\n        print(\"Parola yanlış.\")\nelse:\n    print(\"Kullanıcı adı yanlış.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Çok Aşamalı Kontrol",
      "description": "<code>is_giris_yapti</code> <code>True</code> ve <code>is_admin</code> <code>False</code>'tur. Önce <code>is_giris_yapti</code>'yı kontrol edin. Eğer <code>True</code> ise, <em>bu bloğun içinde</em> <code>is_admin</code>'i kontrol edin. Eğer o da <code>True</code> ise <code>\"Admin paneli\"</code> yazdırın, <code>False</code> ise <code>\"Kullanıcı paneli\"</code> yazdırın.",
      "hint": "İlk <code>if is_giris_yapti:</code> bloğunun içine girintili olarak <code>if is_admin: ... else: ...</code> bloğunu yerleştirin."
    },
    "default_code": "is_giris_yapti = True\nis_admin = False\n\n# İç içe if bloğunu buraya yazın\n",
    "solution": "is_giris_yapti = True\nis_admin = False\n\nif is_giris_yapti:\n    if is_admin:\n        print(\"Admin paneli\")\n    else:\n        print(\"Kullanıcı paneli\")"
  },
  {
    "id": "U2_T2_E1",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Basit 'for' Döngüsü (range)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'for' Döngüsü ve range()</h1><p><code>for</code> döngüsü, bir kod bloğunu belirli bir sayıda tekrarlamak için kullanılır. En yaygın kullanımı <code>range()</code> fonksiyonu iledir.</p><p><code>range(5)</code>, 0'dan 5'e kadar (5 dahil değil) bir sayı dizisi oluşturur: <code>0, 1, 2, 3, 4</code>.</p><p><code>if</code> gibi, <code>for</code> satırı da <code>:</code> ile biter ve içindeki kod girintili olmalıdır.</p><pre><code># 'sayi' değişkeni her döngüde 0, 1, 2 değerlerini alır\nfor sayi in range(3):\n    print(sayi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 5 Kez Yazdır",
      "description": "<code>range()</code> fonksiyonunu kullanarak konsola 5 kez (0'dan 4'e kadar olan sayıları kullanarak) <code>\"Giriş denemesi...\"</code> yazdıran bir <code>for</code> döngüsü oluşturun.",
      "hint": "<code>for i in range(5):</code> yazın ve alt satıra girintili olarak <code>print(\"Giriş denemesi...\")</code> ekleyin."
    },
    "default_code": "# for döngüsünü buraya yazın\n",
    "solution": "for i in range(5):\n    print(\"Giriş denemesi...\")"
  },
  {
    "id": "U2_T2_E2",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "range(başlangıç, bitiş)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>range(başlangıç, bitiş)</h1><p><code>range()</code> fonksiyonu iki parametre alabilir: <code>range(baslangic, bitis)</code>. Bu durumda, <code>baslangic</code>'tan başlar ve <code>bitis</code>'e kadar (bitiş dahil değil) sayar.</p><pre><code># 1, 2, 3, 4 sayılarını yazdırır (5 dahil değil)\nfor sayi in range(1, 5):\n    print(sayi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Aralığı",
      "description": "Siber güvenlikte bazen belirli port aralıkları taranır. <code>range()</code> fonksiyonunu kullanarak <code>80</code>'den <code>83</code>'e kadar olan port numaralarını (yani 80, 81, 82) konsola alt alta yazdırın.",
      "hint": "Bitiş değerinin 82'yi kapsaması için <code>range(80, 83)</code> kullanmanız gerekir."
    },
    "default_code": "# Port taraması için döngüyü buraya yazın\n",
    "solution": "for port in range(80, 83):\n    print(port)"
  },
  {
    "id": "U2_T2_E3",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "String Üzerinde Döngü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>String Üzerinde Döngü</h1><p><code>for</code> döngüsü, sadece <code>range()</code> ile değil, bir string'in harfleri üzerinde de gezinebilir.</p><pre><code>kullanici = \"admin\"\nfor harf in kullanici:\n    print(harf)</code></pre><p>Çıktı:<br><code>a</code><br><code>d</code><br><code>m</code><br><code>i</code><br><code>n</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Parola Karakterleri",
      "description": "<code>parola</code> değişkeni 'sifre' olarak verilmiştir. Bir <code>for</code> döngüsü kullanarak bu parolanın her harfini alt alta konsola yazdırın.",
      "hint": "<code>for karakter in parola:</code>"
    },
    "default_code": "parola = \"sifre\"\n\n# Döngüyü buraya yazın\n",
    "solution": "parola = \"sifre\"\n\nfor karakter in parola:\n    print(karakter)"
  },
  {
    "id": "U2_T2_E4",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Liste Üzerinde Döngü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Liste Üzerinde Döngü</h1><p><code>for</code> döngüsünün en güçlü kullanımlarından biri, bir listenin (<code>[]</code>) elemanları üzerinde gezinmektir. (Listeleri detaylı olarak Ünite 3'te göreceğiz).</p><p>Liste, virgülle ayrılmış bir veri koleksiyonudur.</p><pre><code>portlar = [22, 80, 443]\nfor port in portlar:\n    print(f\"{port} portu taranıyor...\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesini Tara",
      "description": "<code>ip_listesi</code> adında bir liste verilmiştir. Bir <code>for</code> döngüsü kullanarak listedeki her bir IP adresini konsola <code>f-string</code> ile <code>\"Taranan IP: ...\"</code> formatında yazdırın.",
      "hint": "<code>for ip in ip_listesi:</code> kullanın ve döngü içinde <code>print(f\"Taranan IP: {ip}\")</code> yazın."
    },
    "default_code": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\n# Döngüyü buraya yazın\n",
    "solution": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\nfor ip in ip_listesi:\n    print(f\"Taranan IP: {ip}\")"
  },
  {
    "id": "U2_T2_E5",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "range(başlangıç, bitiş, adım)",
    "difficulty": "Orta",
    "lesson_html": "<h1>range(başlangıç, bitiş, adım)</h1><p><code>range()</code> fonksiyonu üçüncü bir parametre alabilir: <code>adim</code> (step). Bu, sayacın kaçar kaçar artacağını belirtir.</p><pre><code># 0'dan 10'a kadar (10 dahil değil) 2'şer 2'şer sayar\n# Çıktı: 0, 2, 4, 6, 8\nfor sayi in range(0, 10, 2):\n    print(sayi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Çift Sayılı Portlar",
      "description": "<code>100</code> ile <code>111</code> arasındaki (111 dahil değil) *çift* port numaralarını taramak istiyorsunuz. <code>range()</code> fonksiyonunun üçüncü parametresini (adım) kullanarak 100'den başlayan (100, 102, 104, ..., 110) çift sayıları yazdırın.",
      "hint": "<code>range(100, 111, 2)</code> kullanmayı deneyin."
    },
    "default_code": "# Döngüyü buraya yazın\n",
    "solution": "for port in range(100, 111, 2):\n    print(port)"
  },
  {
    "id": "U2_T2_E6",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Döngü Değişkenini Kullanma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Döngü Değişkenini Kullanma</h1><p><code>for sayi in range(5):</code> ifadesindeki <code>sayi</code> değişkeni, döngü bloğu içinde normal bir değişken gibi kullanılabilir.</p><pre><code>for i in range(1, 4):\n    print(f\"{i}. deneme\")\n    sonuc = i * 10\n    print(f\"Sonuç: {sonuc}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kalan Hak",
      "description": "<code>kalan_hak</code> 5'tir. <code>range(1, 4)</code> kullanarak (1, 2, 3) 3 kez dönen bir döngü yazın. Her döngüde <code>f-string</code> ile <code>\"{deneme_no}. başarısız giriş\"</code> yazdırın. (<code>deneme_no</code> döngü değişkeniniz olsun).",
      "hint": "<code>for deneme_no in range(1, 4):</code> kullanın ve içinde <code>print(f\"{deneme_no}. başarısız giriş\")</code> yazın."
    },
    "default_code": "kalan_hak = 5\n\n# 1'den 3'e kadar sayan döngüyü yazın\n",
    "solution": "kalan_hak = 5\n\nfor deneme_no in range(1, 4):\n    print(f\"{deneme_no}. başarısız giriş\")"
  },
  {
    "id": "U2_T2_E7",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Döngü İçinde 'if'",
    "difficulty": "Orta",
    "lesson_html": "<h1>Döngü İçinde 'if'</h1><p>Döngülerin gücü, içlerinde <code>if</code> koşulları kullanarak belirli durumlarda farklı eylemler yapabilmektir.</p><pre><code># 1'den 10'a kadar olan sayılardan sadece çift olanları yazdır\nfor sayi in range(1, 11):\n    # Kalan 0 ise sayı çifttir\n    if sayi % 2 == 0:\n        print(f\"{sayi} bir çift sayıdır\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı Portu Bul",
      "description": "<code>taranan_portlar</code> listesi verilmiştir. Bir <code>for</code> döngüsü ile bu listedeki her bir <code>port</code>'u kontrol edin. Eğer <code>port</code>, <code>22</code>'ye eşitse (<code>==</code>), konsola <code>\"Yasaklı SSH portu (22) bulundu!\"</code> yazdırın.",
      "hint": "<code>for port in taranan_portlar:</code> ile döngü kurun. İçine <code>if port == 22:</code> bloğunu girintili olarak ekleyin."
    },
    "default_code": "taranan_portlar = [80, 21, 22, 443, 8080]\n\n# Döngü ve if bloğunu buraya yazın\n",
    "solution": "taranan_portlar = [80, 21, 22, 443, 8080]\n\nfor port in taranan_portlar:\n    if port == 22:\n        print(\"Yasaklı SSH portu (22) bulundu!\")"
  },
  {
    "id": "U2_T2_E8",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Döngü ile Toplama (Accumulator)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Döngü ile Toplama (Accumulator Pattern)</h1><p>Döngüleri, bir dizi sayıyı toplamak veya saymak için kullanmak çok yaygındır. Buna 'accumulator pattern' (biriktirme deseni) denir. Döngüden *önce* bir değişkeni 0 olarak başlatırsınız ve döngü *içinde* bu değişkene değer eklersiniz (<code>+=</code>).</p><pre><code>toplam = 0\nfor sayi in range(1, 6): # 1, 2, 3, 4, 5\n    toplam += sayi # toplam = toplam + sayi\n\n# Döngü bittikten sonra toplam yazdırılır\nprint(toplam) # Çıktı: 15</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Başarısız Girişleri Say",
      "description": "<code>basarisiz_giris_sayisi</code> 0 olarak başlatıldı. <code>range(3)</code> kullanarak 3 kez dönen bir döngü oluşturun. Döngünün *içinde*, <code>basarisiz_giris_sayisi</code> değişkenini <code>+= 1</code> kullanarak bir artırın. Döngü bittikten *sonra*, <code>basarisiz_giris_sayisi</code>'nin son değerini yazdırın.",
      "hint": "<code>toplam = 0</code> gibi <code>basarisiz_giris_sayisi = 0</code>'ı döngüden önce tanımlayın. Döngü içinde <code>basarisiz_giris_sayisi += 1</code> yapın. <code>print()</code> komutunu döngünün *dışına* (girintisiz) yazın."
    },
    "default_code": "basarisiz_giris_sayisi = 0\n\n# 3 kez dönen döngüyü buraya yazın\n# Döngü içinde sayacı artırın\n\n\n# Döngü bittikten sonra sayacı yazdırın\n",
    "solution": "basarisiz_giris_sayisi = 0\n\nfor i in range(3):\n    basarisiz_giris_sayisi += 1\n\nprint(basarisiz_giris_sayisi)"
  },
  {
    "id": "U2_T2_E9",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "Döngü İçinde String Metodu",
    "difficulty": "Orta",
    "lesson_html": "<h1>Döngü ve String Metodları</h1><p>Bir listedeki string'ler üzerinde gezerken, her eleman için string metodlarını (<code>.upper()</code>, <code>.startswith()</code> vb.) kullanabilirsiniz.</p><pre><code>kullanicilar = [\"admin\", \"Guest\", \"root\"]\nfor k in kullanicilar:\n    print(k.upper()) # Her ismi büyük harfle yazdırır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tehlikeli Dosyaları Bul",
      "description": "<code>dosya_listesi</code> verilmiştir. Bir <code>for</code> döngüsü ile listedeki her <code>dosya</code>'yı kontrol edin. <code>if</code> kullanarak, <code>dosya</code>'nın <code>.endswith(\".exe\")</code> metodunu kontrol edin. Eğer <code>.exe</code> ile bitiyorsa, <code>f-string</code> ile <code>f\"Tehlikeli dosya bulundu: {dosya}\"</code> yazdırın.",
      "hint": "<code>for dosya in dosya_listesi:</code> döngüsü içinde <code>if dosya.endswith(\".exe\"):</code> koşulunu kullanın."
    },
    "default_code": "dosya_listesi = [\"rapor.pdf\", \"virus.exe\", \"sunum.pptx\", \"loader.exe\"]\n\n# Döngü ve if bloğunu buraya yazın\n",
    "solution": "dosya_listesi = [\"rapor.pdf\", \"virus.exe\", \"sunum.pptx\", \"loader.exe\"]\n\nfor dosya in dosya_listesi:\n    if dosya.endswith(\".exe\"):\n        print(f\"Tehlikeli dosya bulundu: {dosya}\")"
  },
  {
    "id": "U2_T2_E10",
    "unit_id": 2,
    "topic_id": 2,
    "unit_name": "Kontrol Akışı",
    "topic_name": "for Döngüleri",
    "title": "İç İçe 'for' Döngüsü (Temel)",
    "difficulty": "Zor",
    "lesson_html": "<h1>İç İçe 'for' Döngüsü (Nested Loops)</h1><p>Bir <code>for</code> döngüsünün içine başka bir <code>for</code> döngüsü koyabilirsiniz. Bu, bir listedeki her elemanı, başka bir listedeki her elemanla karşılaştırmak gibi durumlarda kullanılır.</p><p>Dış döngünün her adımı için, iç döngü *tamamen* baştan sona çalışır.</p><pre><code># Çıktı: 1A, 1B, 2A, 2B, 3A, 3B\nfor sayi in [1, 2, 3]:\n    for harf in [\"A\", \"B\"]:\n        print(f\"{sayi}{harf}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP ve Port Kombinasyonları",
      "description": "Bir <code>ip_listesi</code> ve <code>port_listesi</code> verilmiştir. İç içe iki <code>for</code> döngüsü kullanarak, *her bir IP* için *her bir portu* deneyen bir tarama simülasyonu yapın. <code>f-string</code> ile <code>f\"{ip} adresindeki {port} portu taranıyor...\"</code> formatında yazdırın.",
      "hint": "Dış döngü <code>for ip in ip_listesi:</code> olmalı. İç (girintili) döngü <code>for port in port_listesi:</code> olmalı. <code>print()</code> komutu en içteki girintide olmalı."
    },
    "default_code": "ip_listesi = [\"10.0.0.1\", \"10.0.0.2\"]\nport_listesi = [80, 443]\n\n# İç içe döngüleri buraya yazın\n",
    "solution": "ip_listesi = [\"10.0.0.1\", \"10.0.0.2\"]\nport_listesi = [80, 443]\n\nfor ip in ip_listesi:\n    for port in port_listesi:\n        print(f\"{ip} adresindeki {port} portu taranıyor...\")"
  },
  {
    "id": "U2_T3_E1",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Basit 'while' Döngüsü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'while' Döngüsü</h1><p><code>while</code> (olduğu sürece) döngüsü, belirli bir koşul <code>True</code> olduğu sürece içindeki kod bloğunu tekrar tekrar çalıştırır.</p><p><code>for</code> döngüsünden farklı olarak, <code>while</code> döngüsü genellikle bir bitiş sayısı bilmediğimizde, ancak bir *durum* (örn: 'bağlantı kurulana kadar') devam ettiğinde kullanılır.</p><pre><code>sayac = 0\nwhile sayac < 3:\n    print(f\"Sayı: {sayac}\")\n    sayac = sayac + 1 # Bu satır çok önemli!</code></pre><p><strong>DİKKAT:</strong> Koşulu <code>False</code> yapacak bir değişiklik (örn: <code>sayac = sayac + 1</code>) yapmazsanız, döngü sonsuza kadar çalışır (Sonsuz Döngü).</p>",
    "challenge": {
      "title": "Meydan Okuma: 3 Kez Dene",
      "description": "<code>deneme_sayisi</code> 0 olarak verilmiştir. <code>deneme_sayisi < 3</code> koşulu doğru olduğu sürece (<code>while</code>) çalışan bir döngü yazın. Döngünün içinde <code>\"Deneme...\"</code> yazdırın ve <code>deneme_sayisi</code> değişkenini <code>+= 1</code> ile bir artırın (sonsuz döngüye girmemek için).",
      "hint": "<code>while deneme_sayisi < 3:</code> ile başlayın, girintili blokta <code>print(...)</code> ve <code>deneme_sayisi += 1</code> olmalı."
    },
    "default_code": "deneme_sayisi = 0\n\n# 'while' döngüsünü buraya yazın\n",
    "solution": "deneme_sayisi = 0\n\nwhile deneme_sayisi < 3:\n    print(\"Deneme...\")\n    deneme_sayisi += 1"
  },
  {
    "id": "U2_T3_E2",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Geri Sayım",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'while' ile Geri Sayım</h1><p><code>while</code> döngüsünü bir sayacı azaltmak için de kullanabilirsiniz.</p><pre><code>kalan_hak = 3\nwhile kalan_hak > 0:\n    print(f\"Kalan hak: {kalan_hak}\")\n    kalan_hak -= 1 # kalan_hak = kalan_hak - 1\n\nprint(\"Hak bitti\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kalan Süre",
      "description": "<code>kalan_sure</code> 5 olarak ayarlanmıştır. <code>kalan_sure > 0</code> olduğu sürece çalışan bir <code>while</code> döngüsü yazın. Döngü içinde <code>f-string</code> ile <code>f\"{kalan_sure} saniye kaldı...\"</code> yazdırın ve <code>kalan_sure</code>'yi 1 azaltın (<code>-= 1</code>).",
      "hint": "Koşulunuz <code>while kalan_sure > 0:</code> olmalı. Döngü içinde <code>kalan_sure -= 1</code> yazmayı unutmayın."
    },
    "default_code": "kalan_sure = 5\n\n# 'while' döngüsünü buraya yazın\n\n\nprint(\"Süre doldu!\")",
    "solution": "kalan_sure = 5\n\nwhile kalan_sure > 0:\n    print(f\"{kalan_sure} saniye kaldı...\")\n    kalan_sure -= 1\n\nprint(\"Süre doldu!\")"
  },
  {
    "id": "U2_T3_E3",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Boolean Değişken ile Döngü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boolean (Bayrak) ile 'while'</h1><p><code>while</code> döngüsünü kontrol etmenin yaygın bir yolu, 'bayrak' (flag) adı verilen bir boolean değişken kullanmaktır. Döngü, bu değişken <code>True</code> olduğu sürece çalışır.</p><pre><code>aktif = True\nsayac = 0\nwhile aktif:\n    print(\"Çalışıyor...\")\n    sayac += 1\n    if sayac == 3:\n        aktif = False # Döngüyü durdurmak için koşulu False yap</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Servisi Dinle",
      "description": "<code>servis_calisiyor</code> <code>True</code> olarak ayarlandı. <code>while servis_calisiyor:</code> koşuluyla bir döngü başlatın. Döngü içinde <code>\"Dinleniyor...\"</code> yazdırın ve hemen ardından <code>servis_calisiyor = False</code> ataması yaparak döngünün sadece bir kez çalışıp durmasını sağlayın (bu, gerçek senaryolarda bir <code>if</code> bloğu içinde olurdu).",
      "hint": "Döngü içinde <code>print(...)</code> yazdıktan sonra, bir alt satıra (aynı girintide) <code>servis_calisiyor = False</code> yazın."
    },
    "default_code": "servis_calisiyor = True\n\n# 'while' döngüsünü buraya yazın\n",
    "solution": "servis_calisiyor = True\n\nwhile servis_calisiyor:\n    print(\"Dinleniyor...\")\n    servis_calisiyor = False"
  },
  {
    "id": "U2_T3_E4",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Sonsuz Döngüyü Düzeltme",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sonsuz Döngüyü Düzeltme</h1><p>Eğer <code>while</code> döngüsünün koşulu hep <code>True</code> kalırsa, programınız 'sonsuz döngüye' girer ve kilitlenir.</p><pre><code># HATALI KOD (SONSUZ DÖNGÜ)\nsayac = 0\nwhile sayac < 5:\n    print(\"Hata\")\n    # sayac += 1 satırı unutulmuş!</code></pre><p>Döngü koşulunu etkileyen değişkeni güncellemeyi asla unutmayın.</p>",
    "challenge": {
      "title": "Meydan Okuma: Sonsuz Döngü",
      "description": "Aşağıdaki kod, <code>sayac</code> değişkeni hiç artırılmadığı için sonsuz döngüye girecek şekilde hatalı yazılmıştır. Döngü bloğunun içine <code>sayac += 1</code> satırını ekleyerek kodu düzeltin.",
      "hint": "<code>print(\"İşlem...\")</code> satırının altına, aynı girintide <code>sayac += 1</code> ekleyin."
    },
    "default_code": "sayac = 0\nwhile sayac < 3:\n    print(\"İşlem...\")\n    # Hata düzeltmesini buraya ekleyin\n",
    "solution": "sayac = 0\nwhile sayac < 3:\n    print(\"İşlem...\")\n    sayac += 1"
  },
  {
    "id": "U2_T3_E5",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "'break' ile Döngüden Çıkma",
    "difficulty": "Orta",
    "lesson_html": "<h1>'break' Anahtar Kelimesi</h1><p>Bazen bir döngüyü, ana koşul <code>False</code> olmasa bile, belirli bir durumda (örn: aranan değer bulununca) hemen sonlandırmak istersiniz. <code>break</code> anahtar kelimesi, içinde bulunduğu en yakın <code>for</code> veya <code>while</code> döngüsünü anında kırar (durdurur).</p><pre><code>sayac = 0\nwhile sayac < 100:\n    print(sayac)\n    if sayac == 5:\n        break # sayac 5 olunca döngü durur\n    sayac += 1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hedefi Bul",
      "description": "<code>mevcut_ip_sonu</code> 1'den 10'a kadar (10 dahil) tarayacak bir <code>while</code> döngüsü yazın. Döngü içinde, eğer <code>mevcut_ip_sonu</code> <code>7</code>'ye eşit olursa (<code>==</code>), <code>\"Hedef 192.168.1.7 bulundu!\"</code> yazdırın ve <code>break</code> ile döngüden çıkın. Eğer 7 değilse, <code>f-string</code> ile <code>f\"192.168.1.{mevcut_ip_sonu} taranıyor...\"</code> yazdırın. <code>mevcut_ip_sonu += 1</code> satırını unutmayın!",
      "hint": "<code>while mevcut_ip_sonu <= 10:</code> ... <code>if mevcut_ip_sonu == 7: ... break ... else: ...</code> ... <code>mevcut_ip_sonu += 1</code>"
    },
    "default_code": "mevcut_ip_sonu = 1\n\n# 'while' döngüsünü ve 'if' bloğunu buraya yazın\n",
    "solution": "mevcut_ip_sonu = 1\n\nwhile mevcut_ip_sonu <= 10:\n    if mevcut_ip_sonu == 7:\n        print(\"Hedef 192.168.1.7 bulundu!\")\n        break\n    else:\n        print(f\"192.168.1.{mevcut_ip_sonu} taranıyor...\")\n    mevcut_ip_sonu += 1"
  },
  {
    "id": "U2_T3_E6",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "'while True' Kalıbı",
    "difficulty": "Orta",
    "lesson_html": "<h1>'while True' ve 'break' Kalıbı</h1><p>Sürekli çalışması gereken (örn: bir komut bekleyen sunucu, bir 'listener') programlarda <code>while True:</code> kalıbı çok sık kullanılır. Bu, kasıtlı bir sonsuz döngüdür.</p><p>Döngüden çıkış, yalnızca döngü içindeki bir <code>if</code> koşuluna bağlı <code>break</code> komutu ile sağlanır.</p><pre><code>while True:\n    # Gerçekte burada input() ile kullanıcı girdisi alınır\n    komut = \"exit\"\n    print(f\"Komut alındı: {komut}\")\n    if komut == \"exit\":\n        print(\"Çıkış yapılıyor...\")\n        break</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Çıkış Komutu",
      "description": "<code>sayac</code> 0 olarak verilmiştir. <code>while True:</code> kullanarak kasıtlı bir sonsuz döngü başlatın. Döngü içinde <code>sayac</code>'ı 1 artırın. Eğer <code>sayac</code> <code>3</code>'e eşit olursa (<code>==</code>) <code>break</code> ile döngüyü kırın. Döngü bittikten *sonra* <code>\"Döngü durdu\"</code> yazdırın.",
      "hint": "<code>while True:</code> ... <code>sayac += 1</code> ... <code>if sayac == 3: break</code>. <code>print(\"Döngü durdu\")</code> satırı döngünün dışında (girintisiz) olmalı."
    },
    "default_code": "sayac = 0\n\n# 'while True' döngüsünü ve 'break' koşulunu buraya yazın\n\n\nprint(\"Döngü durdu\")",
    "solution": "sayac = 0\n\nwhile True:\n    sayac += 1\n    if sayac == 3:\n        break\n\nprint(\"Döngü durdu\")"
  },
  {
    "id": "U2_T3_E7",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Parola Deneme Hakkı",
    "difficulty": "Orta",
    "lesson_html": "<h1>'while' ve 'and'</h1><p><code>while</code> döngüsü, <code>and</code> operatörü ile birden fazla koşulu kontrol edebilir. Örneğin, 'deneme hakkı 3'ten az olduğu SÜRECE <strong>VE</strong> parola yanlış olduğu SÜRECE' döngüye devam et.</p><pre><code>deneme = 0\nparola_yanlis = True\nwhile deneme < 3 and parola_yanlis:\n    print(\"Parola denemesi...\")\n    deneme += 1\n    if deneme == 2: # 2. denemede doğru bildiğimizi varsayalım\n        parola_yanlis = False\n\nprint(\"Döngü bitti\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bağlantı Denemesi",
      "description": "<code>deneme_hakki</code> 5, <code>baglanti_kurulamadi</code> <code>True</code>'dur. <code>deneme_hakki > 0</code> olduğu SÜRECE <strong>VE</strong> <code>baglanti_kurulamadi</code> <code>True</code> olduğu SÜRECE çalışan bir <code>while</code> döngüsü yazın. İçeride <code>\"Bağlantı denendi...\"</code> yazdırın ve <code>deneme_hakki</code>'nı 1 azaltın. (Bu döngü 5 kez çalışıp duracaktır).",
      "hint": "<code>while deneme_hakki > 0 and baglanti_kurulamadi:</code>"
    },
    "default_code": "deneme_hakki = 5\nbaglanti_kurulamadi = True\n\n# 'while' döngüsünü 'and' ile buraya yazın\n",
    "solution": "deneme_hakki = 5\nbaglanti_kurulamadi = True\n\nwhile deneme_hakki > 0 and baglanti_kurulamadi:\n    print(\"Bağlantı denendi...\")\n    deneme_hakki -= 1"
  },
  {
    "id": "U2_T3_E8",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Döngü İçinde 'if/else'",
    "difficulty": "Orta",
    "lesson_html": "<h1>'while' içinde 'if/else'</h1><p><code>while</code> döngüleri, <code>if/else</code> bloklarını içerebilir. Bu, döngünün her adımında farklı kararlar almanızı sağlar.</p><pre><code>sayi = 0\nwhile sayi < 5:\n    if sayi % 2 == 0:\n        print(f\"{sayi} çift\")\n    else:\n        print(f\"{sayi} tek\")\n    sayi += 1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Tarayıcı",
      "description": "<code>port = 78</code> olarak verilmiştir. <code>port <= 80</code> olduğu sürece dönen bir <code>while</code> döngüsü yazın. Döngü içinde: <code>port</code> <code>80</code>'e eşitse (<code>==</code>) <code>\"Port 80 (HTTP) bulundu\"</code> yazdırın, değilse (<code>else</code>) <code>f\"{port} kapalı görünüyor\"</code> yazdırın. <code>port += 1</code> satırını eklemeyi unutmayın!",
      "hint": "<code>while port <= 80:</code> ... <code>if port == 80: ... else: ...</code> ... <code>port += 1</code>"
    },
    "default_code": "port = 78\n\n# 'while' döngüsünü 'if/else' ile buraya yazın\n",
    "solution": "port = 78\n\nwhile port <= 80:\n    if port == 80:\n        print(\"Port 80 (HTTP) bulundu\")\n    else:\n        print(f\"{port} kapalı görünüyor\")\n    port += 1"
  },
  {
    "id": "U2_T3_E9",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Simüle Edilen Girdi Döngüsü",
    "difficulty": "Zor",
    "lesson_html": "<h1>Girdi Döngüsü</h1><p><code>while</code> döngüleri, kullanıcıdan belirli bir girdi alınana kadar (örn: doğru parola) tekrar tekrar soru sormak için kullanılır. (Pyodide ortamı <code>input()</code>'u desteklemediği için bunu simüle edeceğiz.)</p><pre><code># Simüle edilmiş girdiler\ngirdiler = [\"yanlis1\", \"yanlis2\", \"dogru_parola\"]\nsayac = 0\nparola = \"\"\n\nwhile parola != \"dogru_parola\":\n    parola = girdiler[sayac]\n    print(f\"'{parola}' denendi...\")\n    sayac += 1\n\nprint(\"Giriş başarılı!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Doğru Komut",
      "description": "<code>komut</code> boş bir string (<code>\"\"</code>) ve <code>deneme_sayisi</code> 0'dır. <code>komut != \"exit\"</code> olduğu sürece dönen bir <code>while</code> döngüsü yazın. Döngü içinde, <code>deneme_sayisi</code>'ni 1 artırın. Eğer <code>deneme_sayisi</code> <code>2</code>'ye eşit olursa, <code>komut = \"exit\"</code> ataması yapın (döngüyü kırmak için). Döngü bittikten sonra <code>\"Çıkış yapıldı\"</code> yazdırın.",
      "hint": "<code>while komut != \"exit\":</code> ... <code>deneme_sayisi += 1</code> ... <code>if deneme_sayisi == 2: komut = \"exit\"</code>"
    },
    "default_code": "komut = \"\"\ndeneme_sayisi = 0\n\n# 'while' döngüsünü buraya yazın\n\n\nprint(\"Çıkış yapıldı\")",
    "solution": "komut = \"\"\ndeneme_sayisi = 0\n\nwhile komut != \"exit\":\n    deneme_sayisi += 1\n    if deneme_sayisi == 2:\n        komut = \"exit\"\n\nprint(\"Çıkış yapıldı\")"
  },
  {
    "id": "U2_T3_E10",
    "unit_id": 2,
    "topic_id": 3,
    "unit_name": "Kontrol Akışı",
    "topic_name": "while Döngüleri",
    "title": "Döngü 'else' Bloğu",
    "difficulty": "Zor",
    "lesson_html": "<h1>'while/else' Bloğu</h1><p><code>for</code> döngüleri gibi, <code>while</code> döngüleri de bir <code>else</code> bloğuna sahip olabilir. Bu <code>else</code> bloğu, döngü koşulu <code>False</code> olduğu için (yani döngü *normal* bir şekilde tamamlandığında) çalışır.</p><p>Eğer döngü bir <code>break</code> komutu ile kırılırsa, <code>else</code> bloğu <strong>çalışmaz</strong>.</p><pre><code>sayac = 0\nwhile sayac < 3:\n    sayac += 1\nelse:\n    print(\"Döngü 'break' olmadan bitti\")\n\n# 'break' olursa 'else' çalışmaz:\nsayac = 0\nwhile sayac < 5:\n    if sayac == 3:\n        break\n    sayac += 1\nelse:\n    print(\"Bu mesaj görünmez\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hakların Bitmesi",
      "description": "<code>kalan_hak = 3</code> olarak verilmiştir. <code>kalan_hak > 0</code> olduğu sürece dönen bir <code>while</code> döngüsü yazın, <code>kalan_hak</code>'ı 1 azaltın. Döngü bittiğinde (yani <code>break</code> olmadan, haklar normalce tükendiğinde) çalışacak bir <code>else</code> bloğu ekleyin ve içine <code>\"Giriş hakları tükendi\"</code> yazdırın.",
      "hint": "<code>while ...: ...</code> bloğundan sonra, <code>while</code> ile aynı hizada <code>else:</code> bloğunu ekleyin."
    },
    "default_code": "kalan_hak = 3\n\nwhile kalan_hak > 0:\n    print(\"Deneme kullanıldı...\")\n    kalan_hak -= 1\n\n# 'else' bloğunu buraya ekleyin\n",
    "solution": "kalan_hak = 3\n\nwhile kalan_hak > 0:\n    print(\"Deneme kullanıldı...\")\n    kalan_hak -= 1\nelse:\n    print(\"Giriş hakları tükendi\")"
  },
  {
    "id": "U2_T4_E1",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Döngü Kontrolü",
    "title": "Gözden Geçirme: 'break'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Döngü Kontrolü: 'break'</h1><p><code>break</code> anahtar kelimesi, hem <code>for</code> hem de <code>while</code> döngülerinde kullanılabilir. Çalıştırıldığı anda, içinde bulunduğu en yakın döngüyü hemen sonlandırır ve program döngüden sonraki ilk satırdan devam eder.</p><pre><code># 22 portunu bulunca taramayı durdur\nportlar = [21, 80, 22, 443]\nfor port in portlar:\n    print(f\"{port} taranıyor...\")\n    if port == 22:\n        print(\"SSH (22) bulundu. Tarama durdu.\")\n        break</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İlk Yasaklı Kullanıcı",
      "description": "<code>kullanici_listesi</code> verilmiştir. Bu listede 'root' kullanıcısını arayan bir <code>for</code> döngüsü yazın. Eğer <code>kullanici == \"root\"</code> ise, <code>\"Yasaklı 'root' kullanıcısı bulundu!\"</code> yazdırın ve <code>break</code> ile döngüyü hemen sonlandırın. (Böylece 'admin' kontrol edilmeyecek).",
      "hint": "<code>for kullanici in kullanici_listesi:</code> ... <code>if kullanici == \"root\": ... break</code>"
    },
    "default_code": "kullanici_listesi = [\"guest\", \"user1\", \"root\", \"admin\"]\n\n# Döngü ve 'break' koşulunu buraya yazın\n",
    "solution": "kullanici_listesi = [\"guest\", \"user1\", \"root\", \"admin\"]\n\nfor kullanici in kullanici_listesi:\n    print(f\"Kontrol ediliyor: {kullanici}\")\n    if kullanici == \"root\":\n        print(\"Yasaklı 'root' kullanıcısı bulundu!\")\n        break"
  },
  {
    "id": "U2_T4_E2",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Döngü Kontrolü",
    "title": "Adımı Atla: 'continue'",
    "difficulty": "Orta",
    "lesson_html": "<h1>Döngü Kontrolü: 'continue'</h1><p><code>continue</code> (devam et) anahtar kelimesi, döngünün o anki adımını (iterasyonunu) atlar. <code>continue</code>'dan sonra gelen kodlar o adım için çalışmaz ve döngü bir sonraki eleman/değer ile devam eder.</p><pre><code># 1'den 10'a kadar sadece tek sayıları yazdır\nfor sayi in range(1, 11):\n    if sayi % 2 == 0: # Eğer sayı çiftse\n        continue      # Bu adımı atla, print'e gitme\n    print(sayi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Portları Atla",
      "description": "<code>taranacak_portlar</code> listesi verilmiştir. Bir <code>for</code> döngüsü yazın. Eğer <code>port</code> <code>80</code> VEYA <code>443</code>'e eşitse (<code>if port == 80 or port == 443:</code>), <code>continue</code> kullanarak bu 'güvenli' portları atlayın ve yazdırmayın. Diğer tüm portlar için <code>f\"Şüpheli port: {port}\"</code> yazdırın.",
      "hint": "<code>if</code> bloğunun içine <code>continue</code> yazın. <code>print()</code> komutu <code>if</code> bloğunun *dışında* (ama döngünün içinde) olmalı."
    },
    "default_code": "taranacak_portlar = [21, 80, 22, 443, 8080]\n\n# Döngü ve 'continue' koşulunu buraya yazın\n",
    "solution": "taranacak_portlar = [21, 80, 22, 443, 8080]\n\nfor port in taranacak_portlar:\n    if port == 80 or port == 443:\n        continue\n    print(f\"Şüpheli port: {port}\")"
  },
  {
    "id": "U2_T4_E3",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Döngü Kontrolü",
    "title": "'continue' ile Log Filtreleme",
    "difficulty": "Orta",
    "lesson_html": "<h1>'continue' ile Filtreleme</h1><p><code>continue</code>, log dosyaları gibi büyük veri setlerini işlerken 'ilgisiz' satırları filtrelemek için çok kullanışlıdır.</p><pre><code>loglar = [\"INFO: Başladı\", \"HATA: Düştü\", \"INFO: Devam ediyor\"]\nfor log in loglar:\n    if log.startswith(\"INFO\"):\n        continue # INFO loglarını istemiyoruz\n    print(f\"Önemli Log: {log}\") # Sadece HATA olan yazılır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yorum Satırlarını Atla",
      "description": "Bir konfigürasyon dosyasını okuduğumuzu varsayalım (<code>config_satirlari</code>). <code>for</code> döngüsü kullanarak <code>\"#\"</code> (yorum) ile başlayan satırları <code>continue</code> ile atlayın. Diğer tüm satırları <code>.strip()</code> metodu ile temizleyerek yazdırın.",
      "hint": "<code>if satir.strip().startswith(\"#\"): continue</code> ... <code>print(satir.strip())</code>"
    },
    "default_code": "config_satirlari = [\" HOST=127.0.0.1\", \" # PORT=8080\", \" USER=admin\"]\n\n# Döngü ve 'continue' koşulunu buraya yazın\n",
    "solution": "config_satirlari = [\" HOST=127.0.0.1\", \" # PORT=8080\", \" USER=admin\"]\n\nfor satir in config_satirlari:\n    temiz_satir = satir.strip()\n    if temiz_satir.startswith(\"#\"):\n        continue\n    print(temiz_satir)"
  },
  {
    "id": "U2_T4_E4",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Döngü Kontrolü",
    "title": "Yer Tutucu: 'pass'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Döngü Kontrolü: 'pass'</h1><p><code>pass</code> (geç) anahtar kelimesi hiçbir şey yapmaz. Kelimenin tam anlamıyla bir 'yer tutucu'dur.</p><p>Python'da <code>if</code>, <code>for</code>, <code>while</code> blokları veya fonksiyon tanımları (<code>def</code>) boş olamaz; sözdizimi hatası verir. Henüz ne yapacağınıza karar vermediğiniz ancak kodunuzun çalışmasını istediğiniz yerlerde <code>pass</code> kullanırsınız.</p><pre><code>for port in [22, 80, 443]:\n    if port == 22:\n        # TODO: SSH için özel bir işlem yapılacak\n        pass # Şimdilik hiçbir şey yapma\n    else:\n        print(f\"{port} taranıyor\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'pass' Kullanımı",
      "description": "Aşağıdaki <code>if port == 80:</code> bloğu boş olduğu için kod sözdizimi hatası veriyor. Bu bloğun içine <code>pass</code> anahtar kelimesini ekleyerek hatayı düzeltin ve kodun çalışmasını sağlayın.",
      "hint": "<code>if port == 80:</code> satırının altına girintili olarak <code>pass</code> yazın."
    },
    "default_code": "port = 80\n\nif port == 80:\n    # Bu blok boş olamaz, buraya 'pass' ekleyin\n\nelse:\n    print(\"Diğer port\")",
    "solution": "port = 80\n\nif port == 80:\n    pass\nelse:\n    print(\"Diğer port\")"
  },
  {
    "id": "U2_T4_E5",
    "unit_id": 2,
    "topic_id": 4,
    "unit_name": "Kontrol Akışı",
    "topic_name": "Döngü Kontrolü",
    "title": "Döngü 'else' ve 'break'",
    "difficulty": "Zor",
    "lesson_html": "<h1>Döngü 'else' ve 'break' İlişkisi</h1><p><code>for</code> döngülerinde de (tıpkı <code>while</code> gibi) <code>else</code> bloğu olabilir. Bu <code>else</code> bloğu, döngü <code>break</code> komutu ile kırıl*ma*zsa (yani liste sonuna kadar normal bir şekilde biterse) çalışır.</p><p>Bu, 'listedeki her şeyi kontrol ettim ve aradığımı bulamadım' demek için harika bir yoldur.</p><pre><code>aranan = \"virus.exe\"\ndosyalar = [\"a.txt\", \"b.pdf\"]\n\nfor dosya in dosyalar:\n    if dosya == aranan:\n        print(\"Virüs bulundu!\")\n        break\nelse:\n    # 'break' hiç çalışmadıysa bu blok çalışır\n    print(\"Sistem temiz, virüs bulunamadı\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Admin Bulunamadı",
      "description": "<code>kullanici_listesi</code> verilmiştir. <code>for</code> döngüsü ile 'admin' kullanıcısını arayın. Eğer bulursanız <code>\"Admin bulundu\"</code> yazdırıp <code>break</code> ile çıkın. Eğer döngü <code>break</code> olmadan biterse (yani 'admin' listede yoksa), <code>else:</code> bloğunu kullanarak <code>\"Admin kullanıcısı bulunamadı\"</code> yazdırın.",
      "hint": "<code>for ...: if ...: break</code> bloğundan sonra, <code>for</code> ile aynı hizada <code>else:</code> bloğunu ekleyin."
    },
    "default_code": "kullanici_listesi = [\"guest\", \"user1\", \"operator\"]\n\n# for/break/else kalıbını buraya yazın\n",
    "solution": "kullanici_listesi = [\"guest\", \"user1\", \"operator\"]\n\nfor kullanici in kullanici_listesi:\n    if kullanici == \"admin\":\n        print(\"Admin bulundu\")\n        break\nelse:\n    print(\"Admin kullanıcısı bulunamadı\")"
  },
  {
    "id": "U3_T1_E1",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Liste Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Listeler (Lists)</h1><p>Listeler, birden fazla veriyi tek bir değişken altında toplamanızı sağlayan veri yapılarıdır. Köşeli parantez <code>[]</code> ile oluşturulurlar ve içindeki elemanlar virgülle <code>,</code> ayrılır.</p><p>Listeler farklı veri tiplerini (string, int, bool) aynı anda içerebilirler ve <strong>değiştirilebilirler</strong> (mutable).</p><pre><code># Tamsayı listesi\nacik_portlar = [80, 443, 22]\n\n# String listesi\nkullanicilar = [\"admin\", \"guest\", \"root\"]\n\n# Karışık liste\nkarisik = [\"Merhaba\", 100, True]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesi",
      "description": "<code>ip_listesi</code> adında bir liste oluşturun. Bu liste <code>\"192.168.1.1\"</code>, <code>\"10.0.0.1\"</code> ve <code>\"8.8.8.8\"</code> string değerlerini içermelidir. Listeyi oluşturduktan sonra <code>print()</code> ile konsola yazdırın.",
      "hint": "<code>ip_listesi = [\"...\", \"...\", \"...\"]</code> sözdizimini kullanın."
    },
    "default_code": "# IP listesini burada oluşturun ve yazdırın\n",
    "solution": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\nprint(ip_listesi)"
  },
  {
    "id": "U3_T1_E2",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Boş Liste Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boş Liste</h1><p>Bazen, içine daha sonra (örn: bir döngü ile) veri ekleyeceğiniz boş bir liste ile başlamak istersiniz. Boş bir liste <code>[]</code> şeklinde oluşturulur.</p><pre><code>bulunan_portlar = []\n# ... daha sonra kod ...\n# bulunan_portlar.append(80)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bulunan Zafiyetler",
      "description": "<code>bulunan_zafiyetler</code> adında boş bir liste oluşturun ve bu boş listeyi konsola yazdırın.",
      "hint": "<code>degisken_adi = []</code>"
    },
    "default_code": "# Boş listeyi burada oluşturun ve yazdırın\n",
    "solution": "bulunan_zafiyetler = []\nprint(bulunan_zafiyetler)"
  },
  {
    "id": "U3_T1_E3",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Elemana Erişim (Indexing)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Elemana Erişim (Indexing)</h1><p>Bir listedeki belirli bir elemana erişmek için onun 'indeksini' (sıra numarasını) kullanırız. İndeksler <strong>0'dan başlar</strong>.</p><pre><code>portlar = [80, 443, 22]\n# İlk eleman (indeks 0)\nprint(portlar[0]) # Çıktı: 80\n\n# İkinci eleman (indeks 1)\nprint(portlar[1]) # Çıktı: 443</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İlk IP Adresi",
      "description": "<code>ip_listesi</code> verilmiştir. Bu listenin <strong>ikinci</strong> elemanına (<code>\"10.0.0.1\"</code>) indeks kullanarak erişin ve konsola yazdırın.",
      "hint": "İkinci elemanın indeksi 0 değil, 1'dir. <code>ip_listesi[1]</code> kullanın."
    },
    "default_code": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\n# Listenin ikinci elemanını yazdırın\n",
    "solution": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\nprint(ip_listesi[1])"
  },
  {
    "id": "U3_T1_E4",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Negatif Indexing",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Negatif Indexing</h1><p>Python, listenin sonundan elemanlara erişmek için negatif indekslemeyi destekler. <code>-1</code> listenin <strong>son</strong> elemanıdır, <code>-2</code> sondan ikinci elemandır.</p><pre><code>portlar = [80, 443, 22]\n# Son eleman\nprint(portlar[-1]) # Çıktı: 22\n\n# Sondan ikinci eleman\nprint(portlar[-2]) # Çıktı: 443</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Son Kullanıcı",
      "description": "<code>kullanicilar</code> listesi verilmiştir. Negatif indeks kullanarak listenin <strong>son</strong> elemanını (<code>\"admin\"</code>) konsola yazdırın.",
      "hint": "Son eleman için <code>[-1]</code> indeksini kullanın."
    },
    "default_code": "kullanicilar = [\"guest\", \"user\", \"admin\"]\n\n# Listenin son elemanını yazdırın\n",
    "solution": "kullanicilar = [\"guest\", \"user\", \"admin\"]\n\nprint(kullanicilar[-1])"
  },
  {
    "id": "U3_T1_E5",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Liste Uzunluğu (len())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Liste Uzunluğu (len())</h1><p><code>len()</code> fonksiyonu, (string'lerde olduğu gibi) bir listenin içinde kaç eleman olduğunu döndürür.</p><pre><code>portlar = [80, 443, 22, 21]\nprint(len(portlar)) # Çıktı: 4</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Açık Port Sayısı",
      "description": "<code>acik_portlar</code> listesinin içinde kaç adet port olduğunu <code>len()</code> fonksiyonu ile hesaplayın ve konsola yazdırın.",
      "hint": "<code>print(len(acik_portlar))</code>"
    },
    "default_code": "acik_portlar = [80, 443, 8080, 3306]\n\n# Listenin eleman sayısını yazdırın\n",
    "solution": "acik_portlar = [80, 443, 8080, 3306]\n\nprint(len(acik_portlar))"
  },
  {
    "id": "U3_T1_E6",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Eleman Değiştirme (Mutability)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Eleman Değiştirme</h1><p>Listeler 'değiştirilebilir' (mutable) yapıdadır. Bu, listedeki bir elemanın değerini indeksi kullanarak güncelleyebileceğiniz anlamına gelir.</p><pre><code>portlar = [80, 443, 22]\nprint(portlar)\n\n# İndeks 1'deki (443) elemanı değiştir\nportlar[1] = 8443\nprint(portlar) # Çıktı: [80, 8443, 22]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Adresini Güncelle",
      "description": "<code>ip_listesi</code> verilmiştir. İkinci elemanı (<code>\"10.0.0.1\"</code>) indeks kullanarak <code>\"10.0.0.254\"</code> olarak güncelleyin. Ardından listenin tamamını yazdırın.",
      "hint": "<code>ip_listesi[1] = \"10.0.0.254\"</code>"
    },
    "default_code": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\n# İkinci elemanı burada güncelleyin\n\n\n# Listenin son halini yazdırın\n",
    "solution": "ip_listesi = [\"192.168.1.1\", \"10.0.0.1\", \"8.8.8.8\"]\n\nip_listesi[1] = \"10.0.0.254\"\n\nprint(ip_listesi)"
  },
  {
    "id": "U3_T1_E7",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Sona Ekleme (.append())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Liste Metodu: .append()</h1><p>Listenin *sonuna* yeni bir eleman eklemek için <code>.append()</code> metodu kullanılır.</p><pre><code>kullanicilar = [\"admin\", \"guest\"]\nkullanicilar.append(\"root\")\nprint(kullanicilar) # Çıktı: ['admin', 'guest', 'root']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı Site Ekle",
      "description": "<code>yasakli_siteler</code> listesine <code>.append()</code> metodunu kullanarak <code>\"tehlikeli-site.com\"</code> adresini ekleyin. Ardından listenin son halini yazdırın.",
      "hint": "<code>yasakli_siteler.append(\"tehlikeli-site.com\")</code>"
    },
    "default_code": "yasakli_siteler = [\"virus.com\", \"spam.com\"]\n\n# Listeye yeni siteyi burada ekleyin\n\n\n# Listenin son halini yazdırın\n",
    "solution": "yasakli_siteler = [\"virus.com\", \"spam.com\"]\n\nyasakli_siteler.append(\"tehlikeli-site.com\")\n\nprint(yasakli_siteler)"
  },
  {
    "id": "U3_T1_E8",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Sondan Çıkarma (.pop())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Metodu: .pop()</h1><p><code>.pop()</code> metodu, listenin *sonundaki* elemanı listeden çıkarır ve o elemanı döndürür (isterseniz bir değişkene atayabilirsiniz). Parametre vermezseniz hep sondaki elemanı çıkarır.</p><pre><code>islem_kuyrugu = [\"islem1\", \"islem2\", \"islem3\"]\nson_islem = islem_kuyrugu.pop()\n\nprint(f\"Çıkarılan: {son_islem}\") # Çıktı: Çıkarılan: islem3\nprint(f\"Kalan: {islem_kuyrugu}\") # Çıktı: Kalan: ['islem1', 'islem2']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Son Portu Çıkar",
      "description": "<code>taranacak_portlar</code> listesindeki son elemanı (<code>22</code>) <code>.pop()</code> metodunu kullanarak listeden çıkarın. Ardından listenin kalan halini yazdırın.",
      "hint": "<code>taranacak_portlar.pop()</code> satırını ekleyin."
    },
    "default_code": "taranacak_portlar = [80, 443, 22]\n\n# Son elemanı burada çıkarın\n\n\n# Listenin son halini yazdırın\n",
    "solution": "taranacak_portlar = [80, 443, 22]\n\ntaranacak_portlar.pop()\n\nprint(taranacak_portlar)"
  },
  {
    "id": "U3_T1_E9",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Değere Göre Çıkarma (.remove())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Metodu: .remove()</h1><p>Listeden belirli bir *değeri* (indeksi değil) çıkarmak için <code>.remove()</code> metodu kullanılır. Eğer o değerden listede birden fazla varsa, sadece ilk bulduğunu çıkarır.</p><pre><code>yasakli_ipler = [\"1.2.3.4\", \"5.6.7.8\", \"1.2.3.4\"]\nyasakli_ipler.remove(\"1.2.3.4\")\nprint(yasakli_ipler) # Çıktı: ['5.6.7.8', '1.2.3.4']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcıyı Sil",
      "description": "<code>aktif_kullanicilar</code> listesinden <code>\"guest\"</code> kullanıcısını <code>.remove()</code> metodunu kullanarak çıkarın. Ardından listenin son halini yazdırın.",
      "hint": "<code>aktif_kullanicilar.remove(\"guest\")</code>"
    },
    "default_code": "aktif_kullanicilar = [\"admin\", \"guest\", \"root\"]\n\n# 'guest' kullanıcısını burada silin\n\n\n# Listenin son halini yazdırın\n",
    "solution": "aktif_kullanicilar = [\"admin\", \"guest\", \"root\"]\n\naktif_kullanicilar.remove(\"guest\")\n\nprint(aktif_kullanicilar)"
  },
  {
    "id": "U3_T1_E10",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Listede Arama ('in' operatörü)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Listede Arama: 'in'</h1><p>String'lerde olduğu gibi, <code>in</code> operatörü bir elemanın listenin içinde olup olmadığını kontrol eder. <code>True</code> veya <code>False</code> döndürür.</p><pre><code>portlar = [80, 443, 22]\nprint(80 in portlar)    # Çıktı: True\nprint(21 in portlar)    # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı Kullanıcı Kontrolü",
      "description": "<code>giris_yapan_kullanici</code> \"root\" olarak verilmiştir. <code>in</code> operatörünü kullanarak bu kullanıcının <code>yasakli_kullanicilar</code> listesinde olup olmadığını kontrol edin ve sonucu (<code>True</code>/<code>False</code>) konsola yazdırın.",
      "hint": "<code>print(giris_yapan_kullanici in yasakli_kullanicilar)</code>"
    },
    "default_code": "yasakli_kullanicilar = [\"root\", \"guest\", \"test\"]\ngiris_yapan_kullanici = \"root\"\n\n# Kontrolü burada yapıp yazdırın\n",
    "solution": "yasakli_kullanicilar = [\"root\", \"guest\", \"test\"]\ngiris_yapan_kullanici = \"root\"\n\nprint(giris_yapan_kullanici in yasakli_kullanicilar)"
  },
  {
    "id": "U3_T1_E11",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Listede Arama ('not in')",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Listede Arama: 'not in'</h1><p><code>not in</code> operatörü, bir elemanın listenin içinde *olmadığını* kontrol eder. <code>True</code> veya <code>False</code> döndürür.</p><pre><code>portlar = [80, 443, 22]\nprint(21 not in portlar) # Çıktı: True\nprint(80 not in portlar) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Port Kontrolü",
      "description": "<code>hedef_port</code> 21 (FTP) olarak verilmiştir. <code>not in</code> operatörünü kullanarak bu portun <code>guvenli_port_listesi</code> içinde *olmadığını* (yani güvensiz olduğunu) kontrol edin ve sonucu konsola yazdırın (Sonuç <code>True</code> çıkmalı).",
      "hint": "<code>print(hedef_port not in guvenli_port_listesi)</code>"
    },
    "default_code": "guvenli_port_listesi = [80, 443]\nhedef_port = 21\n\n# Kontrolü burada yapıp yazdırın\n",
    "solution": "guvenli_port_listesi = [80, 443]\nhedef_port = 21\n\nprint(hedef_port not in guvenli_port_listesi)"
  },
  {
    "id": "U3_T1_E12",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Liste Dilimleme (Slicing) 1",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Dilimleme (Slicing)</h1><p>Listenin belirli bir aralığını (alt kümesini) almak için 'dilimleme' (slicing) kullanılır. Sözdizimi <code>liste[baslangic:bitis]</code> şeklindedir.</p><p><code>baslangic</code> indeksi dahildir, <code>bitis</code> indeksi dahil değildir.</p><pre><code>portlar = [21, 22, 25, 80, 443]\n# İndeks 1'den (22) başla, indeks 3'e (80) kadar al (3 dahil değil)\nprint(portlar[1:3]) # Çıktı: [22, 25]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcıları Dilimle",
      "description": "<code>kullanicilar</code> listesi verilmiştir. Bu listenin <strong>ikinci</strong> (indeks 1) ve <strong>üçüncü</strong> (indeks 2) elemanlarını (<code>\"user1\"</code>, <code>\"user2\"</code>) dilimleme (slicing) kullanarak alın ve yeni bir liste olarak yazdırın.",
      "hint": "<code>[1:3]</code> kullanmalısınız (1 dahil, 3 dahil değil)."
    },
    "default_code": "kullanicilar = [\"admin\", \"user1\", \"user2\", \"guest\"]\n\n# Listeyi burada dilimleyin ve yazdırın\n",
    "solution": "kullanicilar = [\"admin\", \"user1\", \"user2\", \"guest\"]\n\nprint(kullanicilar[1:3])"
  },
  {
    "id": "U3_T1_E13",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Liste Dilimleme (Slicing) 2",
    "difficulty": "Orta",
    "lesson_html": "<h1>Slicing (Baştan/Sona Kadar)</h1><p>Dilimleme yaparken başlangıç veya bitiş değerini boş bırakabilirsiniz:</p><ul><li><code>liste[:bitis]</code>: En baştan <code>bitis</code> indeksine kadar alır (bitiş dahil değil).</li><li><code>liste[baslangic:]</code>: <code>baslangic</code> indeksinden (dahil) en sona kadar alır.</li></ul><pre><code>portlar = [21, 22, 25, 80, 443]\nprint(portlar[:2]) # Çıktı: [21, 22]\nprint(portlar[3:]) # Çıktı: [80, 443]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Olmayan Portlar",
      "description": "<code>port_listesi</code> verilmiştir. Bu listenin <strong>indeks 2'den (dahil)</strong> (<code>110</code>) <strong>sona kadar</strong> olan tüm elemanlarını dilimleme kullanarak alın ve yazdırın.",
      "hint": "<code>port_listesi[2:]</code>"
    },
    "default_code": "port_listesi = [80, 443, 110, 139, 445]\n\n# İndeks 2'den sona kadar dilimleyin ve yazdırın\n",
    "solution": "port_listesi = [80, 443, 110, 139, 445]\n\nprint(port_listesi[2:])"
  },
  {
    "id": "U3_T1_E14",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Liste Dilimleme (Slicing) 3",
    "difficulty": "Orta",
    "lesson_html": "<h1>Slicing (Baştan Belirli Bir Yere)</h1><p><code>liste[:bitis]</code> kalıbı, listenin 'ilk N elemanını' almak için çok kullanışlıdır.</p><pre><code>loglar = [\"log1\", \"log2\", \"log3\", \"log4\"]\n# İlk 3 logu al\nilk_uc_log = loglar[:3]\nprint(ilk_uc_log) # Çıktı: ['log1', 'log2', 'log3']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İlk İki Dosya",
      "description": "<code>dosyalar</code> listesindeki 'ilk iki' dosyayı (<code>\"rapor.pdf\"</code>, <code>\"sunum.pptx\"</code>) dilimleme kullanarak alın ve yazdırın.",
      "hint": "<code>dosyalar[:2]</code> (2 dahil değildir, bu yüzden 0 ve 1. indeksleri alır)."
    },
    "default_code": "dosyalar = [\"rapor.pdf\", \"sunum.pptx\", \"virus.exe\", \"readme.txt\"]\n\n# İlk iki dosyayı dilimleyin ve yazdırın\n",
    "solution": "dosyalar = [\"rapor.pdf\", \"sunum.pptx\", \"virus.exe\", \"readme.txt\"]\n\nprint(dosyalar[:2])"
  },
  {
    "id": "U3_T1_E15",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Slicing (Negatif İndeks İle)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Slicing (Negatif İndeksler)</h1><p>Dilimleme (slicing) negatif indekslerle de çalışır. Bu, özellikle 'son N elemanı' almak için kullanışlıdır.</p><pre><code>loglar = [\"log1\", \"log2\", \"log3\", \"log4\", \"log5\"]\n# Sondan 3. elemandan (dahil) sona kadar\nson_uc_log = loglar[-3:]\nprint(son_uc_log) # Çıktı: ['log3', 'log4', 'log5']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Son İki Log Kaydı",
      "description": "<code>log_kayitlari</code> listesi verilmiştir. Negatif dilimleme kullanarak listenin <strong>son iki</strong> elemanını (<code>\"HATA\"</code>, <code>\"KAPANDI\"</code>) alın ve yazdırın.",
      "hint": "<code>log_kayitlari[-2:]</code>"
    },
    "default_code": "log_kayitlari = [\"AÇILDI\", \"GİRİŞ\", \"VERİ ÇEKME\", \"HATA\", \"KAPANDI\"]\n\n# Son iki kaydı dilimleyin ve yazdırın\n",
    "solution": "log_kayitlari = [\"AÇILDI\", \"GİRİŞ\", \"VERİ ÇEKME\", \"HATA\", \"KAPANDI\"]\n\nprint(log_kayitlari[-2:])"
  },
  {
    "id": "U3_T1_E16",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: İndeks Bulma (.index())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Metodu: .index()</h1><p><code>.index()</code> metodu, bir elemanın listedeki *ilk* bulunduğu indeks numarasını döndürür. Eğer eleman listede yoksa, hata (<code>ValueError</code>) verir.</p><pre><code>kullanicilar = [\"guest\", \"admin\", \"user\"]\nprint(kullanicilar.index(\"admin\")) # Çıktı: 1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Admin'in Sırası",
      "description": "<code>kullanici_listesi</code> verilmiştir. <code>.index()</code> metodunu kullanarak <code>\"admin\"</code> kullanıcısının bu listedeki indeks numarasını bulun ve yazdırın.",
      "hint": "<code>print(kullanici_listesi.index(\"admin\"))</code>"
    },
    "default_code": "kullanici_listesi = [\"user1\", \"user2\", \"admin\", \"guest\"]\n\n# 'admin' kullanıcısının indeksini bulun ve yazdırın\n",
    "solution": "kullanici_listesi = [\"user1\", \"user2\", \"admin\", \"guest\"]\n\nprint(kullanici_listesi.index(\"admin\"))"
  },
  {
    "id": "U3_T1_E17",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Sayma (.count())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Metodu: .count()</h1><p><code>.count()</code> metodu, bir elemanın liste içinde kaç kez geçtiğini sayar.</p><pre><code>ip_loglari = [\"1.1.1.1\", \"2.2.2.2\", \"1.1.1.1\", \"3.3.3.3\"]\nprint(ip_loglari.count(\"1.1.1.1\")) # Çıktı: 2\nprint(ip_loglari.count(\"9.9.9.9\")) # Çıktı: 0</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Tekrarı",
      "description": "<code>giris_loglari</code> listesinde <code>\"10.0.0.5\"</code> IP adresinin kaç kez tekrar ettiğini (saldırı tespiti için) <code>.count()</code> metodunu kullanarak sayın ve sonucu yazdırın.",
      "hint": "<code>print(giris_loglari.count(\"10.0.0.5\"))</code>"
    },
    "default_code": "giris_loglari = [\"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\", \"10.0.0.5\"]\n\n# '10.0.0.5' IP'sinin kaç kez geçtiğini sayın\n",
    "solution": "giris_loglari = [\"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\", \"10.0.0.5\"]\n\nprint(giris_loglari.count(\"10.0.0.5\"))"
  },
  {
    "id": "U3_T1_E18",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Sıralama (.sort())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Liste Metodu: .sort()</h1><p><code>.sort()</code> metodu, listenin kendisini *yerinde* (in-place) sıralar. Sayıları küçükten büyüğe, stringleri alfabetik olarak sıralar. Orijinal listeyi değiştirir ve <code>None</code> döndürür (yani <code>print(liste.sort())</code> yapmayın!).</p><pre><code>portlar = [80, 22, 443]\nportlar.sort()\nprint(portlar) # Çıktı: [22, 80, 443]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Portları Sırala",
      "description": "<code>port_listesi</code> karışıktır. <code>.sort()</code> metodunu kullanarak listeyi küçükten büyüğe sıralayın ve ardından listenin sıralanmış halini yazdırın.",
      "hint": "Önce <code>port_listesi.sort()</code> yapın, sonra <code>print(port_listesi)</code> yapın."
    },
    "default_code": "port_listesi = [1024, 80, 443, 22, 3306]\n\n# Listeyi burada sıralayın\n\n\n# Sıralanmış listeyi yazdırın\n",
    "solution": "port_listesi = [1024, 80, 443, 22, 3306]\n\nport_listesi.sort()\n\nprint(port_listesi)"
  },
  {
    "id": "U3_T1_E19",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Metod: Ters Sıralama (.sort(reverse=True))",
    "difficulty": "Zor",
    "lesson_html": "<h1>Ters Sıralama</h1><p><code>.sort()</code> metoduna <code>reverse=True</code> parametresini vererek listeyi büyükten küçüğe (veya alfabetik olarak Z'den A'ya) sıralayabilirsiniz.</p><pre><code>risk_skorlari = [5.5, 9.2, 3.1]\nrisk_skorlari.sort(reverse=True)\nprint(risk_skorlari) # Çıktı: [9.2, 5.5, 3.1]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yüksek Riskleri Sırala",
      "description": "<code>skorlar</code> listesini, <code>.sort(reverse=True)</code> kullanarak en yüksek skordan en düşüğe doğru sıralayın ve listenin son halini yazdırın.",
      "hint": "<code>skorlar.sort(reverse=True)</code>"
    },
    "default_code": "skorlar = [4, 10, 2, 8, 6]\n\n# Listeyi büyükten küçüğe sıralayın\n\n\n# Sıralanmış listeyi yazdırın\n",
    "solution": "skorlar = [4, 10, 2, 8, 6]\n\nskorlar.sort(reverse=True)\n\nprint(skorlar)"
  },
  {
    "id": "U3_T1_E20",
    "unit_id": 3,
    "topic_id": 1,
    "unit_name": "Veri Yapıları",
    "topic_name": "Listeler",
    "title": "Listeleri Birleştirme (+)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Listeleri Birleştirme</h1><p>String'lerde olduğu gibi, <code>+</code> operatörü iki listeyi birleştirerek yeni bir liste oluşturur.</p><pre><code>adminler = [\"root\", \"admin\"]\nkullanicilar = [\"guest\", \"user\"]\n\ntum_kullanicilar = adminler + kullanicilar\nprint(tum_kullanicilar) # Çıktı: ['root', 'admin', 'guest', 'user']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Listelerini Birleştir",
      "description": "<code>standart_portlar</code> ve <code>ozel_portlar</code> listeleri verilmiştir. <code>+</code> operatörünü kullanarak bu iki listeyi <code>tum_portlar</code> adında yeni bir listede birleştirin ve <code>tum_portlar</code>'ı yazdırın.",
      "hint": "<code>tum_portlar = standart_portlar + ozel_portlar</code>"
    },
    "default_code": "standart_portlar = [80, 443]\nozel_portlar = [8080, 8443]\n\n# Listeleri burada birleştirin\n\n\n# Yeni listeyi yazdırın\n",
    "solution": "standart_portlar = [80, 443]\nozel_portlar = [8080, 8443]\n\ntum_portlar = standart_portlar + ozel_portlar\n\nprint(tum_portlar)"
  },
  {
    "id": "U3_T2_E1",
    "unit_id": 3,
    "topic_id": 2,
    "unit_name": "Veri Yapıları",
    "topic_name": "Demetler (Tuples)",
    "title": "Demet Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Demetler (Tuples)</h1><p>Demetler, listelere benzer şekilde birden fazla veriyi bir arada tutar. Ancak listeler <code>[]</code> ile oluşturulurken, demetler normal parantez <code>()</code> ile oluşturulur.</p><p>En önemli özellikleri <strong>değiştirilemez (immutable)</strong> olmalarıdır. Oluşturulduktan sonra elemanları değiştirilemez, eklenemez veya silinemez.</p><pre><code># Sabit bir IP ve Port çifti\nsabit_kural = (\"192.168.1.1\", 80)\n\n# Tek elemanlı demet (sondaki virgüle dikkat!)\ntekli_demet = (\"merhaba\",)\n\nprint(sabit_kural)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sabit Kural",
      "description": "Bir firewall kuralını temsil etmek için <code>kural_1</code> adında bir demet oluşturun. Bu demet <code>\"10.0.0.1\"</code> (kaynak IP) ve <code>443</code> (hedef port) değerlerini içermelidir. Demeti oluşturduktan sonra konsola yazdırın.",
      "hint": "<code>kural_1 = (\"10.0.0.1\", 443)</code>"
    },
    "default_code": "# Demeti (tuple) burada oluşturun ve yazdırın\n",
    "solution": "kural_1 = (\"10.0.0.1\", 443)\nprint(kural_1)"
  },
  {
    "id": "U3_T2_E2",
    "unit_id": 3,
    "topic_id": 2,
    "unit_name": "Veri Yapıları",
    "topic_name": "Demetler (Tuples)",
    "title": "Demete Erişim (Indexing)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Demete Erişim</h1><p>Demetlerdeki elemanlara erişim, listelerle tamamen aynıdır. <code>0</code>'dan başlayan indeks numarasını <code>[]</code> içinde kullanırsınız.</p><pre><code>sabit_kural = (\"192.168.1.1\", 80)\n\n# İlk eleman (indeks 0)\nprint(sabit_kural[0]) # Çıktı: 192.168.1.1\n\n# Son eleman (indeks -1)\nprint(sabit_kural[-1]) # Çıktı: 80</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kuraldaki Port",
      "description": "<code>dns_kurali</code> demeti verilmiştir. İndeksleme kullanarak bu demetin <strong>ikinci</strong> elemanını (<code>53</code> port numarasını) konsola yazdırın.",
      "hint": "İkinci elemanın indeksi 1'dir. <code>dns_kurali[1]</code>"
    },
    "default_code": "dns_kurali = (\"8.8.8.8\", 53)\n\n# Demetin ikinci elemanını yazdırın\n",
    "solution": "dns_kurali = (\"8.8.8.8\", 53)\n\nprint(dns_kurali[1])"
  },
  {
    "id": "U3_T2_E3",
    "unit_id": 3,
    "topic_id": 2,
    "unit_name": "Veri Yapıları",
    "topic_name": "Demetler (Tuples)",
    "title": "Değişmezlik (Immutability)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Değişmezlik (Immutability)</h1><p>Listelerin aksine, bir demetin elemanını atama <code>=</code> operatörü ile değiştirmeye çalışırsanız <code>TypeError</code> hatası alırsınız.</p><pre><code>liste = [1, 2]\nliste[0] = 100 # Geçerli\n\ndemet = (1, 2)\n# demet[0] = 100 # HATA VERİR (TypeError)</code></pre><p>Bu, verinin yanlışlıkla değiştirilmesini engeller. Verinin sabit kalacağından emin olmak istediğinizde demetleri tercih edin.</p>",
    "challenge": {
      "title": "Meydan Okuma: Hatalı Kodu İncele",
      "description": "Aşağıdaki kod, <code>sabit_kural</code> demetinin ilk elemanını değiştirmeye çalıştığı için hata vermektedir. Bu satırı yorum satırı (<code>#</code>) haline getirerek hatayı düzeltin ve programın çalışmasını sağlayın (sadece demetin orijinal halini yazdıracak).",
      "hint": "<code>sabit_kural[0] = \"...\"</code> ile başlayan satırın başına <code>#</code> koyun."
    },
    "default_code": "sabit_kural = (\"172.217.14.228\", 443)\n\n# Bu satır hata veriyor, yorum satırı yapın\nsabit_kural[0] = \"YENI_IP\"\n\nprint(sabit_kural)",
    "solution": "sabit_kural = (\"172.217.14.228\", 443)\n\n# Bu satır hata veriyor, yorum satırı yapın\n# sabit_kural[0] = \"YENI_IP\"\n\nprint(sabit_kural)"
  },
  {
    "id": "U3_T2_E4",
    "unit_id": 3,
    "topic_id": 2,
    "unit_name": "Veri Yapıları",
    "topic_name": "Demetler (Tuples)",
    "title": "Demet Çözümleme (Unpacking)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Demet Çözümleme (Unpacking)</h1><p>Demetlerin en kullanışlı özelliklerinden biri, içindeki değerleri birden fazla değişkene tek seferde 'çözümleyerek' atayabilmektir.</p><pre><code>kural = (\"192.168.1.1\", 80)\n\n# Çözümleme\nip, port = kural\n\nprint(f\"IP: {ip}\")   # Çıktı: IP: 192.168.1.1\nprint(f\"Port: {port}\") # Çıktı: Port: 80</code></pre><p>Bu, listenin başındaki değişken sayısıyla demetteki eleman sayısının eşleşmesini gerektirir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Bilgisini Çözümle",
      "description": "<code>kullanici_bilgisi</code> demeti bir kullanıcı adı ve ID içermektedir. Bu demeti 'unpacking' (çözümleme) yöntemini kullanarak <code>kullanici_adi</code> ve <code>kullanici_id</code> adlı iki ayrı değişkene atayın. Ardından bu iki değişkeni ayrı ayrı yazdırın.",
      "hint": "<code>kullanici_adi, kullanici_id = kullanici_bilgisi</code>"
    },
    "default_code": "kullanici_bilgisi = (\"admin\", 1001)\n\n# Çözümlemeyi burada yapın\n\n\n# İki yeni değişkeni yazdırın\n",
    "solution": "kullanici_bilgisi = (\"admin\", 1001)\n\nkullanici_adi, kullanici_id = kullanici_bilgisi\n\nprint(kullanici_adi)\nprint(kullanici_id)"
  },
  {
    "id": "U3_T2_E5",
    "unit_id": 3,
    "topic_id": 2,
    "unit_name": "Veri Yapıları",
    "topic_name": "Demetler (Tuples)",
    "title": "Demet Listesi Üzerinde Döngü",
    "difficulty": "Orta",
    "lesson_html": "<h1>Demet Listesi Üzerinde Döngü</h1><p>Demetler genellikle bir liste içinde gruplanmış verileri saklamak için kullanılır. Örneğin, (IP, Port) çiftlerinden oluşan bir kural listesi.</p><p><code>for</code> döngüsü ve 'unpacking' (çözümleme) bu yapıyı işlemek için mükemmeldir.</p><pre><code>kural_listesi = [(\"1.1.1.1\", 53), (\"8.8.8.8\", 53)]\n\nfor ip, port in kural_listesi:\n    print(f\"{ip} adresine {port} portu üzerinden izin verildi.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Firewall Kuralları",
      "description": "<code>yasakli_kurallar</code> listesi, (IP, Port) demetleri içermektedir. Bir <code>for</code> döngüsü ve 'unpacking' (çözümleme) kullanarak listedeki her bir <code>ip</code> ve <code>port</code>'u <code>f\"{ip}:{port} kombinasyonu yasaklandı\"</code> formatında yazdırın.",
      "hint": "<code>for ip, port in yasakli_kurallar:</code>"
    },
    "default_code": "yasakli_kurallar = [(\"10.0.0.5\", 22), (\"10.0.0.6\", 21)]\n\n# Döngü ve çözümlemeyi burada yapın\n",
    "solution": "yasakli_kurallar = [(\"10.0.0.5\", 22), (\"10.0.0.6\", 21)]\n\nfor ip, port in yasakli_kurallar:\n    print(f\"{ip}:{port} kombinasyonu yasaklandı\")"
  },
  {
    "id": "U3_T3_E1",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Sözlük Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Sözlükler (Dictionaries)</h1><p>Sözlükler, verileri 'anahtar-değer' (key-value) çiftleri olarak saklayan veri yapılarıdır. Listeler gibi <code>[]</code> veya demetler gibi <code>()</code> yerine, sözlükler süslü parantez <code>{}</code> ile oluşturulur.</p><p>Her eleman <code>anahtar: değer</code> şeklinde yazılır ve virgülle ayrılır. Anahtarlar (key) genellikle string veya sayılardır ve *benzersiz (unique)* olmalıdır.</p><pre><code># Port numaralarını servis adlarıyla eşleştirme\nservisler = {\n    80: \"HTTP\",\n    443: \"HTTPS\",\n    22: \"SSH\"\n}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Bilgisi",
      "description": "<code>kullanici_profili</code> adında bir sözlük oluşturun. Bu sözlük şu anahtar-değer çiftlerini içermelidir: <code>\"kullanici_adi\"</code> anahtarı <code>\"admin\"</code> değerine ve <code>\"id\"</code> anahtarı <code>101</code> değerine sahip olmalı. Sözlüğü oluşturduktan sonra <code>print()</code> ile yazdırın.",
      "hint": "<code>kullanici_profili = {\"anahtar1\": \"değer1\", \"anahtar2\": değer2}</code>"
    },
    "default_code": "# Sözlüğü burada oluşturun ve yazdırın\n",
    "solution": "kullanici_profili = {\n    \"kullanici_adi\": \"admin\",\n    \"id\": 101\n}\nprint(kullanici_profili)"
  },
  {
    "id": "U3_T3_E2",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Değere Erişim (Anahtar ile)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değere Erişim</h1><p>Sözlüklerde bir değere erişmek için onun indeksini (0, 1...) değil, <strong>anahtarını (key)</strong> kullanırız. Tıpkı listelerde olduğu gibi köşeli parantez <code>[]</code> kullanılır.</p><pre><code>servisler = {80: \"HTTP\", 443: \"HTTPS\"}\n\n# 80 anahtarının değerini al\nprint(servisler[80]) # Çıktı: HTTP</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Admin'in Rolü",
      "description": "<code>kullanici_rolleri</code> sözlüğü verilmiştir. <code>\"admin\"</code> anahtarını (key) kullanarak bu kullanıcının rolünü (değerini) bulun ve konsola yazdırın.",
      "hint": "<code>print(kullanici_rolleri[\"admin\"])</code>"
    },
    "default_code": "kullanici_rolleri = {\n    \"admin\": \"Tam Yetki\",\n    \"guest\": \"Okuma Yetkisi\"\n}\n\n# 'admin' kullanıcısının rolünü yazdırın\n",
    "solution": "kullanici_rolleri = {\n    \"admin\": \"Tam Yetki\",\n    \"guest\": \"Okuma Yetkisi\"\n}\n\nprint(kullanici_rolleri[\"admin\"])"
  },
  {
    "id": "U3_T3_E3",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Yeni Eleman Ekleme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Yeni Eleman Ekleme</h1><p>Bir sözlüğe yeni bir anahtar-değer çifti eklemek çok kolaydır. Yeni anahtarı <code>[]</code> içinde belirtip <code>=</code> ile değerini atamanız yeterlidir.</p><pre><code>servisler = {80: \"HTTP\"}\nprint(servisler)\n\n# Yeni anahtar-değer ekle\nservisler[443] = \"HTTPS\"\nprint(servisler) # Çıktı: {80: 'HTTP', 443: 'HTTPS'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yeni Port Ekle",
      "description": "<code>port_servisleri</code> sözlüğüne <code>22</code> anahtarı (key) ve <code>\"SSH\"</code> değeri (value) ile yeni bir eleman ekleyin. Ardından sözlüğün son halini yazdırın.",
      "hint": "<code>port_servisleri[22] = \"SSH\"</code>"
    },
    "default_code": "port_servisleri = {80: \"HTTP\", 443: \"HTTPS\"}\n\n# 22 numaralı portu buraya ekleyin\n\n\n# Sözlüğün son halini yazdırın\n",
    "solution": "port_servisleri = {80: \"HTTP\", 443: \"HTTPS\"}\n\nport_servisleri[22] = \"SSH\"\n\nprint(port_servisleri)"
  },
  {
    "id": "U3_T3_E4",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Değer Değiştirme",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Değeri Değiştirme</h1><p>Sözlükteki bir anahtarın değerini değiştirmek, yeni eleman eklemekle aynı sözdizimine sahiptir. Anahtar zaten varsa, Python eski değerin üzerine yeni değeri yazar.</p><pre><code>kullanici = {\"id\": 101, \"yetki\": \"Okuma\"}\nprint(kullanici)\n\n# 'yetki' anahtarının değerini güncelle\nkullanici[\"yetki\"] = \"Yazma\"\nprint(kullanici) # Çıktı: {'id': 101, 'yetki': 'Yazma'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Durumu Güncelle",
      "description": "<code>zafiyet_durumu</code> sözlüğünde <code>\"CVE-2021-1234\"</code> anahtarının değeri \"Araştırılıyor\" olarak ayarlanmıştır. Bu değeri <code>\"Yüksek Riskli\"</code> olarak güncelleyin ve sözlüğün son halini yazdırın.",
      "hint": "<code>zafiyet_durumu[\"CVE-2021-1234\"] = \"Yüksek Riskli\"</code>"
    },
    "default_code": "zafiyet_durumu = {\"CVE-2021-1234\": \"Araştırılıyor\"}\n\n# Zafiyet durumunu burada güncelleyin\n\n\n# Sözlüğün son halini yazdırın\n",
    "solution": "zafiyet_durumu = {\"CVE-2021-1234\": \"Araştırılıyor\"}\n\nzafiyet_durumu[\"CVE-2021-1234\"] = \"Yüksek Riskli\"\n\nprint(zafiyet_durumu)"
  },
  {
    "id": "U3_T3_E5",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Eleman Silme (del)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Eleman Silme (del)</h1><p>Bir sözlükten anahtar-değer çiftini silmek için <code>del</code> anahtar kelimesi ve silinecek elemanın anahtarı kullanılır.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\nprint(servisler)\n\ndel servisler[22] # 22 anahtarını ve değerini sil\nprint(servisler) # Çıktı: {80: 'HTTP'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcıyı Sil",
      "description": "<code>kullanicilar</code> sözlüğünden <code>\"guest\"</code> anahtarını (ve ona bağlı değeri) <code>del</code> komutunu kullanarak silin. Ardından sözlüğün son halini yazdırın.",
      "hint": "<code>del kullanicilar[\"guest\"]</code>"
    },
    "default_code": "kullanicilar = {\"admin\": 1, \"guest\": 2, \"root\": 0}\n\n# 'guest' anahtarını burada silin\n\n\n# Sözlüğün son halini yazdırın\n",
    "solution": "kullanicilar = {\"admin\": 1, \"guest\": 2, \"root\": 0}\n\ndel kullanicilar[\"guest\"]\n\nprint(kullanicilar)"
  },
  {
    "id": "U3_T3_E6",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Güvenli Erişim (.get())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Güvenli Erişim: .get()</h1><p>Eğer bir sözlükte var olmayan bir anahtara <code>[]</code> ile erişmeye çalışırsanız, programınız <code>KeyError</code> hatası vererek durur.</p><pre><code>servisler = {80: \"HTTP\"}\n# print(servisler[22]) # HATA VERİR (KeyError)</code></pre><p>Bunu engellemek için <code>.get(anahtar)</code> metodu kullanılır. Anahtar varsa değeri döndürür, anahtar yoksa hata vermek yerine <code>None</code> (hiçlik) değerini döndürür.</p><pre><code>print(servisler.get(80)) # Çıktı: HTTP\nprint(servisler.get(22)) # Çıktı: None</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Servisini Bul",
      "description": "<code>port_servisleri</code> sözlüğü verilmiştir. <code>.get()</code> metodunu kullanarak <code>22</code> anahtarının değerini bulun ve yazdırın. (Bu anahtar olmadığı için <code>None</code> yazdırılmalı).",
      "hint": "<code>print(port_servisleri.get(22))</code>"
    },
    "default_code": "port_servisleri = {80: \"HTTP\", 443: \"HTTPS\"}\n\n# 22 numaralı portu .get() ile arayın\n",
    "solution": "port_servisleri = {80: \"HTTP\", 443: \"HTTPS\"}\n\nprint(port_servisleri.get(22))"
  },
  {
    "id": "U3_T3_E7",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": ".get() ve Varsayılan Değer",
    "difficulty": "Orta",
    "lesson_html": "<h1>.get() ile Varsayılan Değer</h1><p><code>.get()</code> metodunun daha da kullanışlı bir özelliği, ikinci parametre olarak bir 'varsayılan değer' alabilmesidir. Eğer anahtar bulunamazsa, <code>None</code> yerine bu varsayılan değeri döndürür.</p><pre><code>servisler = {80: \"HTTP\"}\n# 22'yi ara, bulamazsan 'Bilinmiyor' döndür\nprint(servisler.get(22, \"Bilinmiyor\")) # Çıktı: Bilinmiyor</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Sahibi",
      "description": "<code>ip_sahipleri</code> sözlüğü verilmiştir. <code>.get()</code> metodunu kullanarak <code>\"10.0.0.1\"</code> IP adresinin sahibini arayın. Bulamazsanız, varsayılan değer olarak <code>\"Sahip Bulunamadı\"</code> yazdırın.",
      "hint": "<code>.get(\"10.0.0.1\", \"Sahip Bulunamadı\")</code>"
    },
    "default_code": "ip_sahipleri = {\"192.168.1.1\": \"Modem\", \"8.8.8.8\": \"Google DNS\"}\n\n# '10.0.0.1' IP'sini varsayılan değer ile arayın\n",
    "solution": "ip_sahipleri = {\"192.168.1.1\": \"Modem\", \"8.8.8.8\": \"Google DNS\"}\n\nprint(ip_sahipleri.get(\"10.0.0.1\", \"Sahip Bulunamadı\"))"
  },
  {
    "id": "U3_T3_E8",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Anahtar Kontrolü ('in')",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Anahtar Kontrolü: 'in'</h1><p>Listelerde bir elemanın varlığını <code>in</code> ile kontrol etmiştik. Sözlüklerde <code>in</code> operatörü, bir elemanın <strong>anahtarlarda (key)</strong> olup olmadığını kontrol eder. Değerlere (value) bakmaz.</p><pre><code>servisler = {80: \"HTTP\", 443: \"HTTPS\"}\nprint(80 in servisler)    # Çıktı: True (80 bir anahtar)\nprint(22 in servisler)    # Çıktı: False\nprint(\"HTTP\" in servisler) # Çıktı: False ('HTTP' bir değerdir, anahtar değil)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı IP Kontrolü",
      "description": "<code>yasakli_ipler</code> sözlüğü verilmiştir (IP'ler anahtardır). <code>in</code> operatörünü kullanarak <code>\"1.2.3.4\"</code> IP'sinin bu sözlükte bir anahtar olup olmadığını kontrol edin ve sonucu (<code>True</code>/<code>False</code>) yazdırın.",
      "hint": "<code>print(\"1.2.3.4\" in yasakli_ipler)</code>"
    },
    "default_code": "yasakli_ipler = {\"1.2.3.4\": \"Sebep 1\", \"5.6.7.8\": \"Sebep 2\"}\n\n# '1.2.3.4' IP'sinin anahtarlarda olup olmadığını kontrol edin\n",
    "solution": "yasakli_ipler = {\"1.2.3.4\": \"Sebep 1\", \"5.6.7.8\": \"Sebep 2\"}\n\nprint(\"1.2.3.4\" in yasakli_ipler)"
  },
  {
    "id": "U3_T3_E9",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "'in' ve 'if' Kombinasyonu",
    "difficulty": "Orta",
    "lesson_html": "<h1>'in' ve 'if'</h1><p><code>in</code> operatörü, <code>if</code> blokları ile birleştiğinde 'anahtar yoksa ekle' veya 'anahtar varsa güncelle' gibi güvenli işlemler yapmanızı sağlar.</p><pre><code>sayac = {}\nanahtar = \"admin\"\n\nif anahtar not in sayac:\n    sayac[anahtar] = 1 # Anahtar yoksa oluştur ve 1 yap\nelse:\n    sayac[anahtar] += 1 # Anahtar varsa 1 artır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Servis Ekleme",
      "description": "<code>servisler</code> sözlüğü verilmiştir. <code>21</code> portunun (anahtarının) <code>servisler</code> sözlüğünde *olmadığını* (<code>not in</code>) <code>if</code> ile kontrol edin. Eğer yoksa, <code>servisler[21] = \"FTP\"</code> komutuyla ekleyin. Sonra sözlüğün tamamını yazdırın.",
      "hint": "<code>if 21 not in servisler: ...</code>"
    },
    "default_code": "servisler = {80: \"HTTP\", 443: \"HTTPS\"}\n\n# 21 portu yoksa ekleyin\n\n\nprint(servisler)",
    "solution": "servisler = {80: \"HTTP\", 443: \"HTTPS\"}\n\nif 21 not in servisler:\n    servisler[21] = \"FTP\"\n\nprint(servisler)"
  },
  {
    "id": "U3_T3_E10",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Döngü (Anahtarlar Üzerinde)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Sözlükte Döngü (Anahtarlar)</h1><p>Bir sözlük üzerinde <code>for</code> döngüsü kurarsanız, Python varsayılan olarak <strong>anahtarlar (key)</strong> üzerinde döner.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\n\n# 'port' değişkeni 80 ve 22 değerlerini alır\nfor port in servisler:\n    print(port)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adlarını Yazdır",
      "description": "<code>kullanicilar</code> sözlüğü verilmiştir. Bir <code>for</code> döngüsü kullanarak sözlükteki tüm <strong>anahtarları</strong> (kullanıcı adlarını) alt alta yazdırın.",
      "hint": "<code>for k in kullanicilar: ... print(k)</code>"
    },
    "default_code": "kullanicilar = {\"admin\": \"Aktif\", \"guest\": \"Pasif\", \"root\": \"Aktif\"}\n\n# Sözlükteki anahtarları (key) yazdıran döngü\n",
    "solution": "kullanicilar = {\"admin\": \"Aktif\", \"guest\": \"Pasif\", \"root\": \"Aktif\"}\n\nfor kullanici in kullanicilar:\n    print(kullanici)"
  },
  {
    "id": "U3_T3_E11",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Metod: .keys()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod: .keys()</h1><p><code>for anahtar in sozluk:</code> yazmak ile <code>for anahtar in sozluk.keys():</code> yazmak aynı işi yapar: Anahtarlar üzerinde döner. <code>.keys()</code> metodunu kullanmak, niyetinizi daha açık hale getirebilir.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\nfor port in servisler.keys():\n    print(port) # Çıktı: 80, 22</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Anahtarları .keys() ile Yazdır",
      "description": "<code>kullanicilar</code> sözlüğündeki tüm anahtarları (key) <code>.keys()</code> metodunu kullanarak bir <code>for</code> döngüsü ile yazdırın.",
      "hint": "<code>for k in kullanicilar.keys(): ...</code>"
    },
    "default_code": "kullanicilar = {\"admin\": 1, \"guest\": 2}\n\n# .keys() kullanarak döngü kurun\n",
    "solution": "kullanicilar = {\"admin\": 1, \"guest\": 2}\n\nfor anahtar in kullanicilar.keys():\n    print(anahtar)"
  },
  {
    "id": "U3_T3_E12",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Metod: .values()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod: .values()</h1><p>Eğer sadece anahtarlara değil, sadece <strong>değerlere (value)</strong> ihtiyacınız varsa, <code>.values()</code> metodunu kullanırsınız.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\nfor servis_adi in servisler.values():\n    print(servis_adi) # Çıktı: HTTP, SSH</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Değerleri Yazdır",
      "description": "<code>ip_sahipleri</code> sözlüğündeki tüm <strong>değerleri</strong> (sahiplerin isimlerini) <code>.values()</code> metodunu kullanarak bir <code>for</code> döngüsü ile yazdırın.",
      "hint": "<code>for sahip in ip_sahipleri.values(): ...</code>"
    },
    "default_code": "ip_sahipleri = {\"1.1.1.1\": \"Cloudflare\", \"8.8.8.8\": \"Google\"}\n\n# .values() kullanarak döngü kurun\n",
    "solution": "ip_sahipleri = {\"1.1.1.1\": \"Cloudflare\", \"8.8.8.8\": \"Google\"}\n\nfor sahip in ip_sahipleri.values():\n    print(sahip)"
  },
  {
    "id": "U3_T3_E13",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Değerlerde Arama ('in' ve .values())",
    "difficulty": "Zor",
    "lesson_html": "<h1>Değerlerde Arama</h1><p><code>in</code> operatörü varsayılan olarak anahtarları arar. Eğer bir <strong>değerin</strong> sözlükte olup olmadığını kontrol etmek istiyorsanız, <code>in</code> operatörünü <code>.values()</code> metodu ile birleştirmeniz gerekir.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\nprint(\"HTTP\" in servisler.values()) # Çıktı: True\nprint(\"FTP\" in servisler.values())  # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yetki Kontrolü",
      "description": "<code>kullanici_rolleri</code> sözlüğü verilmiştir. <code>\"Tam Yetki\"</code> değerinin (value) bu sözlüğün değerleri arasında olup olmadığını (<code>in ... .values()</code>) kontrol edin ve sonucu yazdırın.",
      "hint": "<code>print(\"Tam Yetki\" in kullanici_rolleri.values())</code>"
    },
    "default_code": "kullanici_rolleri = {\"admin\": \"Tam Yetki\", \"guest\": \"Okuma\"}\n\n# 'Tam Yetki' değerinin varlığını kontrol edin\n",
    "solution": "kullanici_rolleri = {\"admin\": \"Tam Yetki\", \"guest\": \"Okuma\"}\n\nprint(\"Tam Yetki\" in kullanici_rolleri.values())"
  },
  {
    "id": "U3_T3_E14",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Metod: .items() (En Önemlisi)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod: .items()</h1><p>Sözlüklerde döngü yapmanın en yaygın ve güçlü yolu <code>.items()</code> metodudur. Bu metod, size her döngü adımında hem <strong>anahtarı</strong> hem de <strong>değeri</strong> bir demet (tuple) olarak verir. Bunu 'Demet Çözümleme (Unpacking)' ile birleştirebiliriz.</p><pre><code>servisler = {80: \"HTTP\", 22: \"SSH\"}\n\n# (anahtar, değer) çiftlerini (80, \"HTTP\") ve (22, \"SSH\") alır\nfor port, servis in servisler.items():\n    print(f\"{port} portu {servis} servisidir.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Raporu",
      "description": "<code>zafiyetler</code> sözlüğü verilmiştir. <code>.items()</code> metodunu ve <code>for</code> döngüsünde 'unpacking' (çözümleme) kullanarak, her bir <code>zafiyet_kodu</code> ve <code>risk</code>'i <code>f\"{zafiyet_kodu} risk seviyesi: {risk}\"</code> formatında yazdırın.",
      "hint": "<code>for zafiyet_kodu, risk in zafiyetler.items(): ...</code>"
    },
    "default_code": "zafiyetler = {\"CVE-2022-001\": \"Yüksek\", \"CVE-2022-002\": \"Orta\"}\n\n# .items() kullanarak döngü kurun\n",
    "solution": "zafiyetler = {\"CVE-2022-001\": \"Yüksek\", \"CVE-2022-002\": \"Orta\"}\n\nfor zafiyet_kodu, risk in zafiyetler.items():\n    print(f\"{zafiyet_kodu} risk seviyesi: {risk}\")"
  },
  {
    "id": "U3_T3_E15",
    "unit_id": 3,
    "topic_id": 3,
    "unit_name": "Veri Yapıları",
    "topic_name": "Sözlükler (Dictionaries)",
    "title": "Boş Sözlük Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boş Sözlük</h1><p>Tıpkı listelerde olduğu gibi, bazen boş bir sözlükle başlar ve döngü içinde ona eleman eklersiniz. Boş bir sözlük <code>{}</code> ile (veya <code>dict()</code> fonksiyonu ile) oluşturulur.</p><pre><code># IP'lerin kaç kez görüldüğünü saymak için\nip_sayaci = {}\n\n# ...döngü içinde...\n# ip_sayaci[\"1.1.1.1\"] = 1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Cihaz Envanteri",
      "description": "<code>cihaz_envanteri</code> adında boş bir sözlük oluşturun ve bu boş sözlüğü konsola yazdırın.",
      "hint": "<code>cihaz_envanteri = {}</code>"
    },
    "default_code": "# Boş sözlüğü burada oluşturun ve yazdırın\n",
    "solution": "cihaz_envanteri = {}\nprint(cihaz_envanteri)"
  },
  {
    "id": "U3_T4_E1",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Kümeler (Sets)</h1><p>Kümeler, *sırasız* ve *benzersiz* eleman koleksiyonlarıdır. Sözlükler gibi süslü parantez <code>{}</code> ile oluşturulurlar, ancak anahtar-değer çiftleri yerine sadece değerler içerirler.</p><p><strong>ÖNEMLİ:</strong> Boş bir küme oluşturmak için <code>{}</code> kullanamazsınız (bu boş bir sözlük oluşturur). Boş küme için <code>set()</code> fonksiyonu kullanılır.</p><pre><code># Elemanlarla küme oluşturma\nportlar = {80, 443, 22, 80} # 80'i iki kez yazsanız da... \nprint(portlar) # Çıktı: {80, 443, 22} (Sıra değişebilir)\n\n# Boş küme\nbos_kume = set()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Benzersiz Portlar",
      "description": "<code>acil_portlar</code> adında bir küme oluşturun. Bu küme <code>22</code>, <code>23</code> ve <code>80</code> port numaralarını içermelidir. Kümeyi oluşturduktan sonra <code>print()</code> ile yazdırın.",
      "hint": "<code>acil_portlar = {22, 23, 80}</code>"
    },
    "default_code": "# Kümeyi burada oluşturun ve yazdırın\n",
    "solution": "acil_portlar = {22, 23, 80}\nprint(acil_portlar)"
  },
  {
    "id": "U3_T4_E2",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Listeden Küme Oluşturma (Benzersizleştirme)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Listeden Küme Oluşturma (set())</h1><p>Kümelerin en güçlü özelliği, <code>set()</code> fonksiyonu ile bir listedeki tekrarlanan elemanları (duplicate) anında temizlemektir.</p><pre><code>ip_listesi = [\"1.1.1.1\", \"2.2.2.2\", \"1.1.1.1\"]\n\n# Listeyi kümeye çevirerek benzersiz IP'leri al\nbenzersiz_ipler = set(ip_listesi)\nprint(benzersiz_ipler) # Çıktı: {'1.1.1.1', '2.2.2.2'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Benzersiz Saldırgan IP'leri",
      "description": "<code>log_kayitlari</code> listesi, tekrarlanan IP adresleri içermektedir. <code>set()</code> fonksiyonunu kullanarak bu listedeki *benzersiz* IP adreslerinden oluşan bir küme oluşturun ve <code>benzersiz_ipler</code> adlı değişkene atayıp yazdırın.",
      "hint": "<code>benzersiz_ipler = set(log_kayitlari)</code>"
    },
    "default_code": "log_kayitlari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.1\"]\n\n# Listeyi burada kümeye dönüştürün\n\n\n# Benzersiz IP'leri (kümeyi) yazdırın\n",
    "solution": "log_kayitlari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.1\"]\n\nbenzersiz_ipler = set(log_kayitlari)\n\nprint(benzersiz_ipler)"
  },
  {
    "id": "U3_T4_E3",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Eleman Ekleme (.add())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Eleman Ekleme: .add()</h1><p>Kümelere eleman eklemek için <code>.append()</code> (listelerdeki gibi) değil, <code>.add()</code> metodu kullanılır. Eklemeye çalıştığınız eleman zaten kümede varsa, küme değişmez (hata da vermez).</p><pre><code>kullanicilar = {\"admin\"}\nkullanicilar.add(\"guest\")\nkullanicilar.add(\"admin\") # Zaten var, bir şey değişmez\nprint(kullanicilar) # Çıktı: {'admin', 'guest'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yasaklı Port Ekle",
      "description": "<code>yasakli_portlar</code> kümesi verilmiştir. <code>.add()</code> metodunu kullanarak bu kümeye <code>23</code> (Telnet) portunu ekleyin. Ardından kümenin son halini yazdırın.",
      "hint": "<code>yasakli_portlar.add(23)</code>"
    },
    "default_code": "yasakli_portlar = {21, 22}\n\n# 23 numaralı portu kümeye ekleyin\n\n\n# Kümenin son halini yazdırın\n",
    "solution": "yasakli_portlar = {21, 22}\n\nyasakli_portlar.add(23)\n\nprint(yasakli_portlar)"
  },
  {
    "id": "U3_T4_E4",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Eleman Çıkarma (.remove() vs .discard())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Eleman Çıkarma</h1><p>Kümeden eleman çıkarmanın iki yolu vardır:</p><ul><li><code>.remove(eleman)</code>: Elemanı çıkarır. Eğer eleman kümede yoksa <code>KeyError</code> hatası verir.</li><li><code>.discard(eleman)</code>: Elemanı çıkarır. Eğer eleman kümede yoksa hata vermez, sessizce devam eder. (Daha güvenlidir)</li></ul><pre><code>portlar = {80, 22}\nportlar.remove(22)\n# portlar.remove(21) # HATA VERİR\n\nportlar.discard(80)\nportlar.discard(21) # Hata vermez\nprint(portlar) # Çıktı: set() (boş küme)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Portu Güvenle Kaldır",
      "description": "<code>yasakli_ipler</code> kümesi verilmiştir. <code>.discard()</code> metodunu kullanarak <code>\"10.0.0.1\"</code> IP adresini bu kümeden (güvenli bir şekilde) çıkarın. Ardından kümenin son halini yazdırın.",
      "hint": "<code>.discard()</code> kullanmak, IP listede olmasa bile programın çökmesini engeller."
    },
    "default_code": "yasakli_ipler = {\"192.168.1.10\", \"10.0.0.1\", \"1.2.3.4\"}\n\n# '10.0.0.1' IP'sini güvenle (discard) çıkarın\n\n\n# Kümenin son halini yazdırın\n",
    "solution": "yasakli_ipler = {\"192.168.1.10\", \"10.0.0.1\", \"1.2.3.4\"}\n\nyasakli_ipler.discard(\"10.0.0.1\")\n\nprint(yasakli_ipler)"
  },
  {
    "id": "U3_T4_E5",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Eleman Kontrolü ('in')",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Eleman Kontrolü ('in')</h1><p>Listeler ve sözlük anahtarlarında olduğu gibi, <code>in</code> operatörü bir elemanın kümede olup olmadığını kontrol eder. Kümeler bu işlem için listelerden çok daha hızlıdır (büyük verilerde).</p><pre><code>yasakli_kullanicilar = {\"root\", \"guest\"}\nprint(\"root\" in yasakli_kullanicilar)  # Çıktı: True\nprint(\"admin\" in yasakli_kullanicilar) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Kontrolü",
      "description": "<code>bilinen_zafiyetler</code> kümesi verilmiştir. <code>in</code> operatörünü kullanarak <code>\"CVE-2021-44228\"</code> (Log4Shell) zafiyetinin bu kümede olup olmadığını kontrol edin ve sonucu (<code>True</code>/<code>False</code>) yazdırın.",
      "hint": "<code>print(\"CVE-2021-44228\" in bilinen_zafiyetler)</code>"
    },
    "default_code": "bilinen_zafiyetler = {\"CVE-2020-1472\", \"CVE-2021-44228\", \"CVE-2017-0144\"}\n\n# 'CVE-2021-44228' kümede var mı? Kontrol edin.\n",
    "solution": "bilinen_zafiyetler = {\"CVE-2020-1472\", \"CVE-2021-44228\", \"CVE-2017-0144\"}\n\nprint(\"CVE-2021-44228\" in bilinen_zafiyetler)"
  },
  {
    "id": "U3_T4_E6",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Operasyonu: Birleşim (Union)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Küme Operasyonu: Birleşim (Union)</h1><p>Kümelerin matematiksel operasyonları yapabilme gücü vardır. 'Birleşim' (Union), iki kümedeki *tüm* elemanları (tekrarsız olarak) içeren yeni bir küme oluşturur.</p><p><code>|</code> (pipe) operatörü veya <code>.union()</code> metodu kullanılır.</p><pre><code>kume1 = {1, 2, 3}\nkume2 = {3, 4, 5}\nyeni_kume = kume1 | kume2\n# veya: yeni_kume = kume1.union(kume2)\nprint(yeni_kume) # Çıktı: {1, 2, 3, 4, 5}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tüm Yasaklı IP'ler",
      "description": "<code>local_yasakli_ipler</code> ve <code>global_yasakli_ipler</code> adlı iki küme verilmiştir. <code>|</code> (birleşim) operatörünü kullanarak bu iki kümedeki tüm benzersiz IP'leri içeren <code>tum_yasakli_ipler</code> adında yeni bir küme oluşturun ve yazdırın.",
      "hint": "<code>tum_yasakli_ipler = local_yasakli_ipler | global_yasakli_ipler</code>"
    },
    "default_code": "local_yasakli_ipler = {\"192.168.1.10\", \"192.168.1.11\"}\nglobal_yasakli_ipler = {\"1.2.3.4\", \"192.168.1.10\"}\n\n# İki kümeyi burada birleştirin\n\n\n# Yeni kümeyi yazdırın\n",
    "solution": "local_yasakli_ipler = {\"192.168.1.10\", \"192.168.1.11\"}\nglobal_yasakli_ipler = {\"1.2.3.4\", \"192.168.1.10\"}\n\ntum_yasakli_ipler = local_yasakli_ipler | global_yasakli_ipler\n\nprint(tum_yasakli_ipler)"
  },
  {
    "id": "U3_T4_E7",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Operasyonu: Kesişim (Intersection)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Küme Operasyonu: Kesişim (Intersection)</h1><p>'Kesişim' (Intersection), *her iki* kümede de ortak olarak bulunan elemanları içeren yeni bir küme oluşturur.</p><p><code>&</code> (ampersand) operatörü veya <code>.intersection()</code> metodu kullanılır.</p><pre><code>kume1 = {1, 2, 3}\nkume2 = {3, 4, 5}\nortak_elemanlar = kume1 & kume2\nprint(ortak_elemanlar) # Çıktı: {3}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ortak Zafiyetler",
      "description": "<code>server1_zafiyetleri</code> ve <code>server2_zafiyetleri</code> kümeleri verilmiştir. <code>&</code> (kesişim) operatörünü kullanarak *her iki* sunucuda da bulunan ortak zafiyetleri <code>ortak_zafiyetler</code> adında yeni bir kümeye atayın ve yazdırın.",
      "hint": "<code>ortak_zafiyetler = server1_zafiyetleri & server2_zafiyetleri</code>"
    },
    "default_code": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\n# İki kümenin kesişimini burada bulun\n\n\n# Yeni kümeyi yazdırın\n",
    "solution": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\nortak_zafiyetler = server1_zafiyetleri & server2_zafiyetleri\n\nprint(ortak_zafiyetler)"
  },
  {
    "id": "U3_T4_E8",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Operasyonu: Fark (Difference)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Küme Operasyonu: Fark (Difference)</h1><p>'Fark' (Difference), birinci kümede olup ikinci kümede *olmayan* elemanları içeren yeni bir küme oluşturur.</p><p><code>-</code> (eksi) operatörü veya <code>.difference()</code> metodu kullanılır. (Sıralama önemlidir! <code>kume1 - kume2</code> ile <code>kume2 - kume1</code> farklıdır).</p><pre><code>kume1 = {1, 2, 3}\nkume2 = {3, 4, 5}\nfark = kume1 - kume2\nprint(fark) # Çıktı: {1, 2}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sadece Server1'deki Zafiyetler",
      "description": "<code>server1_zafiyetleri</code> ve <code>server2_zafiyetleri</code> kümeleri verilmiştir. <code>-</code> (fark) operatörünü kullanarak <code>server1</code>'de olan ancak <code>server2</code>'de *olmayan* zafiyetleri bulun ve <code>ozel_zafiyetler</code> adlı değişkene atayıp yazdırın.",
      "hint": "<code>ozel_zafiyetler = server1_zafiyetleri - server2_zafiyetleri</code>"
    },
    "default_code": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\n# server1'in server2'den farkını bulun\n\n\n# Yeni kümeyi yazdırın\n",
    "solution": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\nozel_zafiyetler = server1_zafiyetleri - server2_zafiyetleri\n\nprint(ozel_zafiyetler)"
  },
  {
    "id": "U3_T4_E9",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Operasyonu: Simetrik Fark",
    "difficulty": "Zor",
    "lesson_html": "<h1>Küme Operasyonu: Simetrik Fark</h1><p>'Simetrik Fark' (Symmetric Difference), her iki kümenin kesişimi *dışında* kalan tüm elemanları (yani, sadece birinde veya diğerinde olanları) içeren yeni bir küme oluşturur.</p><p><code>^</code> (caret) operatörü veya <code>.symmetric_difference()</code> metodu kullanılır.</p><pre><code>kume1 = {1, 2, 3}\nkume2 = {3, 4, 5}\nsimetrik_fark = kume1 ^ kume2\nprint(simetrik_fark) # Çıktı: {1, 2, 4, 5} (Ortak olan 3'ü attı)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Benzersiz Zafiyetler",
      "description": "<code>server1_zafiyetleri</code> ve <code>server2_zafiyetleri</code> kümeleri verilmiştir. <code>^</code> (simetrik fark) operatörünü kullanarak, *sadece* <code>server1</code>'de olan VEYA *sadece* <code>server2</code>'de olan (ortak olmayan) zafiyetleri bulun ve yazdırın.",
      "hint": "<code>benzersizler = server1_zafiyetleri ^ server2_zafiyetleri</code>"
    },
    "default_code": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\n# Sadece birinde veya diğerinde olanları bulun\n\n\n# Yeni kümeyi yazdırın\n",
    "solution": "server1_zafiyetleri = {\"CVE-1\", \"CVE-2\", \"CVE-3\"}\nserver2_zafiyetleri = {\"CVE-2\", \"CVE-4\"}\n\nbenzersizler = server1_zafiyetleri ^ server2_zafiyetleri\n\nprint(benzersizler)"
  },
  {
    "id": "U3_T4_E10",
    "unit_id": 3,
    "topic_id": 4,
    "unit_name": "Veri Yapıları",
    "topic_name": "Kümeler (Sets)",
    "title": "Küme Üzerinde Döngü",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Küme Üzerinde Döngü</h1><p>Kümeler sırasız olsalar da, <code>for</code> döngüsü ile içindeki tüm elemanlar üzerinde (sırası garanti olmaksızın) gezinebilirsiniz.</p><pre><code>benzersiz_portlar = {80, 443, 22}\nfor port in benzersiz_portlar:\n    print(f\"{port} portu kontrol ediliyor...\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Benzersiz IP'leri Yazdır",
      "description": "<code>benzersiz_ipler</code> kümesi verilmiştir. Bir <code>for</code> döngüsü kullanarak bu kümedeki her bir IP adresini <code>f-string</code> ile <code>f\"Benzersiz IP bulundu: {ip}\"</code> formatında yazdırın. (Çıktı sırası farklılık gösterebilir).",
      "hint": "<code>for ip in benzersiz_ipler: ...</code>"
    },
    "default_code": "benzersiz_ipler = {\"10.0.0.1\", \"192.168.1.1\", \"10.0.0.5\"}\n\n# Küme üzerinde döngü kurun\n",
    "solution": "benzersiz_ipler = {\"10.0.0.1\", \"192.168.1.1\", \"10.0.0.5\"}\n\nfor ip in benzersiz_ipler:\n    print(f\"Benzersiz IP bulundu: {ip}\")"
  },
  {
    "id": "U3_T5_E1",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "List Comprehension (Temel)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>List Comprehensions</h1><p>List Comprehension, <code>for</code> döngüsünü tek bir satıra sığdırarak yeni bir liste oluşturmanın kısa yoludur.</p><p><b>Normal Yöntem (Çok Satır):</b></p><pre><code>sayilar = []\nfor i in range(5):\n    sayilar.append(i)\nprint(sayilar) # Çıktı: [0, 1, 2, 3, 4]</code></pre><p><b>List Comprehension (Tek Satır):</b></p><pre><code>sayilar = [i for i in range(5)]\nprint(sayilar) # Çıktı: [0, 1, 2, 3, 4]</code></pre><p>Sözdizimi: <code>[ifade for eleman in liste]</code></p>",
    "challenge": {
      "title": "Meydan Okuma: 1'den 10'a Kadar",
      "description": "List comprehension kullanarak <code>range(1, 11)</code> (1'den 10'a kadar) olan sayıları içeren <code>sayi_listesi</code> adında bir liste oluşturun ve yazdırın.",
      "hint": "<code>sayi_listesi = [sayi for sayi in range(1, 11)]</code>"
    },
    "default_code": "# List comprehension kullanarak listeyi burada oluşturun\n",
    "solution": "sayi_listesi = [sayi for sayi in range(1, 11)]\nprint(sayi_listesi)"
  },
  {
    "id": "U3_T5_E2",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Comprehension (İşlemle)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Comprehension (İşlemle)</h1><p>Oluşturma sırasında her eleman üzerinde bir işlem yapabilirsiniz.</p><p><b>Normal Yöntem:</b></p><pre><code>kareler = []\nfor i in range(5):\n    kareler.append(i * i)\nprint(kareler) # Çıktı: [0, 1, 4, 9, 16]</code></pre><p><b>List Comprehension:</b></p><pre><code>kareler = [i * i for i in range(5)]\nprint(kareler) # Çıktı: [0, 1, 4, 9, 16]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Portları İkiye Katla",
      "description": "<code>port_listesi</code> verilmiştir. List comprehension kullanarak bu listedeki her bir port numarasının 2 katını alan <code>yeni_portlar</code> adında yeni bir liste oluşturun ve yazdırın.",
      "hint": "<code>yeni_portlar = [port * 2 for port in port_listesi]</code>"
    },
    "default_code": "port_listesi = [22, 80, 443]\n\n# Her portun 2 katını içeren listeyi burada oluşturun\n",
    "solution": "port_listesi = [22, 80, 443]\n\nyeni_portlar = [port * 2 for port in port_listesi]\nprint(yeni_portlar)"
  },
  {
    "id": "U3_T5_E3",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Comprehension (Metod Kullanımı)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Comprehension (Metod Kullanımı)</h1><p>String listeleri üzerinde gezerken string metodlarını (<code>.upper()</code>, <code>.strip()</code> vb.) kullanabilirsiniz.</p><pre><code>isimler = [\"admin\", \"guest\"]\nbuyuk_harfli_isimler = [isim.upper() for isim in isimler]\nprint(buyuk_harfli_isimler) # Çıktı: ['ADMIN', 'GUEST']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Dosya Adlarını Temizle",
      "description": "<code>dosya_listesi</code>, başında/sonunda boşluklar olan dosya adları içermektedir. List comprehension kullanarak listedeki her bir dosya adının <code>.strip()</code> metodunu uygulanmış halini içeren <code>temiz_liste</code> adında yeni bir liste oluşturun.",
      "hint": "<code>temiz_liste = [dosya.strip() for dosya in dosya_listesi]</code>"
    },
    "default_code": "dosya_listesi = [\"  rapor.pdf\", \"virus.exe  \", \" log.txt \"]\n\n# Temizlenmiş listeyi burada oluşturun\n",
    "solution": "dosya_listesi = [\"  rapor.pdf\", \"virus.exe  \", \" log.txt \"]\n\ntemiz_liste = [dosya.strip() for dosya in dosya_listesi]\nprint(temiz_liste)"
  },
  {
    "id": "U3_T5_E4",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "List Comprehension (Filtreleme - 'if')",
    "difficulty": "Orta",
    "lesson_html": "<h1>Comprehension (Filtreleme - 'if')</h1><p>List comprehension'ın sonuna bir <code>if</code> koşulu ekleyerek sadece o koşulu sağlayan elemanları listeye dahil edebilirsiniz.</p><p><b>Normal Yöntem (Çift Sayılar):</b></p><pre><code>cift_sayilar = []\nfor i in range(10):\n    if i % 2 == 0:\n        cift_sayilar.append(i)</code></pre><p><b>List Comprehension:</b></p><pre><code>cift_sayilar = [i for i in range(10) if i % 2 == 0]\nprint(cift_sayilar) # Çıktı: [0, 2, 4, 6, 8]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yetkili Portları Bul",
      "description": "<code>port_listesi</code> verilmiştir. List comprehension ve <code>if</code> koşulu kullanarak, bu listedeki *sadece* <code>1024</code>'ten küçük veya eşit (<code><=</code>) olan portları (yetkili portları) içeren <code>yetkili_portlar</code> adında yeni bir liste oluşturun.",
      "hint": "<code>... for port in port_listesi if port <= 1024]</code>"
    },
    "default_code": "port_listesi = [22, 80, 8080, 443, 3306, 21]\n\n# Sadece yetkili portları içeren listeyi burada oluşturun\n",
    "solution": "port_listesi = [22, 80, 8080, 443, 3306, 21]\n\nyetkili_portlar = [port for port in port_listesi if port <= 1024]\nprint(yetkili_portlar)"
  },
  {
    "id": "U3_T5_E5",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Comprehension (String Filtreleme)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Comprehension (String Filtreleme)</h1><p><code>if</code> koşulunu string metodları ile birleştirmek, listeleri filtrelemenin güçlü bir yoludur.</p><pre><code>dosyalar = [\"a.txt\", \"b.py\", \"c.txt\"]\n# Sadece .txt dosyalarını al\ntxt_dosyalari = [dosya for dosya in dosyalar if dosya.endswith(\".txt\")]\nprint(txt_dosyalari) # Çıktı: ['a.txt', 'c.txt']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tehlikeli Dosyaları Filtrele",
      "description": "<code>dosya_listesi</code> verilmiştir. List comprehension ve <code>if</code> koşulu kullanarak, *sadece* <code>.endswith(\".exe\")</code> koşulunu sağlayan (yani .exe ile biten) dosyaları içeren <code>tehlikeli_dosyalar</code> adında yeni bir liste oluşturun.",
      "hint": "<code>... for dosya in dosya_listesi if dosya.endswith(\".exe\")]</code>"
    },
    "default_code": "dosya_listesi = [\"rapor.pdf\", \"virus.exe\", \"sunum.pptx\", \"loader.exe\"]\n\n# Sadece .exe dosyalarını içeren listeyi burada oluşturun\n",
    "solution": "dosya_listesi = [\"rapor.pdf\", \"virus.exe\", \"sunum.pptx\", \"loader.exe\"]\n\ntehlikeli_dosyalar = [dosya for dosya in dosya_listesi if dosya.endswith(\".exe\")]\nprint(tehlikeli_dosyalar)"
  },
  {
    "id": "U3_T5_E6",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Comprehension ('if-else' Ternary)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Comprehension ('if-else')</h1><p>Eğer <code>if</code> koşulu filtreleme (elemanı atlama) için değil de, elemanı *dönüştürmek* için kullanılacaksa (<code>if...else...</code>), sözdizimi değişir ve <code>if/else</code> bloğu <code>for</code> döngüsünün *önüne* gelir.</p><p>Sözdizimi: <code>[koşul_dogruysa_ifade if koşul else koşul_yanlissa_ifade for eleman in liste]</code></p><pre><code>sayilar = [1, 2, 3, 4]\n# 2'den büyükse 'Büyük', değilse 'Küçük' yaz\nsonuc = [\"Büyük\" if s > 2 else \"Küçük\" for s in sayilar]\nprint(sonuc) # Çıktı: ['Küçük', 'Küçük', 'Büyük', 'Büyük']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Sınıflandırma",
      "description": "<code>skorlar</code> listesi verilmiştir. List comprehension ve 'ternary if-else' operatörünü kullanarak, <code>skor > 5</code> ise <code>\"Yüksek Risk\"</code>, değilse <code>\"Düşük Risk\"</code> yazan <code>risk_seviyeleri</code> adında yeni bir liste oluşturun.",
      "hint": "<code>[\"Yüksek Risk\" if skor > 5 else \"Düşük Risk\" for skor in skorlar]</code>"
    },
    "default_code": "skorlar = [3, 8, 2, 10, 5]\n\n# Risk seviyelerini içeren listeyi burada oluşturun\n",
    "solution": "skorlar = [3, 8, 2, 10, 5]\n\nrisk_seviyeleri = [\"Yüksek Risk\" if skor > 5 else \"Düşük Risk\" for skor in skorlar]\nprint(risk_seviyeleri)"
  },
  {
    "id": "U3_T5_E7",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Dictionary Comprehension (Temel)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dictionary Comprehensions</h1><p>List comprehension'a benzer şekilde, tek satırda sözlükler (dictionary) de oluşturabilirsiniz. <code>[]</code> yerine <code>{}</code> kullanılır ve <code>anahtar: değer</code> çifti belirtilir.</p><p>Sözdizimi: <code>{anahtar: değer for eleman in liste}</code></p><pre><code>sayilar = [1, 2, 3]\n# Sayıları anahtar, karelerini değer yap\nkareler_sozlugu = {sayi: sayi*sayi for sayi in sayilar}\nprint(kareler_sozlugu) # Çıktı: {1: 1, 2: 4, 3: 9}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı ID'leri",
      "description": "<code>kullanicilar</code> listesi verilmiştir. Dictionary comprehension kullanarak, listedeki her bir <code>kullanici</code>'yı anahtar (key) ve o kullanıcının <code>len()</code> (uzunluğunu) değer (value) yapan bir <code>kullanici_uzunluklari</code> sözlüğü oluşturun.",
      "hint": "<code>{kullanici: len(kullanici) for kullanici in kullanicilar}</code>"
    },
    "default_code": "kullanicilar = [\"admin\", \"guest\", \"root\"]\n\n# Kullanıcıları ve uzunluklarını içeren sözlüğü burada oluşturun\n",
    "solution": "kullanicilar = [\"admin\", \"guest\", \"root\"]\n\nkullanici_uzunluklari = {kullanici: len(kullanici) for kullanici in kullanicilar}\nprint(kullanici_uzunluklari)"
  },
  {
    "id": "U3_T5_E8",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Dict Comprehension (Mevcut Sözlükten)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dict Comprehension (.items())</h1><p>Mevcut bir sözlüğün anahtar ve değerlerini kullanarak yeni bir sözlük oluşturabilirsiniz. Bunun için <code>.items()</code> metodu kullanılır.</p><pre><code>eski_sozluk = {\"a\": 1, \"b\": 2}\n# Anahtar ve değerlerin yerini değiştir\nyeni_sozluk = {deger: anahtar for anahtar, deger in eski_sozluk.items()}\nprint(yeni_sozluk) # Çıktı: {1: 'a', 2: 'b'}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port/Servis Yeri Değiştir",
      "description": "<code>servisler</code> sözlüğü (Port: Servis) verilmiştir. Dictionary comprehension ve <code>.items()</code> kullanarak anahtar ve değerlerin yerini değiştiren (Servis: Port formatında) <code>portlar</code> adında yeni bir sözlük oluşturun.",
      "hint": "<code>{servis: port for port, servis in servisler.items()}</code>"
    },
    "default_code": "servisler = {80: \"HTTP\", 443: \"HTTPS\", 22: \"SSH\"}\n\n# Anahtar/değer yerini değiştiren sözlüğü burada oluşturun\n",
    "solution": "servisler = {80: \"HTTP\", 443: \"HTTPS\", 22: \"SSH\"}\n\nportlar = {servis: port for port, servis in servisler.items()}\nprint(portlar)"
  },
  {
    "id": "U3_T5_E9",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Dict Comprehension (Filtreleme - 'if')",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dict Comprehension (Filtreleme)</h1><p>Listelerde olduğu gibi, sözlük oluştururken de <code>if</code> koşulu ile filtreleme yapabilirsiniz (<code>if</code> bloğu yine en sona gelir).</p><pre><code>skorlar = {\"a\": 10, \"b\": 5, \"c\": 12}\n# Sadece skoru 10'dan büyük olanları al\nyuksek_skorlar = {kullanici: skor for kullanici, skor in skorlar.items() if skor > 10}\nprint(yuksek_skorlar) # Çıktı: {'c': 12}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Aktif Kullanıcılar Sözlüğü",
      "description": "<code>kullanici_durumlari</code> sözlüğü verilmiştir. Dictionary comprehension ve <code>if</code> koşulu kullanarak, *sadece* değeri (<code>durum</code>) <code>\"Aktif\"</code> olan kullanıcıları içeren <code>aktif_kullanicilar</code> adında yeni bir sözlük oluşturun.",
      "hint": "<code>... for kullanici, durum in kullanici_durumlari.items() if durum == \"Aktif\"}</code>"
    },
    "default_code": "kullanici_durumlari = {\"admin\": \"Aktif\", \"guest\": \"Pasif\", \"root\": \"Aktif\"}\n\n# Sadece 'Aktif' olanları içeren yeni sözlüğü burada oluşturun\n",
    "solution": "kullanici_durumlari = {\"admin\": \"Aktif\", \"guest\": \"Pasif\", \"root\": \"Aktif\"}\n\naktif_kullanicilar = {kullanici: durum for kullanici, durum in kullanici_durumlari.items() if durum == \"Aktif\"}\nprint(aktif_kullanicilar)"
  },
  {
    "id": "U3_T5_E10",
    "unit_id": 3,
    "topic_id": 5,
    "unit_name": "Veri Yapıları",
    "topic_name": "Comprehensions",
    "title": "Set Comprehension",
    "difficulty": "Zor",
    "lesson_html": "<h1>Set Comprehensions</h1><p>List comprehension'a çok benzer şekilde, <code>{}</code> kullanarak (ama <code>:</code> olmadan) tek satırda 'küme' (set) de oluşturabilirsiniz. Bu, sonuçta *benzersiz* elemanlar istediğinizde kullanışlıdır.</p><pre><code>liste = [1, 2, 2, 3, 1, 4]\nbenzersiz_kareler = {x*x for x in liste}\nprint(benzersiz_kareler) # Çıktı: {1, 4, 9, 16}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Benzersiz İstemciler",
      "description": "<code>loglar</code> listesi, IP adreslerinin son kısımlarını (tekrarlı olarak) içermektedir. 'Set comprehension' kullanarak bu listedeki *benzersiz* IP son kısımlarını içeren <code>istemciler</code> adında bir küme oluşturun ve yazdırın.",
      "hint": "<code>istemciler = {ip for ip in loglar}</code> (Süslü parantez kullanın)"
    },
    "default_code": "loglar = [10, 20, 10, 30, 20, 10]\n\n# Set comprehension ile benzersiz IP'leri bulun\n",
    "solution": "loglar = [10, 20, 10, 30, 20, 10]\n\nistemciler = {ip for ip in loglar}\nprint(istemciler)"
  },
  {
    "id": "U4_T1_E1",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "İlk Fonksiyon (def)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Fonksiyon Tanımlama (def)</h1><p>Fonksiyonlar, belirli bir işi yapmak üzere tasarlanmış, yeniden kullanılabilir kod bloklarıdır. <code>def</code> anahtar kelimesi ile tanımlanırlar, ardından fonksiyonun adı ve parantez <code>()</code> gelir. Tıpkı <code>if</code> ve <code>for</code> gibi, <code>:</code> ile biterler ve içindeki kod girintili olmalıdır.</p><p>Bir fonksiyonu çalıştırmak için adını <code>()</code> ile 'çağırmanız' gerekir.</p><pre><code># Fonksiyonu tanımla\ndef merhaba_de():\n    print(\"Merhaba Python!\")\n\n# Fonksiyonu çağır\nmerhaba_de()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Alarm Ver",
      "description": "<code>alarm_ver</code> adında bir fonksiyon tanımlayın. Bu fonksiyon, çağrıldığında konsola <code>\"ALARM: Şüpheli aktivite!\"</code> yazdırmalıdır. Tanımladıktan sonra, bu fonksiyonu bir kez çağırın.",
      "hint": "<code>def alarm_ver(): ...</code> satırını yazın, altına girintili olarak <code>print(...)</code> ekleyin. Sonra girintisiz alanda <code>alarm_ver()</code> yazarak çağırın."
    },
    "default_code": "# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu burada çağırın\n",
    "solution": "# Fonksiyonu burada tanımlayın\ndef alarm_ver():\n    print(\"ALARM: Şüpheli aktivite!\")\n\n# Fonksiyonu burada çağırın\nalarm_ver()"
  },
  {
    "id": "U4_T1_E2",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Fonksiyonu Tekrar Çağırma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Fonksiyonların Gücü</h1><p>Fonksiyonların asıl gücü, bir kez tanımlayıp istediğiniz kadar tekrar tekrar çağırabilmenizdir. Bu, kod tekrarını (DRY - Don't Repeat Yourself) engeller.</p><pre><code>def log_yaz():\n    print(\"Log kaydı oluşturuldu.\")\n\nlog_yaz()\nlog_yaz()\nlog_yaz()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tarama Simülasyonu",
      "description": "<code>port_tara</code> adında, <code>\"Port taranıyor...\"</code> yazdıran bir fonksiyon tanımlayın. Bu fonksiyonu <strong>3 kez</strong> alt alta çağırarak 3 portu taramış gibi simüle edin.",
      "hint": "<code>def port_tara(): ...</code> tanımlayın, sonra 3 kez <code>port_tara()</code> yazın."
    },
    "default_code": "# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu burada 3 kez çağırın\n",
    "solution": "# Fonksiyonu burada tanımlayın\ndef port_tara():\n    print(\"Port taranıyor...\")\n\n# Fonksiyonu burada 3 kez çağırın\nport_tara()\nport_tara()\nport_tara()"
  },
  {
    "id": "U4_T1_E3",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Fonksiyon ve 'pass'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Boş Fonksiyonlar (pass)</h1><p>Bazen bir fonksiyonu planlar ama içini daha sonra doldurmak istersiniz. <code>if</code> blokları gibi, <code>def</code> blokları da boş olamaz, sözdizimi hatası verir. Bu durumlarda yer tutucu olarak <code>pass</code> kullanılır.</p><pre><code>def zafiyet_analiz_et():\n    # TODO: Burası daha sonra yazılacak\n    pass</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yer Tutucu",
      "description": "<code>parola_kirici_yaz</code> adında bir fonksiyon tanımlayın. Bu fonksiyon henüz hazır olmadığı için, içine <code>pass</code> anahtar kelimesini ekleyerek kodun hatasız çalışmasını sağlayın. (Bu fonksiyonu çağırmanız gerekmiyor).",
      "hint": "<code>def parola_kirici_yaz(): ... pass</code>"
    },
    "default_code": "# Fonksiyonu 'pass' ile burada tanımlayın\n",
    "solution": "def parola_kirici_yaz():\n    pass"
  },
  {
    "id": "U4_T1_E4",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Parametre (Argument) Alma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Parametre Alma</h1><p>Fonksiyonları daha kullanışlı hale getirmek için onlara dışarıdan bilgi (veri) gönderebiliriz. Bu verilere 'parametre' (veya 'argüman') denir ve fonksiyon tanımındaki <code>()</code> içine yazılır.</p><pre><code># 'isim' bir parametredir\ndef merhaba_de(isim):\n    print(f\"Merhaba, {isim}!\")\n\n# Fonksiyonu çağırırken parametreyi (argümanı) göndeririz\nmerhaba_de(\"Admin\") # Çıktı: Merhaba, Admin!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Kontrol Et",
      "description": "<code>ip_kontrol_et</code> adında bir fonksiyon tanımlayın. Bu fonksiyon <code>ip_adresi</code> adında bir parametre almalı. Fonksiyonun içinde, aldığı bu <code>ip_adresi</code>'ni <code>f-string</code> ile <code>f\"{ip_adresi} kontrol ediliyor...\"</code> formatında yazdırmalıdır. Fonksiyonu <code>\"192.168.1.1\"</code> argümanıyla çağırın.",
      "hint": "<code>def ip_kontrol_et(ip_adresi): ... print(f\"...\")</code> ... <code>ip_kontrol_et(\"192.168.1.1\")</code>"
    },
    "default_code": "# Fonksiyonu (parametre ile) burada tanımlayın\n\n\n# Fonksiyonu burada çağırın\n",
    "solution": "# Fonksiyonu (parametre ile) burada tanımlayın\ndef ip_kontrol_et(ip_adresi):\n    print(f\"{ip_adresi} kontrol ediliyor...\")\n\n# Fonksiyonu burada çağırın\nip_kontrol_et(\"192.168.1.1\")"
  },
  {
    "id": "U4_T1_E5",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Birden Fazla Parametre",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Birden Fazla Parametre</h1><p>Bir fonksiyon, virgülle <code>,</code> ayrılarak birden fazla parametre alabilir. Çağırırken de aynı sırayla gönderilmeleri gerekir.</p><pre><code>def topla(sayi1, sayi2):\n    print(sayi1 + sayi2)\n\ntopla(10, 5) # Çıktı: 15</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Ekle",
      "description": "<code>kullanici_ekle</code> adında bir fonksiyon tanımlayın. Bu fonksiyon <code>kullanici_adi</code> ve <code>yetki_seviyesi</code> adında iki parametre almalıdır. Fonksiyon, aldığı bu parametreleri <code>f\"{kullanici_adi} (Yetki: {yetki_seviyesi}) eklendi.\"</code> formatında yazdırmalıdır. Fonksiyonu <code>\"root\"</code> ve <code>\"Tam Yetki\"</code> argümanlarıyla çağırın.",
      "hint": "<code>def kullanici_ekle(kullanici_adi, yetki_seviyesi): ...</code>"
    },
    "default_code": "# İki parametreli fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu burada çağırın\n",
    "solution": "# İki parametreli fonksiyonu burada tanımlayın\ndef kullanici_ekle(kullanici_adi, yetki_seviyesi):\n    print(f\"{kullanici_adi} (Yetki: {yetki_seviyesi}) eklendi.\")\n\n# Fonksiyonu burada çağırın\nkullanici_ekle(\"root\", \"Tam Yetki\")"
  },
  {
    "id": "U4_T1_E6",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Parametre vs Argüman",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Parametre vs. Argüman</h1><p>Bu iki terim sıkça karıştırılır:</p><ul><li><b>Parametre:</b> Fonksiyon tanımında <code>()</code> içinde yazan değişken adıdır (örn: <code>isim</code>).</li><li><b>Argüman:</b> Fonksiyonu çağırırken <code>()</code> içine gönderdiğiniz *gerçek değerdir* (örn: <code>\"Admin\"</code>).</li></ul><pre><code># 'sayi' bir parametredir\ndef karesini_al(sayi):\n    print(sayi * sayi)\n\n# 5 bir argümandır\nkaresini_al(5)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Raporla",
      "description": "<code>zafiyet_raporla</code> adında, <code>zafiyet_kodu</code> adlı bir <i>parametre</i> alan bir fonksiyon tanımlayın. Fonksiyon <code>f\"{zafiyet_kodu} raporlandı.\"</code> yazdırsın. Bu fonksiyonu <code>\"CVE-2021-44228\"</code> <i>argümanı</i> ile çağırın.",
      "hint": "Parametre: `zafiyet_kodu`. Argüman: `\"CVE-2021-44228\"`."
    },
    "default_code": "# 'zafiyet_kodu' parametresi alan fonksiyonu tanımlayın\n\n\n# Fonksiyonu 'CVE-2021-44228' argümanı ile çağırın\n",
    "solution": "# 'zafiyet_kodu' parametresi alan fonksiyonu tanımlayın\ndef zafiyet_raporla(zafiyet_kodu):\n    print(f\"{zafiyet_kodu} raporlandı.\")\n\n# Fonksiyonu 'CVE-2021-44228' argümanı ile çağırın\nzafiyet_raporla(\"CVE-2021-44228\")"
  },
  {
    "id": "U4_T1_E7",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Değer Döndürme (return)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Değer Döndürme (return)</h1><p>Fonksiyonlar sadece <code>print</code> yapmak zorunda değildir. Bir iş yapıp, sonucunu (bir değeri) <code>return</code> anahtar kelimesi ile dışarıya 'döndürebilirler'. Bu, sonucu bir değişkene atamamızı veya başka bir fonksiyonda kullanmamızı sağlar.</p><pre><code>def topla(sayi1, sayi2):\n    return sayi1 + sayi2\n\n# Fonksiyonu çağır ve dönen değeri 'sonuc'a ata\nsonuc = topla(10, 5)\nprint(sonuc) # Çıktı: 15</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Riskli mi?",
      "description": "<code>riskli_port_mu</code> adında bir fonksiyon tanımlayın. Fonksiyon <code>port</code> parametresi alsın. Eğer <code>port < 1024</code> ise, <code>True</code> boolean değerini <code>return</code> etsin. Değilse (<code>else</code>), <code>False</code> değerini <code>return</code> etsin. Fonksiyonu <code>22</code> portu ile çağırın ve dönen sonucu <code>is_riskli</code> değişkenine atayıp yazdırın.",
      "hint": "<code>def riskli_port_mu(port): ... if port < 1024: return True else: return False</code> ... <code>sonuc = riskli_port_mu(22)</code>"
    },
    "default_code": "# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırın, sonucu değişkene atayın ve yazdırın\n",
    "solution": "# Fonksiyonu burada tanımlayın\ndef riskli_port_mu(port):\n    if port < 1024:\n        return True\n    else:\n        return False\n\n# Fonksiyonu çağırın, sonucu değişkene atayın ve yazdırın\nis_riskli = riskli_port_mu(22)\nprint(is_riskli)"
  },
  {
    "id": "U4_T1_E8",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "'return' (Hesaplama)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'return' ile Hesaplama</h1><p><code>return</code>, hesaplamaların sonuçlarını döndürmek için idealdir.</p><pre><code>def alan_hesapla(kenar):\n    alan = kenar * kenar\n    return alan\n\nsonuc = alan_hesapla(5)\nprint(sonuc) # 25</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Skoru Hesapla",
      "description": "<code>risk_skoru_hesapla</code> adında bir fonksiyon tanımlayın. <code>zafiyet_sayisi</code> parametresi alsın. Fonksiyon, <code>zafiyet_sayisi * 10</code> işleminin sonucunu <code>return</code> etsin. <code>5</code> zafiyet için skoru hesaplayın ve <code>toplam_skor</code> değişkenine atayıp yazdırın.",
      "hint": "<code>def ...: return zafiyet_sayisi * 10</code>"
    },
    "default_code": "# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırın, sonucu değişkene atayın ve yazdırın\n",
    "solution": "# Fonksiyonu burada tanımlayın\ndef risk_skoru_hesapla(zafiyet_sayisi):\n    return zafiyet_sayisi * 10\n\n# Fonksiyonu çağırın, sonucu değişkene atayın ve yazdırın\ntoplam_skor = risk_skoru_hesapla(5)\nprint(toplam_skor)"
  },
  {
    "id": "U4_T1_E9",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "'return' (String)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'return' (String)</h1><p>Fonksiyonlar sadece sayı değil, string, liste, sözlük gibi her türlü veri tipini döndürebilir.</p><pre><code>def tam_ad_olustur(ad, soyad):\n    return f\"{ad.upper()} {soyad.upper()}\"\n\nkullanici = tam_ad_olustur(\"admin\", \"kullanicisi\")\nprint(kullanici) # ADMIN KULLANICISI</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Formatı",
      "description": "<code>log_formati_olustur</code> adında bir fonksiyon tanımlayın. <code>ip</code> ve <code>mesaj</code> parametreleri alsın. Fonksiyon, <code>f-string</code> kullanarak <code>f\"[{ip}] - {mesaj}\"</code> formatında bir string'i <code>return</code> etsin. <code>\"10.0.0.1\"</code> IP'si ve <code>\"Giriş denemesi\"</code> mesajı ile fonksiyonu çağırın ve dönen <code>log_kaydi</code>'nı yazdırın.",
      "hint": "<code>def ...: return f\"[{ip}] - {mesaj}\"</code>"
    },
    "default_code": "# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırın ve dönen string'i yazdırın\n",
    "solution": "# Fonksiyonu burada tanımlayın\ndef log_formati_olustur(ip, mesaj):\n    return f\"[{ip}] - {mesaj}\"\n\n# Fonksiyonu çağırın ve dönen string'i yazdırın\nlog_kaydi = log_formati_olustur(\"10.0.0.1\", \"Giriş denemesi\")\nprint(log_kaydi)"
  },
  {
    "id": "U4_T1_E10",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "print vs return",
    "difficulty": "Orta",
    "lesson_html": "<h1>'print' vs 'return'</h1><p>Bu çok önemli bir farktır:</p><ul><li><code>print</code>: Değeri sadece konsola (kullanıcıya) gösterir. Program bu değeri kullanamaz.</li><li><code>return</code>: Değeri konsola göstermez, programın kullanabilmesi için fonksiyonun dışına 'döndürür'.</li></ul><p>Genellikle fonksiyonlar hesaplama yapar (<code>return</code>) ve ana program sonucu yazdırır (<code>print</code>).</p>",
    "challenge": {
      "title": "Meydan Okuma: 'return' Kullan",
      "description": "Aşağıdaki <code>port_servisi_getir</code> fonksiyonu <code>print</code> kullanmaktadır, bu yüzden <code>servis_adi</code> değişkeni <code>None</code> (boş) olmaktadır. Fonksiyondaki <code>print</code> ifadesini <code>return</code> olarak değiştirerek kodun doğru çalışmasını (<code>\"HTTP\"</code> yazdırmasını) sağlayın.",
      "hint": "<code>print(\"HTTP\")</code> satırını <code>return \"HTTP\"</code> olarak değiştirin."
    },
    "default_code": "def port_servisi_getir(port):\n    if port == 80:\n        print(\"HTTP\") # Bu satırı 'return' ile değiştirin\n    else:\n        print(\"Bilinmiyor\") # Bu satırı 'return' ile değiştirin\n\nservis_adi = port_servisi_getir(80)\nprint(servis_adi) # Hedef: 'HTTP' yazdırmalı, 'None' değil",
    "solution": "def port_servisi_getir(port):\n    if port == 80:\n        return \"HTTP\"\n    else:\n        return \"Bilinmiyor\"\n\nservis_adi = port_servisi_getir(80)\nprint(servis_adi)"
  },
  {
    "id": "U4_T1_E11",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Erken 'return' (Guard Clause)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Erken 'return' (Guard Clause)</h1><p><code>return</code> komutu, çalıştırıldığı anda fonksiyonu hemen sonlandırır. Ondan sonraki kodlar çalışmaz.</p><p>Bu, bir koşul sağlanmıyorsa fonksiyonun en başında işlemi durdurmak (Guard Clause) için çok kullanışlıdır.</p><pre><code>def parola_dogrula(parola):\n    if len(parola) < 8:\n        return \"Parola çok kısa!\"\n        # Bu 'return' çalıştığı için aşağıdaki kodlar çalışmaz\n    \n    # ... karmaşıklık kontrolü ...\n    return \"Parola güçlü\"</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvensiz Port",
      "description": "<code>port_tara</code> adında <code>port</code> parametresi alan bir fonksiyon yazın. Fonksiyonun en başında, <code>if port == 23:</code> (Telnet) ise <code>\"Güvensiz port (23), tarama iptal edildi\"</code> mesajını <code>return</code> edin. Eğer bu koşul sağlanmazsa, fonksiyon devam etsin ve <code>f\"{port} taranıyor...\"</code> mesajını <code>return</code> etsin. <code>23</code> portu ile çağırın ve sonucu yazdırın.",
      "hint": "<code>def port_tara(port): ... if port == 23: return \"...\" ... return f\"...\"</code>"
    },
    "default_code": "# Fonksiyonu 'erken return' ile burada tanımlayın\n\n\n# Fonksiyonu 23 portu ile çağırın ve sonucu yazdırın\n",
    "solution": "# Fonksiyonu 'erken return' ile burada tanımlayın\ndef port_tara(port):\n    if port == 23:\n        return \"Güvensiz port (23), tarama iptal edildi\"\n    \n    return f\"{port} taranıyor...\"\n\n# Fonksiyonu 23 portu ile çağırın ve sonucu yazdırın\nsonuc = port_tara(23)\nprint(sonuc)"
  },
  {
    "id": "U4_T1_E12",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Tip İpuçları (Type Hinting)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tip İpuçları (Type Hinting)</h1><p>Modern Python'da, fonksiyonların hangi tipte parametre beklediğini (<code>param: tip</code>) ve hangi tipte bir değer döndüreceğini (<code>-> tip</code>) belirtmek iyi bir pratiktir. Bunlar 'ipucu'dur (hint), kodu zorlamazlar ama okunaklılığı çok artırırlar.</p><pre><code># 'ip' parametresinin string olması beklenir\n# Dönen değerin de string olması beklenir\ndef ip_formatla(ip: str) -> str:\n    return f\"[{ip.strip()}]\"\n\nprint(ip_formatla(\" 1.1.1.1 \"))</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tip İpucu Ekle",
      "description": "Aşağıdaki <code>port_aktif_mi</code> fonksiyonuna tip ipuçları ekleyin: <code>port</code> parametresi <code>int</code> (tamsayı) beklemeli ve fonksiyon <code>bool</code> (True/False) döndürmelidir.",
      "hint": "<code>def port_aktif_mi(port: int) -> bool:</code>"
    },
    "default_code": "# Fonksiyona tip ipuçları ekleyin\ndef port_aktif_mi(port):\n    if port == 80:\n        return True\n    return False\n\nprint(port_aktif_mi(80))",
    "solution": "def port_aktif_mi(port: int) -> bool:\n    if port == 80:\n        return True\n    return False\n\nprint(port_aktif_mi(80))"
  },
  {
    "id": "U4_T1_E13",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Açıklama Satırı (Docstring)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Açıklama Satırı (Docstring)</h1><p><code>def</code> satırının hemen altına yazılan <code>\"\"\"...\"\"\"</code> (üç tırnaklı) metin bloğuna 'docstring' denir. Bu, fonksiyonun ne yaptığını, hangi parametreleri aldığını ve ne döndürdüğünü açıklar. Kodunuzu başkalarının (veya gelecekteki sizin) anlaması için bu çok önemlidir.</p><pre><code>def topla(sayi1: int, sayi2: int) -> int:\n    \"\"\"İki sayıyı toplar ve sonucu döndürür.\n\n    Args:\n        sayi1 (int): Toplanacak ilk sayı.\n        sayi2 (int): Toplanacak ikinci sayı.\n\n    Returns:\n        int: İki sayının toplamı.\n    \"\"\"\n    return sayi1 + sayi2</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Docstring Ekle",
      "description": "Aşağıdaki <code>ip_dogrula</code> fonksiyonuna, ne yaptığını kısaca açıklayan tek satırlık bir 'docstring' ekleyin.",
      "hint": "<code>def ...:</code> satırının hemen altına girintili olarak <code>\"\"\"Bir IP adresinin geçerli olup olmadığını kontrol eder.\"\"\"</code> yazın."
    },
    "default_code": "def ip_dogrula(ip: str) -> bool:\n    # Docstring'i buraya ekleyin\n    if ip == \"127.0.0.1\":\n        return True\n    return False",
    "solution": "def ip_dogrula(ip: str) -> bool:\n    \"\"\"Basit bir IP adresinin geçerliliğini kontrol eder.\"\"\"\n    if ip == \"127.0.0.1\":\n        return True\n    return False"
  },
  {
    "id": "U4_T1_E14",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Fonksiyon İçinden Fonksiyon Çağırma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Fonksiyon İçinden Fonksiyon Çağırma</h1><p>Fonksiyonlar, kodunuzu modüler hale getirir. Bir fonksiyon, işinin bir kısmını yapmak için başka bir fonksiyonu çağırabilir.</p><pre><code>def log_yaz(mesaj: str):\n    print(f\"LOG: {mesaj}\")\n\ndef kullanici_sil(kullanici: str):\n    # ... silme kodu ...\n    log_yaz(f\"{kullanici} silindi.\") # Başka bir fonksiyonu çağır\n\nkullanici_sil(\"guest\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ana Tarama",
      "description": "<code>port_tara(port)</code> ve <code>zafiyet_ara(port)</code> adında iki fonksiyon verilmiştir. <code>ana_tarama</code> adında üçüncü bir fonksiyon tanımlayın. Bu fonksiyon <code>hedef_port</code> parametresi almalı ve içinde hem <code>port_tara(hedef_port)</code>'u hem de <code>zafiyet_ara(hedef_port)</code>'u çağırmalıdır. Son olarak <code>ana_tarama(80)</code>'i çağırın.",
      "hint": "<code>def ana_tarama(hedef_port): ... port_tara(hedef_port) ... zafiyet_ara(hedef_port)</code>"
    },
    "default_code": "def port_tara(port):\n    print(f\"{port} taranıyor...\")\n\ndef zafiyet_ara(port):\n    print(f\"{port} için zafiyet aranıyor...\")\n\n# 'ana_tarama' fonksiyonunu burada tanımlayın\n\n\n# 'ana_tarama' fonksiyonunu 80 portu ile çağırın\n",
    "solution": "def port_tara(port):\n    print(f\"{port} taranıyor...\")\n\ndef zafiyet_ara(port):\n    print(f\"{port} için zafiyet aranıyor...\")\n\n# 'ana_tarama' fonksiyonunu burada tanımlayın\ndef ana_tarama(hedef_port):\n    port_tara(hedef_port)\n    zafiyet_ara(hedef_port)\n\n# 'ana_tarama' fonksiyonunu 80 portu ile çağırın\nana_tarama(80)"
  },
  {
    "id": "U4_T1_E15",
    "unit_id": 4,
    "topic_id": 1,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Fonksiyon Tanımlama",
    "title": "Fonksiyona Liste Gönderme",
    "difficulty": "Orta",
    "lesson_html": "<h1>Fonksiyona Liste Gönderme</h1><p>Fonksiyonlara parametre olarak listeler, sözlükler veya kümeler gibi karmaşık veri yapılarını da gönderebilirsiniz. Fonksiyon, bu yapının tamamı üzerinde işlem yapabilir.</p><pre><code>def listedeki_ciftleri_bul(sayilar: list) -> list:\n    ciftler = []\n    for sayi in sayilar:\n        if sayi % 2 == 0:\n            ciftler.append(sayi)\n    return ciftler\n\nsonuc = listedeki_ciftleri_bul([1, 2, 3, 4, 5])\nprint(sonuc) # Çıktı: [2, 4]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesini Tara",
      "description": "<code>ip_listesi_tara</code> adında bir fonksiyon tanımlayın. Bu fonksiyon <code>ip_listesi</code> (<code>list</code> tipinde) parametresi almalı. Fonksiyonun içinde, <code>for</code> döngüsü kullanarak listenin her bir elemanını (<code>ip</code>) <code>f\"{ip} taranıyor...\"</code> formatında yazdırmalıdır. <code>hedefler</code> listesini bu fonksiyona argüman olarak gönderin.",
      "hint": "<code>def ip_listesi_tara(ip_listesi): ... for ip in ip_listesi: ... print(...)</code> ... <code>ip_listesi_tara(hedefler)</code>"
    },
    "default_code": "hedefler = [\"10.0.0.1\", \"10.0.0.2\", \"10.0.0.3\"]\n\n# 'ip_listesi_tara' fonksiyonunu burada tanımlayın\n\n\n# Fonksiyonu 'hedefler' listesi ile çağırın\n",
    "solution": "hedefler = [\"10.0.0.1\", \"10.0.0.2\", \"10.0.0.3\"]\n\n# 'ip_listesi_tara' fonksiyonunu burada tanımlayın\ndef ip_listesi_tara(ip_listesi: list):\n    for ip in ip_listesi:\n        print(f\"{ip} taranıyor...\")\n\n# Fonksiyonu 'hedefler' listesi ile çağırın\nip_listesi_tara(hedefler)"
  },
  {
    "id": "U4_T2_E1",
    "unit_id": 4,
    "topic_id": 2,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Scope (Kapsam)",
    "title": "Local (Yerel) Kapsam",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Local (Yerel) Kapsam</h1><p>Bir fonksiyonun *içinde* tanımlanan değişkenlere <strong>'local (yerel) değişken'</strong> denir. Bu değişkenler sadece o fonksiyonun içinde var olurlar ve tanınırlar.</p><p>Fonksiyon çalışmasını bitirdiğinde, bu yerel değişkenler bellekten silinir. Fonksiyonun *dışından* bu değişkenlere erişmeye çalışmak <code>NameError</code> hatası verir.</p><pre><code>def test_fonk():\n    local_degisken = \"Merhaba\"\n    print(local_degisken) # Geçerli\n\ntest_fonk()\n# print(local_degisken) # HATA VERİR (NameError)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yerel Değişken",
      "description": "<code>log_yaz</code> adında bir fonksiyon tanımlayın. Fonksiyonun *içinde* <code>mesaj</code> adında bir değişken oluşturun ve <code>\"İşlem tamamlandı\"</code> değerini atayın. Fonksiyonun *içinde* bu <code>mesaj</code> değişkenini yazdırın. Son olarak fonksiyonu çağırın.",
      "hint": "<code>def log_yaz(): ... mesaj = \"...\" ... print(mesaj)</code> ... <code>log_yaz()</code>"
    },
    "default_code": "# Fonksiyonu ve içindeki yerel değişkeni burada tanımlayın\n\n\n# Fonksiyonu çağırın\n",
    "solution": "# Fonksiyonu ve içindeki yerel değişkeni burada tanımlayın\ndef log_yaz():\n    mesaj = \"İşlem tamamlandı\"\n    print(mesaj)\n\n# Fonksiyonu çağırın\nlog_yaz()"
  },
  {
    "id": "U4_T2_E2",
    "unit_id": 4,
    "topic_id": 2,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Scope (Kapsam)",
    "title": "Global (Küresel) Kapsam (Okuma)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Global (Küresel) Kapsam</h1><p>Fonksiyonların *dışında*, ana kod bloğunda tanımlanan değişkenlere <strong>'global (küresel) değişken'</strong> denir. Fonksiyonlar, bu global değişkenleri *okuyabilir* (erişebilir).</p><pre><code>hedef_ip = \"192.168.1.1\"\n\ndef tara():\n    # 'hedef_ip' global olduğu için içeriden okunabilir\n    print(f\"{hedef_ip} taranıyor...\")\n\ntara()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Global Port Oku",
      "description": "<code>global_port</code> adında <code>80</code> değerine sahip bir global değişken tanımlayın. <code>port_kontrol_et</code> adında bir fonksiyon tanımlayın. Bu fonksiyon, *içeriden* <code>global_port</code> değişkenini okumalı ve <code>f\"{global_port} kontrol ediliyor\"</code> yazdırmalıdır. Fonksiyonu çağırın.",
      "hint": "<code>global_port = 80</code>'i dışarıda tanımlayın. <code>def port_kontrol_et(): ... print(f\"...\")</code>"
    },
    "default_code": "# Global değişkeni burada tanımlayın\n\n\n# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırın\n",
    "solution": "# Global değişkeni burada tanımlayın\nglobal_port = 80\n\n# Fonksiyonu burada tanımlayın\ndef port_kontrol_et():\n    print(f\"{global_port} kontrol ediliyor\")\n\n# Fonksiyonu çağırın\nport_kontrol_et()"
  },
  {
    "id": "U4_T2_E3",
    "unit_id": 4,
    "topic_id": 2,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Scope (Kapsam)",
    "title": "Gölgelendirme (Shadowing)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Gölgelendirme (Shadowing)</h1><p>Eğer bir fonksiyonun içinde, global değişkenle *aynı ada* sahip bir değişken tanımlarsanız, o fonksiyon çalıştığı sürece <strong>yerel (local) değişken</strong>, global değişkeni 'gölgeler'. Fonksiyon her zaman önce yerel değişkene bakar.</p><p>Global değişkenin değeri bu durumdan etkilenmez.</p><pre><code>kullanici = \"Global Admin\"\n\ndef test_fonk():\n    kullanici = \"Local User\" # Bu, global'i 'gölgeler'\n    print(f\"İçeride: {kullanici}\")\n\ntest_fonk()\nprint(f\"Dışarıda: {kullanici}\")</code></pre><p>Çıktı:<br><code>İçeride: Local User</code><br><code>Dışarıda: Global Admin</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Yetki Seviyesi",
      "description": "<code>yetki = \"KULLANICI\"</code> global değişkeni verilmiştir. <code>admin_girisi</code> adında bir fonksiyon tanımlayın. Fonksiyon *içinde* <code>yetki = \"ADMIN\"</code> adında bir yerel değişken tanımlayın ve <code>f\"Fonksiyon içi: {yetki}\"</code> yazdırın. Fonksiyonu çağırın ve *sonra* (fonksiyon dışında) <code>f\"Fonksiyon dışı: {yetki}\"</code> yazdırarak global değişkenin değişmediğini görün.",
      "hint": "<code>yetki = ...</code> (dışarıda) ... <code>def ...: yetki = ... (içeride) ... print(...)</code> ... <code>admin_girisi()</code> ... <code>print(...)</code> (dışarıda)"
    },
    "default_code": "yetki = \"KULLANICI\"\n\n# 'admin_girisi' fonksiyonunu burada tanımlayın\n\n\n# Fonksiyonu çağırın\n\n\n# Global 'yetki' değişkenini yazdırın\n",
    "solution": "yetki = \"KULLANICI\"\n\n# 'admin_girisi' fonksiyonunu burada tanımlayın\ndef admin_girisi():\n    yetki = \"ADMIN\"\n    print(f\"Fonksiyon içi: {yetki}\")\n\n# Fonksiyonu çağırın\nadmin_girisi()\n\n# Global 'yetki' değişkenini yazdırın\nprint(f\"Fonksiyon dışı: {yetki}\")"
  },
  {
    "id": "U4_T2_E4",
    "unit_id": 4,
    "topic_id": 2,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Scope (Kapsam)",
    "title": "Global Değişkeni Değiştirme ('global')",
    "difficulty": "Orta",
    "lesson_html": "<h1>Global Değişkeni Değiştirme ('global')</h1><p>Bir fonksiyonun içinden global bir değişkeni *okuyabilirsiniz*, ancak onu doğrudan *değiştiremezsiniz* (değiştirmeye çalışmak 'gölgelendirme' yapar, bir önceki ders gibi).</p><p>Eğer global değişkenin değerini fonksiyon içinden *gerçekten* değiştirmek istiyorsanız, <code>global</code> anahtar kelimesini kullanmanız gerekir.</p><pre><code>sayac = 0\n\ndef artir():\n    global sayac # Python'a 'sayac'ın global olduğunu söyle\n    sayac += 1\n\nartir()\nartir()\nprint(sayac) # Çıktı: 2</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Alarm Durumu",
      "description": "<code>alarm_aktif = False</code> global değişkeni verilmiştir. <code>tehdit_algila</code> adında bir fonksiyon tanımlayın. Fonksiyon içinde <code>global</code> anahtar kelimesini kullanarak <code>alarm_aktif</code>'in global olduğunu belirtin ve değerini <code>True</code> olarak değiştirin. Fonksiyonu çağırın ve ardından <code>alarm_aktif</code> değişkenini (dışarıda) yazdırın (Sonuç <code>True</code> çıkmalı).",
      "hint": "<code>def tehdit_algila(): ... global alarm_aktif ... alarm_aktif = True</code>"
    },
    "default_code": "alarm_aktif = False\n\n# Fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırın\n\n\n# Global değişkeni yazdırın\n",
    "solution": "alarm_aktif = False\n\n# Fonksiyonu burada tanımlayın\ndef tehdit_algila():\n    global alarm_aktif\n    alarm_aktif = True\n\n# Fonksiyonu çağırın\ntehdit_algila()\n\n# Global değişkeni yazdırın\nprint(alarm_aktif)"
  },
  {
    "id": "U4_T2_E5",
    "unit_id": 4,
    "topic_id": 2,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Scope (Kapsam)",
    "title": "En İyi Yöntem: 'global' Yerine 'return'",
    "difficulty": "Orta",
    "lesson_html": "<h1>İyi Pratik: 'global' Yerine 'return'</h1><p><code>global</code> anahtar kelimesini kullanmak, kodun takibini zorlaştırdığı için genellikle 'kötü bir pratik' olarak kabul edilir. Nereden değiştirildiği belli olmayan değişkenler (global state) hatalara yol açar.</p><p>Daha temiz yöntem, global değişkeni *değiştirmek* yerine, fonksiyonun yeni değeri <code>return</code> etmesini sağlamak ve dönen değeri global değişkene *yeniden atamaktır*.</p><pre><code># Kötü Yöntem ('global')\nsayac = 0\ndef artir():\n    global sayac\n    sayac += 1\nartir()\n\n# İyi Yöntem ('return')\nsayac = 0\ndef artir(mevcut_deger):\n    return mevcut_deger + 1\nsayac = artir(sayac)\nprint(sayac) # Çıktı: 1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sayacı 'return' ile Artır",
      "description": "<code>giris_sayisi = 0</code> global değişkeni verilmiştir. <code>giris_ekle</code> adında, <code>mevcut_sayi</code> parametresi alan bir fonksiyon tanımlayın. Fonksiyon, <code>mevcut_sayi + 1</code> değerini <code>return</code> etsin. Fonksiyonu <code>giris_sayisi</code>'ni argüman olarak vererek çağırın ve dönen değeri tekrar <code>giris_sayisi</code> değişkenine atayın. Sonucu yazdırın.",
      "hint": "<code>def giris_ekle(mevcut_sayi): ... return ...</code> ... <code>giris_sayisi = giris_ekle(giris_sayisi)</code>"
    },
    "default_code": "giris_sayisi = 0\n\n# 'return' kullanan fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu çağırıp global değişkeni güncelleyin\n\n\nprint(giris_sayisi)",
    "solution": "giris_sayisi = 0\n\n# 'return' kullanan fonksiyonu burada tanımlayın\ndef giris_ekle(mevcut_sayi):\n    return mevcut_sayi + 1\n\n# Fonksiyonu çağırıp global değişkeni güncelleyin\ngiris_sayisi = giris_ekle(giris_sayisi)\n\nprint(giris_sayisi)"
  },
  {
    "id": "U4_T3_E1",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Varsayılan Değerli Parametre",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Varsayılan Değerli Parametre</h1><p>Bazen bir parametrenin çoğu zaman aynı değerle çağrılacağını bilirsiniz. Bu durumlarda, fonksiyona 'varsayılan bir değer' atayabilirsiniz. Eğer fonksiyon o parametre gönderilmeden çağrılırsa, Python otomatik olarak varsayılan değeri kullanır.</p><p>Sözdizimi: <code>def fonksiyon_adi(parametre=varsayilan_deger):</code></p><pre><code># 'yetki' parametresi gönderilmezse, varsayılan 'guest' olacak\ndef kullanici_olustur(kullanici_adi, yetki=\"guest\"):\n    print(f\"{kullanici_adi} (Yetki: {yetki}) oluşturuldu.\")\n\nkullanici_olustur(\"user1\") # Çıktı: user1 (Yetki: guest)\nkullanici_olustur(\"admin\", \"root\") # Çıktı: admin (Yetki: root)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tarama Zaman Aşımı",
      "description": "<code>port_tara</code> adında bir fonksiyon tanımlayın. <code>ip_adresi</code> (normal) ve <code>timeout</code> (varsayılan değerli) olmak üzere iki parametre alsın. <code>timeout</code> parametresinin varsayılan değeri <code>5</code> saniye (yani <code>timeout=5</code>) olmalıdır. Fonksiyon, <code>f\"{ip_adresi} taranıyor (Timeout: {timeout}s)...\"</code> yazdırsın. Fonksiyonu <code>\"10.0.0.1\"</code> argümanı ile (<code>timeout</code> göndermeden) çağırın.",
      "hint": "<code>def port_tara(ip_adresi, timeout=5): ...</code>"
    },
    "default_code": "# Fonksiyonu varsayılan değerli parametre ile burada tanımlayın\n\n\n# Fonksiyonu 'timeout' göndermeden çağırın\n",
    "solution": "# Fonksiyonu varsayılan değerli parametre ile burada tanımlayın\ndef port_tara(ip_adresi, timeout=5):\n    print(f\"{ip_adresi} taranıyor (Timeout: {timeout}s)...\")\n\n# Fonksiyonu 'timeout' göndermeden çağırın\nport_tara(\"10.0.0.1\")"
  },
  {
    "id": "U4_T3_E2",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Varsayılan Değeri Ezme (Override)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Varsayılan Değeri Ezme</h1><p>Bir parametrenin varsayılan değeri olsa bile, fonksiyonu çağırırken o parametreye farklı bir değer göndererek varsayılan değeri 'ezebilir' (override) edebilirsiniz.</p><pre><code>def kullanici_olustur(kullanici_adi, yetki=\"guest\"):\n    print(f\"{kullanici_adi} (Yetki: {yetki})\")\n\n# Varsayılanı kullanır (guest)\nkullanici_olustur(\"user1\")\n\n# Varsayılanı ezer (admin)\nkullanici_olustur(\"user2\", yetki=\"admin\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zaman Aşımını Değiştir",
      "description": "Bir önceki alıştırmadaki <code>port_tara(ip_adresi, timeout=5)</code> fonksiyonunu (tekrar) tanımlayın. Bu kez fonksiyonu <code>\"192.168.1.1\"</code> IP'si ve <code>timeout=30</code> argümanı ile çağırarak varsayılan 5 değerini ezin.",
      "hint": "<code>port_tara(\"192.168.1.1\", timeout=30)</code> veya <code>port_tara(\"192.168.1.1\", 30)</code>"
    },
    "default_code": "# Fonksiyonu varsayılan değerli parametre ile burada tanımlayın\ndef port_tara(ip_adresi, timeout=5):\n    print(f\"{ip_adresi} taranıyor (Timeout: {timeout}s)...\")\n\n# Fonksiyonu 'timeout' değerini ezerek çağırın\n",
    "solution": "# Fonksiyonu varsayılan değerli parametre ile burada tanımlayın\ndef port_tara(ip_adresi, timeout=5):\n    print(f\"{ip_adresi} taranıyor (Timeout: {timeout}s)...\")\n\n# Fonksiyonu 'timeout' değerini ezerek çağırın\nport_tara(\"192.168.1.1\", timeout=30)"
  },
  {
    "id": "U4_T3_E3",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Parametre Sıralaması",
    "difficulty": "Orta",
    "lesson_html": "<h1>Parametre Sıralaması</h1><p>Fonksiyon tanımlarken <strong>çok önemli bir kural</strong> vardır: Önce normal (varsayılan değeri olmayan) parametreler yazılır, *sonra* varsayılan değerli parametreler yazılır.</p><pre><code># GEÇERLİ\ndef test(ip, port=80):\n    pass\n\n# GEÇERSİZ (Sözdizimi Hatası)\ndef test(port=80, ip):\n    pass</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hatalı Sıralama",
      "description": "Aşağıdaki <code>log_yaz</code> fonksiyon tanımı, varsayılan değerli parametre (<code>seviye=\"INFO\"</code>) normal parametreden (<code>mesaj</code>) önce geldiği için <code>SyntaxError</code> vermektedir. Fonksiyon tanım satırını, parametrelerin yerini değiştirerek düzeltin.",
      "hint": "<code>seviye=\"INFO\"</code> ve <code>mesaj</code>'ın yerini değiştirin: <code>(mesaj, seviye=\"INFO\")</code>"
    },
    "default_code": "# Bu satırı düzeltin\ndef log_yaz(seviye=\"INFO\", mesaj):\n    print(f\"[{seviye}] {mesaj}\")\n\nlog_yaz(\"Bağlantı kuruldu\")",
    "solution": "# Bu satırı düzeltin\ndef log_yaz(mesaj, seviye=\"INFO\"):\n    print(f\"[{seviye}] {mesaj}\")\n\nlog_yaz(\"Bağlantı kuruldu\")"
  },
  {
    "id": "U4_T3_E4",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Sınırsız Konumsal Argüman (*args)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sınırsız Argüman: *args</h1><p>Bazen bir fonksiyonun kaç tane argüman alacağını bilemezsiniz (örn: 1 IP'yi de, 10 IP'yi de tarayabilmeli). Bu durumda parametrenin başına <code>*</code> (yıldız) koyarız. (Genellikle <code>*args</code> olarak adlandırılır).</p><p>Python, bu <code>*args</code>'a gönderilen tüm *konumsal* argümanları alır ve onları bir <strong>demet (tuple)</strong> içine koyar.</p><pre><code>def hepsini_yazdir(*args):\n    print(f\"Alınan argümanlar: {args}\")\n    for arg in args:\n        print(arg)\n\nhepsini_yazdir(1, \"merhaba\", True)</code></pre><p>Çıktı:<br><code>Alınan argümanlar: (1, 'merhaba', True)</code><br><code>1</code><br><code>merhaba</code><br><code>True</code></p>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesi Tara",
      "description": "<code>ip_tara</code> adında bir fonksiyon tanımlayın. Bu fonksiyon <code>*ip_listesi</code> parametresi alarak sınırsız sayıda IP adresi alabilmelidir. Fonksiyonun içinde, <code>ip_listesi</code> demeti üzerinde <code>for</code> döngüsü ile gezin ve her bir <code>ip</code>'yi <code>f\"{ip} taranıyor...\"</code> formatında yazdırın. Fonksiyonu üç IP adresi (<code>\"1.1.1.1\"</code>, <code>\"2.2.2.2\"</code>, <code>\"3.3.3.3\"</code>) ile çağırın.",
      "hint": "<code>def ip_tara(*ip_listesi): ... for ip in ip_listesi: ...</code> ... <code>ip_tara(\"1.1.1.1\", \"2.2.2.2\", \"3.3.3.3\")</code>"
    },
    "default_code": "# '*args' kullanan fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu 3 argüman ile çağırın\n",
    "solution": "# '*args' kullanan fonksiyonu burada tanımlayın\ndef ip_tara(*ip_listesi):\n    print(f\"Toplam {len(ip_listesi)} IP taranacak.\")\n    for ip in ip_listesi:\n        print(f\"{ip} taranıyor...\")\n\n# Fonksiyonu 3 argüman ile çağırın\nip_tara(\"1.1.1.1\", \"2.2.2.2\", \"3.3.3.3\")"
  },
  {
    "id": "U4_T3_E5",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "*args ve Normal Parametre",
    "difficulty": "Orta",
    "lesson_html": "<h1>*args ve Normal Parametre</h1><p><code>*args</code>, normal parametrelerle birlikte kullanılabilir. Kural olarak, <code>*args</code> *her zaman* normal parametrelerden *sonra* tanımlanır (tıpkı varsayılan değerliler gibi).</p><pre><code># 'hedef' normal, '*portlar' geri kalan her şeydir\ndef tara(hedef_ip, *portlar):\n    print(f\"Hedef: {hedef_ip}\")\n    print(f\"Portlar: {portlar}\")\n\ntara(\"192.168.1.1\", 80, 443, 22)</code></pre><p>Çıktı:<br><code>Hedef: 192.168.1.1</code><br><code>Portlar: (80, 443, 22)</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyetleri Raporla",
      "description": "<code>zafiyet_raporla</code> adında bir fonksiyon tanımlayın. İlk parametresi <code>hedef_sistem</code> (normal), ikincisi <code>*zafiyetler</code> (args) olmalıdır. Fonksiyon <code>f\"{hedef_sistem} için bulunan zafiyetler: {zafiyetler}\"</code> yazdırmalıdır. Fonksiyonu <code>\"Server-1\"</code> (hedef) ve <code>\"CVE-1\"</code>, <code>\"CVE-2\"</code> (zafiyetler) argümanlarıyla çağırın.",
      "hint": "<code>def zafiyet_raporla(hedef_sistem, *zafiyetler): ...</code>"
    },
    "default_code": "# Fonksiyonu (normal + *args) burada tanımlayın\n\n\n# Fonksiyonu çağırın\n",
    "solution": "# Fonksiyonu (normal + *args) burada tanımlayın\ndef zafiyet_raporla(hedef_sistem, *zafiyetler):\n    print(f\"{hedef_sistem} için bulunan zafiyetler: {zafiyetler}\")\n\n# Fonksiyonu çağırın\nzafiyet_raporla(\"Server-1\", \"CVE-1\", \"CVE-2\")"
  },
  {
    "id": "U4_T3_E6",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Liste Gönderme (Unpacking *)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Liste 'Açma' (Unpacking *)</h1><p><code>*args</code> alan bir fonksiyona elinizdeki bir listeyi veya demeti göndermek isterseniz, listeyi doğrudan gönderemezsiniz (tek bir argüman olarak algılanır).</p><p>Listeyi 'açmak' (unpack) ve içindekileri ayrı ayrı argümanlar olarak göndermek için, listeyi çağırırken de başına <code>*</code> koyarsınız.</p><pre><code>def topla(*sayilar):\n    return sum(sayilar)\n\nliste = [10, 20, 30]\n# topla(liste) # HATA VERİR\n\n# Listeyi 'aç' ve (10, 20, 30) olarak gönder\ntopla(*liste) # Bu, topla(10, 20, 30) ile aynıdır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Listesini Aç",
      "description": "<code>portlari_yazdir(*portlar)</code> adında <code>*args</code> alan bir fonksiyon verilmiştir. <code>taranacak_portlar</code> adında bir liste tanımlanmıştır. Bu <i>listeyi</i> <code>*</code> operatörünü kullanarak 'açarak' <code>portlari_yazdir</code> fonksiyonuna gönderin.",
      "hint": "<code>portlari_yazdir(*taranacak_portlar)</code>"
    },
    "default_code": "def portlari_yazdir(*portlar):\n    print(f\"Taranan portlar: {portlar}\")\n\ntaranacak_portlar = [80, 443, 8080]\n\n# Listeyi '*' kullanarak 'açarak' fonksiyona gönderin\n",
    "solution": "def portlari_yazdir(*portlar):\n    print(f\"Taranan portlar: {portlar}\")\n\ntaranacak_portlar = [80, 443, 8080]\n\n# Listeyi '*' kullanarak 'açarak' fonksiyona gönderin\nportlari_yazdir(*taranacak_portlar)"
  },
  {
    "id": "U4_T3_E7",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Sınırsız İsimli Argüman (**kwargs)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sınırsız İsimli Argüman: **kwargs</h1><p><code>*args</code> konumsal argümanları (<code>1, 2, 3</code>) toplarken, <code>**</code> (çift yıldız) *isimlendirilmiş* (keyword) argümanları (<code>isim=\"Ali\", yas=30</code>) toplar. (Genellikle <code>**kwargs</code> olarak adlandırılır).</p><p>Python, <code>**kwargs</code>'a gönderilen tüm bu anahtar=değer çiftlerini alır ve onları bir <strong>sözlük (dictionary)</strong> içine koyar.</p><pre><code>def profil_olustur(**kwargs):\n    print(f\"Alınan bilgiler (sözlük): {kwargs}\")\n    if \"kullanici_adi\" in kwargs:\n        print(f\"Merhaba {kwargs['kullanici_adi']}\")\n\nprofil_olustur(kullanici_adi=\"admin\", id=101, aktif=True)</code></pre><p>Çıktı:<br><code>Alınan bilgiler (sözlük): {'kullanici_adi': 'admin', 'id': 101, 'aktif': True}</code><br><code>Merhaba admin</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Cihaz Envanteri",
      "description": "<code>cihaz_ekle</code> adında <code>**cihaz_bilgileri</code> parametresi alan bir fonksiyon tanımlayın. Bu fonksiyon, aldığı <code>cihaz_bilgileri</code> sözlüğünü doğrudan konsola yazdırmalıdır. Fonksiyonu <code>ip=\"10.1.1.1\"</code>, <code>model=\"Router-X\"</code> ve <code>lokasyon=\"Kat-1\"</code> argümanlarıyla çağırın.",
      "hint": "<code>def cihaz_ekle(**cihaz_bilgileri): ... print(cihaz_bilgileri)</code> ... <code>cihaz_ekle(ip=..., model=...)</code>"
    },
    "default_code": "# '**kwargs' kullanan fonksiyonu burada tanımlayın\n\n\n# Fonksiyonu 3 isimlendirilmiş argüman ile çağırın\n",
    "solution": "# '**kwargs' kullanan fonksiyonu burada tanımlayın\ndef cihaz_ekle(**cihaz_bilgileri):\n    print(cihaz_bilgileri)\n\n# Fonksiyonu 3 isimlendirilmiş argüman ile çağırın\ncihaz_ekle(ip=\"10.1.1.1\", model=\"Router-X\", lokasyon=\"Kat-1\")"
  },
  {
    "id": "U4_T3_E8",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "**kwargs Üzerinde Döngü",
    "difficulty": "Orta",
    "lesson_html": "<h1>**kwargs Üzerinde Döngü</h1><p><code>**kwargs</code> bir sözlük olduğu için, üzerinde <code>.items()</code> metodunu kullanarak <code>for</code> döngüsü ile gezinebilirsiniz. Bu, alınan tüm bilgileri formatlamanın harika bir yoludur.</p><pre><code>def raporla(**detaylar):\n    print(\"--- Rapor Detayları ---\")\n    for anahtar, deger in detaylar.items():\n        print(f\"{anahtar.upper()}: {deger}\")\n\nraporla(zafiyet=\"SQLi\", risk=\"Yüksek\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Bilgilerini Yazdır",
      "description": "<code>kullanici_raporu</code> adında <code>**bilgiler</code> alan bir fonksiyon tanımlayın. Fonksiyonun içinde, <code>bilgiler</code> sözlüğünün <code>.items()</code> metodunu kullanarak bir <code>for</code> döngüsü kurun. Her <code>anahtar</code> ve <code>deger</code>'i <code>f\"{anahtar}: {deger}\"</code> formatında yazdırın. Fonksiyonu <code>kullanici=\"root\"</code> ve <code>durum=\"Aktif\"</code> argümanlarıyla çağırın.",
      "hint": "<code>def ...(**bilgiler): ... for anahtar, deger in bilgiler.items(): ... print(...)</code>"
    },
    "default_code": "# Fonksiyonu ve içindeki .items() döngüsünü burada tanımlayın\n\n\n# Fonksiyonu çağırın\n",
    "solution": "# Fonksiyonu ve içindeki .items() döngüsünü burada tanımlayın\ndef kullanici_raporu(**bilgiler):\n    for anahtar, deger in bilgiler.items():\n        print(f\"{anahtar}: {deger}\")\n\n# Fonksiyonu çağırın\nkullanici_raporu(kullanici=\"root\", durum=\"Aktif\")"
  },
  {
    "id": "U4_T3_E9",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Sözlük 'Açma' (**)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Sözlük 'Açma' (Unpacking **)</h1><p><code>*</code>'ın listeleri açması gibi, <code>**</code> (çift yıldız) da bir sözlüğü 'açarak' içindeki anahtar-değer çiftlerini isimlendirilmiş argümanlar olarak fonksiyona gönderir.</p><pre><code>def log_yaz(ip, mesaj, seviye=\"INFO\"):\n    print(f\"[{seviye}] {ip}: {mesaj}\")\n\nlog_detaylari = {\n    \"ip\": \"127.0.0.1\",\n    \"mesaj\": \"Giriş yapıldı\"\n}\n\n# Sözlüğü 'aç' ve ip=\"...\", mesaj=\"...\" olarak gönder\nlog_yaz(**log_detaylari)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sözlükten Raporla",
      "description": "<code>rapor_olustur(ip, zafiyet, skor)</code> adında normal bir fonksiyon verilmiştir. <code>zafiyet_bilgisi</code> adında bir <i>sözlük</i> tanımlanmıştır. <code>**</code> operatörünü kullanarak bu sözlüğü 'açın' ve <code>rapor_olustur</code> fonksiyonuna isimlendirilmiş argümanlar olarak gönderin.",
      "hint": "<code>rapor_olustur(**zafiyet_bilgisi)</code>"
    },
    "default_code": "def rapor_olustur(ip, zafiyet, skor):\n    print(f\"IP: {ip} - Zafiyet: {zafiyet} - Skor: {skor}\")\n\nzafiyet_bilgisi = {\n    \"ip\": \"192.168.1.5\",\n    \"zafiyet\": \"XSS\",\n    \"skor\": 8.5\n}\n\n# Sözlüğü '**' kullanarak 'açarak' fonksiyona gönderin\n",
    "solution": "def rapor_olustur(ip, zafiyet, skor):\n    print(f\"IP: {ip} - Zafiyet: {zafiyet} - Skor: {skor}\")\n\nzafiyet_bilgisi = {\n    \"ip\": \"192.168.1.5\",\n    \"zafiyet\": \"XSS\",\n    \"skor\": 8.5\n}\n\n# Sözlüğü '**' kullanarak 'açarak' fonksiyona gönderin\nrapor_olustur(**zafiyet_bilgisi)"
  },
  {
    "id": "U4_T3_E10",
    "unit_id": 4,
    "topic_id": 3,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "İleri Fonksiyon Parametreleri",
    "title": "Hepsi Bir Arada (Sıralama)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Tüm Parametrelerin Sıralaması</h1><p>Bir fonksiyonda tüm parametre türlerini kullanıyorsanız, <strong>uymak zorunda olduğunuz</strong> katı bir sıralama vardır:</p><ol><li>Normal Parametreler (<code>ip</code>)</li><li>Varsayılan Değerli Parametreler (<code>port=80</code>)</li><li>Sınırsız Konumsal Argümanlar (<code>*args</code>)</li><li>Sınırsız İsimli Argümanlar (<code>**kwargs</code>)</li></ol><pre><code>def mega_fonksiyon(ip, port=80, *args, **kwargs):\n    print(f\"IP: {ip}\")\n    print(f\"Port: {port}\")\n    print(f\"Args: {args}\")\n    print(f\"Kwargs: {kwargs}\")\n\nmega_fonksiyon(\"1.1.1.1\", 90, \"deneme1\", \"deneme2\", kullanici=\"admin\", seviye=\"kritik\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hatalı Sıralamayı Düzelt",
      "description": "Aşağıdaki <code>hatali_fonksiyon</code> tanımı, <code>*args</code>'ı varsayılan değerli parametreden (<code>timeout=10</code>) *önce* tanımladığı için <code>SyntaxError</code> vermektedir. Parametrelerin yerini (<code>*args</code> ve <code>timeout=10</code>) doğru sıralamaya (önce varsayılan, sonra *args) [DÜZELTME: Önce normal, sonra varsayılan, sonra *args olmalı, ama *args'tan sonra varsayılanlar 'keyword-only' olur. En genel kural: `args`, `*args`, `kwargs`tır. Varsayılanlar `args`tan sonra, `*args`tan önce gelir.]<br><b>Düzeltme:</b> Sıralama şöyledir: 1. Normal, 2. Varsayılanlar, 3. <code>*args</code>, 4. <code>**kwargs</code>. Aşağıdaki kodda <code>timeout=10</code> (varsayılan) ile <code>*komutlar</code> (*args) yanlış yerdedir. Düzeltin.",
      "hint": "Doğru sıralama: <code>(hedef_ip, timeout=10, *komutlar)</code>"
    },
    "default_code": "# Bu satırdaki sıralamayı düzeltin\ndef tam_tarama(hedef_ip, *komutlar, timeout=10):\n    print(f\"Hedef: {hedef_ip}\")\n    print(f\"Zaman Aşımı: {timeout}\")\n    print(f\"Komutlar: {komutlar}\")\n\ntam_tarama(\"10.0.0.1\", \"nmap -sV\", \"dirb\", timeout=30)",
    "solution": "# Bu satırdaki sıralamayı düzeltin\ndef tam_tarama(hedef_ip, timeout=10, *komutlar):\n    print(f\"Hedef: {hedef_ip}\")\n    print(f\"Zaman Aşımı: {timeout}\")\n    print(f\"Komutlar: {komutlar}\")\n\n# *args'tan sonraki parametreler 'keyword' olarak çağrılmalı\ntam_tarama(\"10.0.0.1\", \"nmap -sV\", \"dirb\", timeout=30)"
  },
  {
    "id": "U4_T4_E1",
    "unit_id": 4,
    "topic_id": 4,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Lambda Fonksiyonları",
    "title": "Lambda Fonksiyonu Nedir?",
    "difficulty": "Orta",
    "lesson_html": "<h1>Lambda Fonksiyonları (İsimsiz)</h1><p>Lambda fonksiyonları, <code>def</code> kullanmadan, tek satırda tanımlanan küçük, isimsiz fonksiyonlardır. Sadece tek bir ifade (expression) içerebilirler ve bu ifadenin sonucunu otomatik olarak <code>return</code> ederler.</p><p>Sözdizimi: <code>lambda parametreler: ifade</code></p><p><b>Normal Fonksiyon:</b></p><pre><code>def iki_kati(x):\n    return x * 2</code></pre><p><b>Lambda Fonksiyonu (Eşdeğeri):</b></p><pre><code># 'iki_kati' değişkenine bir lambda fonksiyonu atadık\niki_kati_lambda = lambda x: x * 2\n\nprint(iki_kati_lambda(5)) # Çıktı: 10</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Toplama Lambdası",
      "description": "<code>lambda</code> sözdizimini kullanarak, <code>a</code> ve <code>b</code> adında iki parametre alan ve bu iki parametrenin toplamını (<code>a + b</code>) döndüren bir lambda fonksiyonu oluşturun. Bu fonksiyonu <code>topla</code> adında bir değişkene atayın ve <code>topla(10, 5)</code> şeklinde çağırarak sonucunu yazdırın.",
      "hint": "<code>topla = lambda a, b: a + b</code>"
    },
    "default_code": "# Lambda fonksiyonunu 'topla' değişkenine burada atayın\n\n\n# Fonksiyonu çağırın ve sonucu yazdırın\n",
    "solution": "# Lambda fonksiyonunu 'topla' değişkenine burada atayın\ntopla = lambda a, b: a + b\n\n# Fonksiyonu çağırın ve sonucu yazdırın\nprint(topla(10, 5))"
  },
  {
    "id": "U4_T4_E2",
    "unit_id": 4,
    "topic_id": 4,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Lambda Fonksiyonları",
    "title": "Lambda ve 'if-else' (Ternary)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Lambda ve 'if-else' (Ternary)</h1><p>Lambda fonksiyonları, tek satırlık <code>if-else</code> (ternary operator) yapısını destekler. Bu, basit koşullu işlemler için kullanışlıdır.</p><p>Sözdizimi: <code>lambda x: (eğer_dogruysa if koşul else eğer_yanlissa)</code></p><pre><code># Normal Fonksiyon:\ndef cift_mi(x):\n    if x % 2 == 0:\n        return \"Çift\"\n    else:\n        return \"Tek\"\n\n# Lambda (Eşdeğeri):\ncift_mi_lambda = lambda x: \"Çift\" if x % 2 == 0 else \"Tek\"\n\nprint(cift_mi_lambda(5)) # Çıktı: Tek</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Sınıflandırma Lambdası",
      "description": "<code>port_siniflandir</code> adında bir lambda fonksiyonu oluşturun. <code>port</code> parametresi alsın. Eğer <code>port < 1024</code> ise <code>\"Yetkili\"</code> stringini, değilse (<code>else</code>) <code>\"Kullanıcı\"</code> stringini döndürsün. <code>80</code> portu ile çağırıp sonucunu yazdırın.",
      "hint": "<code>... = lambda port: \"Yetkili\" if port < 1024 else \"Kullanıcı\"</code>"
    },
    "default_code": "# Lambda fonksiyonunu burada tanımlayın\n\n\n# 80 portu ile çağırıp yazdırın\n",
    "solution": "# Lambda fonksiyonunu burada tanımlayın\nport_siniflandir = lambda port: \"Yetkili\" if port < 1024 else \"Kullanıcı\"\n\n# 80 portu ile çağırıp yazdırın\nprint(port_siniflandir(80))"
  },
  {
    "id": "U4_T4_E3",
    "unit_id": 4,
    "topic_id": 4,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Lambda Fonksiyonları",
    "title": "Lambda'nın Asıl Gücü: sort()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Lambda'nın Kullanım Alanı: sort()</h1><p>Lambda'lar genellikle <code>.sort()</code> veya <code>sorted()</code> fonksiyonlarının <code>key</code> parametresi olarak kullanılır. Bu, listeyi hangi kurala göre sıralayacağınızı hızlıca belirtmenizi sağlar.</p><p>Örneğin, bir demet (tuple) listesini, demetin *ikinci* elemanına (indeks 1) göre sıralamak:</p><pre><code>liste = [(\"a\", 3), (\"b\", 1), (\"c\", 2)]\n\n# Her 'x' demeti için (x[1]'i anahtar olarak kullan)\nliste.sort(key=lambda x: x[1])\n\nprint(liste) # Çıktı: [('b', 1), ('c', 2), ('a', 3)]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP'leri Son Oktet'e Göre Sırala",
      "description": "<code>ip_listesi</code> verilmiştir. <code>.sort(key=...)</code> metodunu ve bir <code>lambda</code> fonksiyonunu kullanarak, bu listeyi IP adreslerinin <strong>son karakterine</strong> (<code>ip[-1]</code>) göre sıralayın ve sıralanmış listeyi yazdırın.",
      "hint": "<code>ip_listesi.sort(key=lambda ip: ip[-1])</code>"
    },
    "default_code": "ip_listesi = [\"192.168.1.5\", \"192.168.1.1\", \"192.168.1.3\"]\n\n# Listeyi 'key' ve 'lambda' kullanarak burada sıralayın\n\n\nprint(ip_listesi)",
    "solution": "ip_listesi = [\"192.168.1.5\", \"192.168.1.1\", \"192.168.1.3\"]\n\n# Listeyi 'key' ve 'lambda' kullanarak burada sıralayın\nip_listesi.sort(key=lambda ip: ip[-1])\n\nprint(ip_listesi)"
  },
  {
    "id": "U4_T4_E4",
    "unit_id": 4,
    "topic_id": 4,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Lambda Fonksiyonları",
    "title": "Lambda ve Sözlük Sıralama",
    "difficulty": "Zor",
    "lesson_html": "<h1>Lambda ve Sözlük Sıralama</h1><p>Lambda, bir sözlük listesini, sözlüklerin içindeki belirli bir 'anahtarın' (key) 'değerine' (value) göre sıralamak için çok güçlüdür.</p><pre><code>kullanicilar = [\n    {\"isim\": \"admin\", \"id\": 1},\n    {\"isim\": \"guest\", \"id\": 100},\n    {\"isim\": \"root\", \"id\": 0}\n]\n\n# 'id' anahtarının değerine göre sırala\nkullanicilar.sort(key=lambda kullanici: kullanici[\"id\"])\n\nprint(kullanicilar)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyetleri Riske Göre Sırala",
      "description": "<code>zafiyet_listesi</code> (sözlük listesi) verilmiştir. <code>.sort(key=...)</code> ve <code>lambda</code> kullanarak bu listeyi sözlüklerin içindeki <code>\"risk\"</code> anahtarının değerine (büyükten küçüğe) göre sıralayın. (Not: <code>reverse=True</code> parametresini de eklemeniz gerekecek).",
      "hint": "<code>zafiyet_listesi.sort(key=lambda z: z[\"risk\"], reverse=True)</code>"
    },
    "default_code": "zafiyet_listesi = [\n    {\"kod\": \"CVE-1\", \"risk\": 7.5},\n    {\"kod\": \"CVE-2\", \"risk\": 9.8},\n    {\"kod\": \"CVE-3\", \"risk\": 5.0}\n]\n\n# Listeyi 'risk' değerine göre büyükten küçüğe sıralayın\n\n\nprint(zafiyet_listesi)",
    "solution": "zafiyet_listesi = [\n    {\"kod\": \"CVE-1\", \"risk\": 7.5},\n    {\"kod\": \"CVE-2\", \"risk\": 9.8},\n    {\"kod\": \"CVE-3\", \"risk\": 5.0}\n]\n\n# Listeyi 'risk' değerine göre büyükten küçüğe sıralayın\nzafiyet_listesi.sort(key=lambda z: z[\"risk\"], reverse=True)\n\nprint(zafiyet_listesi)"
  },
  {
    "id": "U4_T4_E5",
    "unit_id": 4,
    "topic_id": 4,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Lambda Fonksiyonları",
    "title": "Lambda ve 'map()' Fonksiyonu",
    "difficulty": "Zor",
    "lesson_html": "<h1>Lambda ve map()</h1><p><code>map(fonksiyon, liste)</code>, bir listedeki her elemana belirli bir fonksiyonu uygulayan ve sonuçları döndüren bir yapıdır. Lambda, bu 'fonksiyon'u hızlıca tanımlamak için kullanılır.</p><p><code>map()</code> bir 'map objesi' döndürür, bunu <code>list()</code> fonksiyonu ile listeye çevirmeniz gerekir.</p><pre><code>sayilar = [1, 2, 3, 4]\n\n# Her sayının karesini al\nkareler = list(map(lambda x: x*x, sayilar))\n\nprint(kareler) # Çıktı: [1, 4, 9, 16]</code></pre><p>Bu, <code>[x*x for x in sayilar]</code> (List Comprehension) ile aynı işi yapar, ancak bazen <code>map</code> daha okunaklı olabilir.</p>",
    "challenge": {
      "title": "Meydan Okuma: IP'leri Formatla",
      "description": "<code>ip_listesi</code> verilmiştir. <code>map()</code> ve <code>lambda</code> kullanarak, listedeki her bir <code>ip</code>'yi <code>f\"IP: {ip}\"</code> formatına dönüştüren yeni bir liste (<code>formatli_ipler</code>) oluşturun. Sonucu <code>list()</code> ile listeye çevirmeyi unutmayın.",
      "hint": "<code>formatli_ipler = list(map(lambda ip: f\"IP: {ip}\", ip_listesi))</code>"
    },
    "default_code": "ip_listesi = [\"1.1.1.1\", \"8.8.8.8\"]\n\n# 'map' ve 'lambda' kullanarak listeyi dönüştürün\n\n\nprint(formatli_ipler)",
    "solution": "ip_listesi = [\"1.1.1.1\", \"8.8.8.8\"]\n\n# 'map' ve 'lambda' kullanarak listeyi dönüştürün\nformatli_ipler = list(map(lambda ip: f\"IP: {ip}\", ip_listesi))\n\nprint(formatli_ipler)"
  },
  {
    "id": "U4_T5_E1",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Modül İçeri Aktarma (import)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Modül İçeri Aktarma (import)</h1><p>Modüller, içinde kullanışlı fonksiyonlar ve değişkenler barındıran <code>.py</code> dosyalarıdır. Python'un 'Standart Kütüphanesi', <code>import</code> anahtar kelimesiyle çağırabileceğiniz yüzlerce modül içerir.</p><p>Örneğin, <code>math</code> modülü matematiksel işlemler (karekök, üs alma vb.) içerir. Bir modülü <code>import</code> ettiğinizde, içindeki fonksiyonlara <code>modul_adi.fonksiyon_adi()</code> şeklinde erişirsiniz.</p><pre><code>import math\n\n# math modülünün içindeki sqrt (karekök) fonksiyonunu kullan\nkok = math.sqrt(16)\nprint(kok) # Çıktı: 4.0</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Matematik Modülü",
      "description": "<code>math</code> modülünü <code>import</code> edin. Ardından <code>math.pow(taban, us)</code> fonksiyonunu kullanarak <code>2</code>'nin <code>8</code>. kuvvetini (<code>2**8</code>) hesaplayın ve sonucu (<code>256.0</code>) yazdırın.",
      "hint": "<code>import math</code> yazın, sonra <code>print(math.pow(2, 8))</code>"
    },
    "default_code": "# math modülünü burada içeri aktarın\n\n\n# 2'nin 8. kuvvetini math.pow() ile hesaplayıp yazdırın\n",
    "solution": "import math\n\nprint(math.pow(2, 8))"
  },
  {
    "id": "U4_T5_E2",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Modül Kullanımı (math)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Modül Kullanımı</h1><p><code>import math</code> dedikten sonra, <code>math</code> modülündeki tüm fonksiyonları <code>math.</code> önekiyle kullanabilirsiniz. Örneğin <code>math.floor()</code> (aşağı yuvarla) veya <code>math.ceil()</code> (yukarı yuvarla).</p><pre><code>import math\n\nprint(math.floor(3.9)) # Çıktı: 3\nprint(math.ceil(3.1))  # Çıktı: 4</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Aşağı Yuvarla",
      "description": "<code>math</code> modülünü <code>import</code> edin. <code>math.floor()</code> fonksiyonunu kullanarak <code>9.8</code> olan risk skorunu aşağı yuvarlayın ve sonucu yazdırın (Çıktı <code>9</code> olmalı).",
      "hint": "<code>import math</code> ... <code>print(math.floor(9.8))</code>"
    },
    "default_code": "# math modülünü burada içeri aktarın\n\n\n# 9.8 sayısını math.floor() ile aşağı yuvarlayın\n",
    "solution": "import math\n\nprint(math.floor(9.8))"
  },
  {
    "id": "U4_T5_E3",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Rastgele Sayılar (random)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'random' Modülü</h1><p><code>random</code> modülü, rastgele sayılar üretmek, listeden rastgele eleman seçmek gibi işlemler için kullanılır. Kriptografi ve simülasyonlar için önemlidir.</p><p><code>random.randint(a, b)</code> fonksiyonu, <code>a</code> ve <code>b</code> (dahil) arasında rastgele bir tamsayı döndürür.</p><pre><code>import random\n\n# 1 ve 6 (dahil) arasında rastgele bir zar atışı\nzar = random.randint(1, 6)\nprint(zar)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Rastgele Port",
      "description": "<code>random</code> modülünü <code>import</code> edin. <code>random.randint()</code> fonksiyonunu kullanarak <code>1024</code> ile <code>9999</code> (ikisi de dahil) arasında rastgele bir 'kullanıcı portu' numarası seçin ve yazdırın. (Çıktı her çalıştırmada farklı olacaktır).",
      "hint": "<code>import random</code> ... <code>print(random.randint(1024, 9999))</code>"
    },
    "default_code": "# random modülünü burada içeri aktarın\n\n\n# 1024 ile 9999 arasında rastgele bir port seçin\n",
    "solution": "import random\n\nprint(random.randint(1024, 9999))"
  },
  {
    "id": "U4_T5_E4",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Rastgele Seçim (random.choice)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'random.choice()'</h1><p><code>random.choice(liste)</code> fonksiyonu, verdiğiniz bir listenin içinden rastgele bir eleman seçer.</p><pre><code>import random\n\nkullanicilar = [\"admin\", \"guest\", \"root\"]\nkazanan = random.choice(kullanicilar)\nprint(kazanan)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Rastgele IP Tara",
      "description": "<code>random</code> modülünü <code>import</code> edin. <code>ip_listesi</code> verilmiştir. <code>random.choice()</code> fonksiyonunu kullanarak bu listeden rastgele bir IP adresi seçin ve <code>secilen_ip</code> değişkenine atayıp yazdırın.",
      "hint": "<code>import random</code> ... <code>secilen_ip = random.choice(ip_listesi)</code>"
    },
    "default_code": "import random\n\nip_listesi = [\"10.0.0.1\", \"192.168.1.1\", \"8.8.8.8\"]\n\n# Listeden rastgele bir IP seçin ve yazdırın\n",
    "solution": "import random\n\nip_listesi = [\"10.0.0.1\", \"192.168.1.1\", \"8.8.8.8\"]\n\nsecilen_ip = random.choice(ip_listesi)\nprint(secilen_ip)"
  },
  {
    "id": "U4_T5_E5",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "'from ... import ...' Sözdizimi",
    "difficulty": "Orta",
    "lesson_html": "<h1>'from ... import ...'</h1><p>Bazen modülün tamamına değil, sadece içindeki bir veya iki fonksiyona ihtiyacınız olur. <code>from</code> anahtar kelimesi bunu sağlar.</p><p>Bu yöntemin avantajı, fonksiyonu çağırırken modül adını (örn: <code>math.</code>) yazmanıza gerek kalmamasıdır.</p><pre><code># math modülünden SADECE sqrt fonksiyonunu al\nfrom math import sqrt\n\n# Artık 'math.sqrt' değil, doğrudan 'sqrt' kullanılır\nkok = sqrt(25)\nprint(kok) # Çıktı: 5.0</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'from math import'",
      "description": "<code>math</code> modülünden <code>pow</code> ve <code>sqrt</code> fonksiyonlarını <code>from ... import ...</code> sözdizimini kullanarak içeri aktarın. Ardından <code>pow(3, 2)</code> (3'ün karesi) sonucunu yazdırın.",
      "hint": "<code>from math import pow, sqrt</code>"
    },
    "default_code": "# math modülünden pow ve sqrt'yi burada içeri aktarın\n\n\n# 'pow' fonksiyonunu doğrudan kullanarak 3'ün karesini yazdırın\n",
    "solution": "from math import pow, sqrt\n\nprint(pow(3, 2))"
  },
  {
    "id": "U4_T5_E6",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "'import as' (Takma Ad)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'import ... as ...' (Takma Ad)</h1><p>Modül adları uzun veya karmaşık olduğunda, onlara <code>as</code> anahtar kelimesiyle daha kısa bir 'takma ad' (alias) verebilirsiniz.</p><p>Bu, özellikle <code>pandas as pd</code> veya <code>numpy as np</code> gibi kütüphanelerde çok yaygın bir standarttır.</p><pre><code>import datetime as dt\n\n# 'datetime.datetime.now()' yerine 'dt.datetime.now()' kullanılır\nsu_an = dt.datetime.now()\nprint(su_an)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'random as rnd'",
      "description": "<code>random</code> modülünü <code>rnd</code> takma adıyla (alias) <code>import</code> edin. Ardından <code>rnd</code> takma adını kullanarak <code>rnd.randint(1, 10)</code> fonksiyonunu çağırın ve sonucu yazdırın.",
      "hint": "<code>import random as rnd</code>"
    },
    "default_code": "# random modülünü 'rnd' takma adıyla içeri aktarın\n\n\n# 'rnd' takma adını kullanarak 1-10 arası rastgele sayı yazdırın\n",
    "solution": "import random as rnd\n\nprint(rnd.randint(1, 10))"
  },
  {
    "id": "U4_T5_E7",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "'from ... import ... as ...'",
    "difficulty": "Orta",
    "lesson_html": "<h1>'from ... import ... as ...'</h1><p>Takma adları, <code>from</code> ile birlikte de kullanabilirsiniz. Bu, özellikle başka bir kütüphaneyle aynı ada sahip bir fonksiyonu içeri aktarırken isim çakışmasını önlemek için kullanışlıdır.</p><pre><code># datetime modülünden datetime sınıfını 'dt' olarak al\nfrom datetime import datetime as dt\n\n# Artık 'datetime.datetime.now()' değil, 'dt.now()' kullanılır\nsu_an = dt.now()\nprint(su_an)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'randint as ri'",
      "description": "<code>random</code> modülünden <code>randint</code> fonksiyonunu <code>ri</code> takma adıyla (alias) <code>import</code> edin. Ardından sadece <code>ri(100, 200)</code> yazarak 100-200 arası rastgele bir sayı seçin ve yazdırın.",
      "hint": "<code>from random import randint as ri</code>"
    },
    "default_code": "# randint fonksiyonunu 'ri' takma adıyla içeri aktarın\n\n\n# 'ri' takma adını kullanarak 100-200 arası rastgele sayı yazdırın\n",
    "solution": "from random import randint as ri\n\nprint(ri(100, 200))"
  },
  {
    "id": "U4_T5_E8",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "'datetime' Modülü (Tarih/Zaman)",
    "difficulty": "Orta",
    "lesson_html": "<h1>'datetime' Modülü</h1><p><code>datetime</code> modülü, Python'da tarih ve zamanla ilgili işlemler yapmak için kullanılır. Loglama ve zaman damgaları (timestamp) için hayati öneme sahiptir.</p><p><code>datetime.now()</code>, şu anki tam tarih ve zamanı döndürür.</p><pre><code>import datetime\n\nsu_an = datetime.datetime.now()\nprint(su_an)\nprint(f\"Yıl: {su_an.year}\")\nprint(f\"Saat: {su_an.hour}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Zamanı",
      "description": "<code>datetime</code> modülünü <code>import</code> edin. <code>datetime.datetime.now()</code> fonksiyonunu kullanarak şu anki zamanı <code>simdiki_zaman</code> adlı bir değişkene atayın. Ardından <code>f-string</code> kullanarak <code>f\"LOG ZAMANI: {simdiki_zaman}\"</code> formatında yazdırın.",
      "hint": "<code>import datetime</code> ... <code>simdiki_zaman = datetime.datetime.now()</code>"
    },
    "default_code": "# datetime modülünü içeri aktarın\n\n\n# Şu anki zamanı alın ve yazdırın\n",
    "solution": "import datetime\n\nsimdiki_zaman = datetime.datetime.now()\nprint(f\"LOG ZAMANI: {simdiki_zaman}\")"
  },
  {
    "id": "U4_T5_E9",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Kendi Modülümüz (Simülasyon 1)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Kendi Modülümüz (Simülasyon)</h1><p>Normalde, <code>utils.py</code> adında bir dosya oluşturup içine kendi fonksiyonlarımızı yazabiliriz. Diğer dosyamızdan da <code>import utils</code> diyerek o fonksiyonları çağırabiliriz.</p><p>Bu platformda (Pyodide) ayrı dosyalar oluşturamadığımız için, 'import edilmiş' gibi davranacağız. Aşağıdaki kod, <code>utils.py</code> dosyasının içeriğini temsil etmektedir. Sadece inceleyin, bu alıştırmada bir görev yok.</p><pre><code># --- Bu kodun utils.py dosyasında olduğunu varsay --- \n\ndef ip_dogrula(ip: str) -> bool:\n    \"\"\"IP'nin '192.' ile başlayıp başlamadığını kontrol eder.\"\"\"\n    return ip.startswith(\"192.\")\n\ndef port_dogrula(port: int) -> bool:\n    \"\"\"Portun 'yetkili' olup olmadığını kontrol eder.\"\"\"\n    return port < 1024\n\n# --- utils.py sonu ---</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Modülü İncele",
      "description": "Yukarıdaki ders metninde, <code>ip_dogrula</code> ve <code>port_dogrula</code> adında iki fonksiyon içeren varsayımsal <code>utils.py</code> modülümüzü görüyorsunuz. Bir sonraki alıştırmada bu modülü 'kullanacağız'. Bu alıştırmayı geçmek için <code># İnceledim</code> yazan bir yorum satırı eklemeniz yeterlidir.",
      "hint": "Editöre <code># İnceledim</code> yazın."
    },
    "default_code": "# Bir sonraki alıştırmaya hazırlık\n",
    "solution": "# İnceledim"
  },
  {
    "id": "U4_T5_E10",
    "unit_id": 4,
    "topic_id": 5,
    "unit_name": "Fonksiyonlar ve Modüller",
    "topic_name": "Modüller",
    "title": "Kendi Modülümüz (Simülasyon 2 - Kullanım)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Kendi Modülümüzü Kullanma</h1><p>Bir önceki dersteki <code>utils.py</code> dosyasını <code>import utils</code> ile içeri aktardığımızı varsayalım. Artık o dosyadaki fonksiyonlara <code>utils.fonksiyon_adi()</code> şeklinde erişebiliriz.</p><pre><code># import utils (Bunu varsayıyoruz)\n\nhedef_ip = \"192.168.1.1\"\nhedef_port = 80\n\nif utils.ip_dogrula(hedef_ip) and utils.port_dogrula(hedef_port):\n    print(\"Hedef geçerli\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Modülü Kullan",
      "description": "<code>utils.py</code> modülünün fonksiyonları (<code>ip_dogrula</code>, <code>port_dogrula</code>) sizin için aşağıda hazır tanımlanmıştır (import edilmiş gibi). Bu fonksiyonları kullanarak <code>ip=\"10.0.0.1\"</code> ve <code>port=22</code> değerlerinin <i>ikisinin de</i> (<code>and</code>) geçerli olup olmadığını (yani <code>ip_dogrula</code>'nın <code>True</code> VE <code>port_dogrula</code>'nın <code>True</code> döndürüp döndürmediğini) kontrol edin. Eğer ikisi de geçerliyse <code>\"Tarama Başlatıldı\"</code>, değilse <code>\"Geçersiz Hedef\"</code> yazdırın. (Sonuç 'Geçersiz Hedef' olmalı çünkü IP '192.' ile başlamıyor).",
      "hint": "<code>if ip_dogrula(ip) and port_dogrula(port): ... else: ...</code>"
    },
    "default_code": "# --- 'utils' modülünün içeri aktarıldığını varsay --- \ndef ip_dogrula(ip: str) -> bool:\n    return ip.startswith(\"192.\")\ndef port_dogrula(port: int) -> bool:\n    return port < 1024\n# --- Modül sonu ---\n\nip = \"10.0.0.1\"\nport = 22\n\n# Fonksiyonları kullanarak 'if' bloğunu buraya yazın\n",
    "solution": "# --- 'utils' modülünün içeri aktarıldığını varsay --- \ndef ip_dogrula(ip: str) -> bool:\n    return ip.startswith(\"192.\")\ndef port_dogrula(port: int) -> bool:\n    return port < 1024\n# --- Modül sonu ---\n\nip = \"10.0.0.1\"\nport = 22\n\n# Fonksiyonları kullanarak 'if' bloğunu buraya yazın\nif ip_dogrula(ip) and port_dogrula(port):\n    print(\"Tarama Başlatıldı\")\nelse:\n    print(\"Geçersiz Hedef\")"
  },
  {
    "id": "U5_T1_E1",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Sınıf Tanımlama (class)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Sınıf (Class) Nedir?</h1><p>Nesne Yönelimli Programlama (OOP), kodumuzu 'nesneler' etrafında organize etme yöntemidir. 'Sınıf' (Class), bu nesneleri oluşturmak için kullanılan bir şablon veya kalıptır.</p><p>Örneğin, 'Server' (Sunucu) bir *sınıf* (kalıp) olabilir; 'WebServer' veya 'DatabaseServer' ise bu kalıptan oluşturulmuş *nesneler* (o kalıbın somut örnekleri) olabilir.</p><p>Bir sınıf, <code>class</code> anahtar kelimesiyle ve (PEP 8 standardına göre) 'CamelCase' (her kelimenin ilk harfi büyük) isimlendirmesiyle tanımlanır.</p><pre><code>class Server:\n    pass # Henüz içi boş</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Sınıfı",
      "description": "Siber güvenlik zafiyetlerini temsil etmek için <code>Vulnerability</code> (Zafiyet) adında bir sınıf (class) tanımlayın. Sınıfın içi henüz boş olacağı için <code>pass</code> anahtar kelimesini kullanın.",
      "hint": "<code>class Vulnerability: ... pass</code>"
    },
    "default_code": "# 'Vulnerability' adında bir sınıfı burada tanımlayın\n",
    "solution": "class Vulnerability:\n    pass"
  },
  {
    "id": "U5_T1_E2",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Nesne (Object/Instance) Oluşturma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Nesne (Instance) Oluşturma</h1><p>Bir sınıftan (kalıptan) somut bir 'nesne' (örnek/instance) oluşturmak için, sınıfın adını bir fonksiyon çağırır gibi <code>()</code> ile çağırırsınız.</p><pre><code>class Server:\n    pass\n\n# 'Server' sınıfından 'web_server' adında bir nesne oluştur\nweb_server = Server()\n\nprint(web_server)\n# Çıktı: <__main__.Server object at 0x...> (bellekteki adresi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Nesnesi",
      "description": "<code>Kullanici</code> adında (içi boş <code>pass</code>) bir sınıf tanımlayın. Ardından, bu sınıftan <code>admin_kullanici</code> adında bir nesne (instance) oluşturun ve bu nesneyi yazdırın.",
      "hint": "Önce <code>class Kullanici: pass</code> tanımlayın, sonra <code>admin_kullanici = Kullanici()</code>"
    },
    "default_code": "# Sınıfı burada tanımlayın\n\n\n# Nesneyi burada oluşturun ve yazdırın\n",
    "solution": "class Kullanici:\n    pass\n\nadmin_kullanici = Kullanici()\nprint(admin_kullanici)"
  },
  {
    "id": "U5_T1_E3",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Yapıcı Metod (__init__)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Yapıcı Metod: __init__()</h1><p>Bir nesne oluşturulduğu anda (yani <code>Server()</code> çağrıldığı anda) otomatik olarak çalıştırılan özel bir metod vardır: <code>__init__</code> (Constructor/Yapıcı Metod).</p><p><code>__init__</code> metodu, nesnenin başlangıç ayarlarını (niteliklerini/attributes) yapmak için kullanılır. Başı ve sonu çift alt çizgili (dunder - double underscore) metodlar Python için özel anlam taşır.</p><p>Sınıf içindeki tüm metodlar (fonksiyonlar) ilk parametre olarak <code>self</code> (kendisi) almalıdır. <code>self</code>, o an oluşturulan nesnenin *kendisini* temsil eder.</p><pre><code>class Server:\n    # Nesne oluşturulurken bu metod otomatik çalışır\n    def __init__(self):\n        print(\"Server nesnesi oluşturuldu!\")\n\nweb_server = Server() # Çıktı: Server nesnesi oluşturuldu!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Oluşturuldu",
      "description": "<code>Vulnerability</code> sınıfını tanımlayın. İçine <code>__init__(self)</code> metodunu ekleyin. Bu metod, çağrıldığında <code>\"Yeni zafiyet kaydı açıldı\"</code> yazdırmalıdır. Ardından <code>Vulnerability()</code> sınıfından bir nesne oluşturarak mesajın yazdırılmasını tetikleyin.",
      "hint": "<code>class ...: ... def __init__(self): ... print(...)</code> ... <code>v1 = Vulnerability()</code>"
    },
    "default_code": "class Vulnerability:\n    # __init__ metodunu buraya ekleyin\n    pass\n\n# Nesneyi burada oluşturun\n",
    "solution": "class Vulnerability:\n    def __init__(self):\n        print(\"Yeni zafiyet kaydı açıldı\")\n\n# Nesneyi burada oluşturun\nv1 = Vulnerability()"
  },
  {
    "id": "U5_T1_E4",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "__init__ ile Parametre Alma",
    "difficulty": "Orta",
    "lesson_html": "<h1>__init__ ile Parametre Alma</h1><p><code>__init__</code> metodu, <code>self</code>'ten sonra başka parametreler de alabilir. Bu, nesneyi oluştururken ona dışarıdan veri vermemizi sağlar.</p><pre><code>class Server:\n    def __init__(self, ip_adresi):\n        print(f\"{ip_adresi} sunucusu oluşturuldu.\")\n\n# 'self' otomatik verilir, biz 'ip_adresi'ni veririz\nweb_server = Server(\"192.168.1.1\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcıyı Parametre ile Oluştur",
      "description": "<code>Kullanici</code> sınıfını tanımlayın. <code>__init__</code> metodu <code>self</code>'ten sonra <code>kullanici_adi</code> adlı bir parametre almalıdır. Metodun içinde <code>f\"{kullanici_adi} hesabı oluşturuldu.\"</code> yazdırın. Sınıftan <code>\"admin\"</code> kullanıcı adıyla bir nesne oluşturun.",
      "hint": "<code>def __init__(self, kullanici_adi): ...</code> ... <code>k1 = Kullanici(\"admin\")</code>"
    },
    "default_code": "class Kullanici:\n    # __init__ metodunu (parametre ile) burada tanımlayın\n    pass\n\n# Nesneyi 'admin' argümanı ile oluşturun\n",
    "solution": "class Kullanici:\n    def __init__(self, kullanici_adi):\n        print(f\"{kullanici_adi} hesabı oluşturuldu.\")\n\n# Nesneyi 'admin' argümanı ile oluşturun\nk1 = Kullanici(\"admin\")"
  },
  {
    "id": "U5_T1_E5",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Nitelik (Attribute) Tanımlama",
    "difficulty": "Orta",
    "lesson_html": "<h1>Nitelik (Attribute) Tanımlama</h1><p>Nitelikler, nesnenin özelliklerini (verilerini) saklayan değişkenlerdir. <code>__init__</code> içinde alınan parametreleri <code>self.degisken_adi = parametre</code> şeklinde nesneye 'bağlarız'.</p><p><code>self.ip = ip</code> dediğimizde, 'bu nesnenin <code>ip</code> özelliği, dışarıdan gelen <code>ip</code> parametresidir' demiş oluruz.</p><pre><code>class Server:\n    def __init__(self, ip_adresi, port):\n        # Gelen parametreleri nitelik (attribute) olarak sakla\n        self.ip = ip_adresi\n        self.port = port\n\n# Nesneyi oluştur\nweb_server = Server(\"192.168.1.1\", 80)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Nitelikleri",
      "description": "<code>Vulnerability</code> sınıfını tanımlayın. <code>__init__</code> metodu <code>cve_kodu</code> ve <code>risk_skoru</code> parametreleri almalıdır. Bu parametreleri, nesnenin içinde <code>self.cve</code> ve <code>self.risk</code> olarak (yani <code>cve</code> ve <code>risk</code> nitelikleri olarak) saklayın. (Bu alıştırmada <code>print</code> gerekmez).",
      "hint": "<code>def __init__(self, cve_kodu, risk_skoru): ... self.cve = cve_kodu ... self.risk = risk_skoru</code>"
    },
    "default_code": "class Vulnerability:\n    # __init__ metodunu ve nitelikleri burada tanımlayın\n    pass\n\n# Nesneyi oluştur (print gerekmez)\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n\n# Nesneyi oluştur (print gerekmez)\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)"
  },
  {
    "id": "U5_T1_E6",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Niteliğe (Attribute) Erişim",
    "difficulty": "Orta",
    "lesson_html": "<h1>Niteliğe Erişim</h1><p>Bir nesne oluşturulduktan sonra, onun niteliklerine (özelliklerine) <code>nesne_adi.nitelik_adi</code> sözdizimi ile erişebilir (okuyabiliriz).</p><pre><code>class Server:\n    def __init__(self, ip_adresi):\n        self.ip = ip_adresi\n\nweb_server = Server(\"192.168.1.1\")\n\n# Nesnenin niteliğini oku\nprint(web_server.ip) # Çıktı: 192.168.1.1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Riskini Oku",
      "description": "<code>Vulnerability</code> sınıfı (<code>self.cve</code> ve <code>self.risk</code> nitelikleriyle) tanımlanmıştır. <code>v1</code> adında bir nesne oluşturulmuştur. Bu <code>v1</code> nesnesinin <code>risk</code> niteliğine erişin ve konsola yazdırın.",
      "hint": "<code>print(v1.risk)</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\n\n# v1 nesnesinin 'risk' niteliğini buraya yazdırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\n\n# v1 nesnesinin 'risk' niteliğini buraya yazdırın\nprint(v1.risk)"
  },
  {
    "id": "U5_T1_E7",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Metod Tanımlama (Davranış)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod Tanımlama (Davranış)</h1><p>Nitelikler (Attributes) nesnenin 'neyi olduğunu' (veri) saklarken, Metodlar (Methods) nesnenin 'ne yapabildiğini' (davranış) tanımlar.</p><p>Metodlar, sınıfın içine yazılan <code>def</code> ile tanımlanan fonksiyonlardır. Her zaman ilk parametre olarak <code>self</code> alırlar.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n    \n    # Bu bir metoddur\n    def tara(self):\n        print(f\"{self.ip} taranıyor...\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Raporlama Metodu",
      "description": "<code>Vulnerability</code> sınıfına (<code>__init__</code>'ten sonra), <code>raporla</code> adında bir metod ekleyin. Bu metod (<code>self</code> parametresi almalı) çağrıldığında <code>\"Zafiyet raporlanıyor...\"</code> yazdırmalıdır. (Henüz nesne oluşturup çağırmanıza gerek yok, sadece <code>pass</code>'ı değiştirin).",
      "hint": "<code>def raporla(self): ... print(...)</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    # 'raporla' metodunu buraya ekleyin\n    pass\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    def raporla(self):\n        print(\"Zafiyet raporlanıyor...\")\n"
  },
  {
    "id": "U5_T1_E8",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Metod Çağırma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod Çağırma</h1><p>Bir nesnenin metodunu çağırmak, niteliğine erişmeye benzer: <code>nesne_adi.metod_adi()</code> sözdizimi kullanılır. <code>self</code> parametresini biz göndermeyiz, Python onu otomatik olarak arka planda yönetir.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n    def tara(self):\n        print(f\"{self.ip} taranıyor...\")\n\nweb_server = Server(\"192.168.1.1\")\n\n# Nesnenin 'tara' metodunu çağır\nweb_server.tara() # Çıktı: 192.168.1.1 taranıyor...</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Raporlamayı Çağır",
      "description": "<code>Vulnerability</code> sınıfı ve <code>raporla</code> metodu verilmiştir. <code>v1</code> adında bir nesne oluşturulmuştur. <code>v1</code> nesnesinin <code>raporla()</code> metodunu çağırın.",
      "hint": "<code>v1.raporla()</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    def raporla(self):\n        print(\"Zafiyet raporlanıyor...\")\n\nv1 = Vulnerability(\"CVE-123\", 9.0)\n\n# v1 nesnesinin 'raporla' metodunu burada çağırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    def raporla(self):\n        print(\"Zafiyet raporlanıyor...\")\n\nv1 = Vulnerability(\"CVE-123\", 9.0)\n\n# v1 nesnesinin 'raporla' metodunu burada çağırın\nv1.raporla()"
  },
  {
    "id": "U5_T1_E9",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Metod İçinde 'self' Kullanımı",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod İçinde 'self' Kullanımı</h1><p>Metodların <code>self</code> almasının sebebi, metodun, nesnenin *kendi* niteliklerine (<code>self.ip</code>, <code>self.port</code> gibi) erişebilmesini sağlamaktır.</p><pre><code>class Server:\n    def __init__(self, ip, port):\n        self.ip = ip\n        self.port = port\n    \n    def bilgileri_goster(self):\n        # 'self' sayesinde 'ip' ve 'port'a erişebilir\n        print(f\"IP: {self.ip} - Port: {self.port}\")\n\ns1 = Server(\"10.0.0.1\", 8080)\ns1.bilgileri_goster()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Detayları",
      "description": "<code>Vulnerability</code> sınıfındaki <code>raporla</code> metodunu, sadece 'Raporlanıyor...' yazmak yerine, nesnenin <code>self.cve</code> ve <code>self.risk</code> niteliklerini kullanarak <code>f\"{self.cve} (Risk: {self.risk}) raporlandı.\"</code> yazdıracak şekilde güncelleyin. Ardından bir nesne oluşturup <code>raporla()</code> metodunu çağırın.",
      "hint": "<code>def raporla(self): ... print(f\"{self.cve} (Risk: {self.risk}) raporlandı.\")</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    # Bu metodu güncelleyin\n    def raporla(self):\n        print(\"Zafiyet raporlanıyor...\")\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\nv1.raporla()",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    # Bu metodu güncelleyin\n    def raporla(self):\n        print(f\"{self.cve} (Risk: {self.risk}) raporlandı.\")\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\nv1.raporla()"
  },
  {
    "id": "U5_T1_E10",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Niteliği Değiştiren Metod",
    "difficulty": "Orta",
    "lesson_html": "<h1>Niteliği Değiştiren Metod</h1><p>Metodlar sadece nitelikleri okumakla kalmaz, aynı zamanda <code>self.nitelik = yeni_deger</code> şeklinde onları değiştirebilirler. Bu, nesnenin 'durumunu' (state) değiştirmektir.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n        self.durum = \"Online\"\n    \n    def kapat(self):\n        self.durum = \"Offline\"\n\ns1 = Server(\"1.1.1.1\")\nprint(s1.durum) # Çıktı: Online\ns1.kapat()\nprint(s1.durum) # Çıktı: Offline</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyeti Yama (Patch)",
      "description": "<code>Vulnerability</code> sınıfına (<code>self.cve</code>, <code>self.risk</code> niteliklerine ek olarak) <code>self.yamalandi = False</code> (varsayılan) niteliğini <code>__init__</code> içine ekleyin. Ardından <code>patch_at</code> adında yeni bir metod tanımlayın. Bu metod, <code>self.yamalandi</code> niteliğinin değerini <code>True</code> olarak değiştirmelidir. Bir nesne oluşturun, <code>patch_at()</code> metodunu çağırın ve <code>v1.yamalandi</code> değerini yazdırın (Sonuç <code>True</code> olmalı).",
      "hint": "<code>__init__</code>'e <code>self.yamalandi = False</code> ekle. <code>def patch_at(self): ... self.yamalandi = True</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n        # 'yamalandi' niteliğini buraya ekleyin\n    \n    # 'patch_at' metodunu buraya ekleyin\n    pass\n\nv1 = Vulnerability(\"CVE-123\", 8.0)\n\n# patch_at metodunu çağırın\n\n# v1.yamalandi niteliğini yazdırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n        self.yamalandi = False\n    \n    def patch_at(self):\n        self.yamalandi = True\n        print(f\"{self.cve} yamalandı.\")\n\nv1 = Vulnerability(\"CVE-123\", 8.0)\n\nv1.patch_at()\n\nprint(v1.yamalandi)"
  },
  {
    "id": "U5_T1_E11",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Metod (Parametre Alan)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Parametre Alan Metodlar</h1><p>Metodlar, <code>self</code>'ten sonra, tıpkı normal fonksiyonlar gibi, dışarıdan ekstra parametreler alabilirler.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n    \n    # 'port' parametresi alan metod\n    def port_tara(self, port):\n        print(f\"{self.ip} adresindeki {port} portu taranıyor...\")\n\ns1 = Server(\"1.1.1.1\")\ns1.port_tara(80) # 'port' argümanını göndeririz</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Seviyesini Güncelle",
      "description": "<code>Vulnerability</code> sınıfına <code>risk_guncelle</code> adında bir metod ekleyin. Bu metod <code>self</code>'ten sonra <code>yeni_risk</code> adında bir parametre almalı ve nesnenin <code>self.risk</code> niteliğini bu <code>yeni_risk</code> değeri ile güncellemelidir. Bir nesne (<code>risk=5.0</code>) oluşturun, <code>risk_guncelle(9.0)</code> metodunu çağırın ve <code>v1.risk</code>'in son değerini yazdırın.",
      "hint": "<code>def risk_guncelle(self, yeni_risk): ... self.risk = yeni_risk</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    # 'risk_guncelle' metodunu buraya ekleyin\n    pass\n\nv1 = Vulnerability(\"CVE-123\", 5.0)\n\n# Metodu '9.0' argümanı ile çağırın\n\n\n# v1.risk niteliğini yazdırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    def risk_guncelle(self, yeni_risk):\n        self.risk = yeni_risk\n\nv1 = Vulnerability(\"CVE-123\", 5.0)\n\nv1.risk_guncelle(9.0)\n\nprint(v1.risk)"
  },
  {
    "id": "U5_T1_E12",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Metod (return ile)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Değer Döndüren Metodlar</h1><p>Metodlar, normal fonksiyonlar gibi <code>return</code> anahtar kelimesini kullanarak değer döndürebilirler.</p><pre><code>class Server:\n    def __init__(self, ip, port):\n        self.ip = ip\n        self.port = port\n    \n    def adres_getir(self):\n        return f\"{self.ip}:{self.port}\"\n\ns1 = Server(\"1.1.1.1\", 80)\nadres = s1.adres_getir()\nprint(adres) # Çıktı: 1.1.1.1:80</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Kategorisi",
      "description": "<code>Vulnerability</code> sınıfına <code>kategori_getir</code> adında bir metod ekleyin. Bu metod, <code>self.risk</code>'i kontrol etsin: Eğer <code>self.risk > 7.0</code> ise <code>\"Kritik\"</code> stringini <code>return</code> etsin, değilse (<code>else</code>) <code>\"Orta\"</code> stringini <code>return</code> etsin. <code>risk=9.8</code> olan bir nesne oluşturun, <code>kategori_getir()</code> metodunu çağırın ve dönen değeri yazdırın.",
      "hint": "<code>def kategori_getir(self): ... if self.risk > 7.0: return \"Kritik\" else: return \"Orta\"</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    # 'kategori_getir' metodunu buraya ekleyin\n    pass\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\n\n# Metodu çağırıp dönen değeri yazdırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu, risk_skoru):\n        self.cve = cve_kodu\n        self.risk = risk_skoru\n    \n    def kategori_getir(self):\n        if self.risk > 7.0:\n            return \"Kritik\"\n        else:\n            return \"Orta\"\n\nv1 = Vulnerability(\"CVE-2021-44228\", 9.8)\n\nkategori = v1.kategori_getir()\nprint(kategori)"
  },
  {
    "id": "U5_T1_E13",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Çoklu Nesneler (Instances)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Çoklu Nesneler</h1><p>OOP'nin gücü, aynı sınıftan (kalıptan) birden fazla, birbirinden bağımsız nesne oluşturabilmektir. Her nesnenin <code>self</code>'i kendine aittir ve kendi niteliklerini (verilerini) saklar.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n\ns1 = Server(\"1.1.1.1\")\ns2 = Server(\"2.2.2.2\")\n\nprint(s1.ip) # Çıktı: 1.1.1.1\nprint(s2.ip) # Çıktı: 2.2.2.2</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İki Zafiyet",
      "description": "<code>Vulnerability</code> sınıfı (<code>self.cve</code> niteliği alan) verilmiştir. <code>v1</code> (CVE-100 için) ve <code>v2</code> (CVE-200 için) adında iki farklı nesne oluşturun. <code>v1.cve</code> ve <code>v2.cve</code> değerlerini ayrı ayrı yazdırarak farklı olduklarını gösterin.",
      "hint": "<code>v1 = Vulnerability(\"CVE-100\")</code> ... <code>v2 = Vulnerability(\"CVE-200\")</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\n# v1 ve v2 adında iki nesne oluşturun\n\n\n# v1.cve ve v2.cve'yi yazdırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\n# v1 ve v2 adında iki nesne oluşturun\nv1 = Vulnerability(\"CVE-100\")\nv2 = Vulnerability(\"CVE-200\")\n\n# v1.cve ve v2.cve'yi yazdırın\nprint(v1.cve)\nprint(v2.cve)"
  },
  {
    "id": "U5_T1_E14",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Nesneleri Listede Saklama",
    "difficulty": "Zor",
    "lesson_html": "<h1>Nesneleri Listede Saklama</h1><p>Nesneler, Python'daki diğer veri tipleri gibi listelerde, sözlüklerde vb. saklanabilir. Bu, birden fazla nesneyi yönetmek için çok yaygın bir yöntemdir.</p><pre><code>class Server:\n    def __init__(self, ip):\n        self.ip = ip\n    def tara(self):\n        print(f\"{self.ip} taranıyor...\")\n\nserver_listesi = [\n    Server(\"1.1.1.1\"),\n    Server(\"2.2.2.2\")\n]\n\n# Nesne listesi üzerinde döngü\nfor server in server_listesi:\n    server.tara() # Her nesnenin metodunu çağır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Listesini Raporla",
      "description": "<code>Vulnerability</code> sınıfı (<code>raporla()</code> metoduyla) verilmiştir. <code>zafiyet_listesi</code> adında bir liste oluşturun ve içine <code>\"CVE-1\"</code> ve <code>\"CVE-2\"</code> kodlarıyla iki farklı <code>Vulnerability</code> nesnesi ekleyin. <code>for</code> döngüsü kullanarak bu listedeki her bir <code>zafiyet</code> nesnesinin <code>raporla()</code> metodunu çağırın.",
      "hint": "<code>zafiyet_listesi = [Vulnerability(...), Vulnerability(...)]</code> ... <code>for zafiyet in zafiyet_listesi: ... zafiyet.raporla()</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} raporlandı.\")\n\n# İki nesne içeren 'zafiyet_listesi'ni burada oluşturun\n\n\n# Liste üzerinde dönüp her nesnenin raporla() metodunu çağırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} raporlandı.\")\n\n# İki nesne içeren 'zafiyet_listesi'ni burada oluşturun\nzafiyet_listesi = [\n    Vulnerability(\"CVE-1\"),\n    Vulnerability(\"CVE-2\")\n]\n\n# Liste üzerinde dönüp her nesnenin raporla() metodunu çağırın\nfor zafiyet in zafiyet_listesi:\n    zafiyet.raporla()"
  },
  {
    "id": "U5_T1_E15",
    "unit_id": 5,
    "topic_id": 1,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Sınıflar ve Nesneler",
    "title": "Sınıf Niteliği (Class Attribute)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Sınıf Niteliği (Class Attribute)</h1><p>Şu ana kadar gördüğümüz nitelikler (<code>self.ip</code>) 'nesne niteliği' idi ve her nesne için farklı olabilirdi. Bir de 'sınıf niteliği' vardır. Bunlar <code>class</code> bloğunun hemen altına (<code>__init__</code> dışına) yazılır ve o sınıftan oluşturulan *tüm nesneler* tarafından paylaşılır.</p><pre><code>class Kullanici:\n    # Bu, tüm Kullanici nesneleri için ortaktır\n    platform = \"WebSitesi\"\n\n    def __init__(self, isim):\n        self.isim = isim\n\nk1 = Kullanici(\"Admin\")\nk2 = Kullanici(\"Guest\")\n\nprint(k1.platform) # Çıktı: WebSitesi\nprint(k2.platform) # Çıktı: WebSitesi</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ortak Tehdit Türü",
      "description": "<code>Vulnerability</code> sınıfına, <code>__init__</code> metodunun *dışına*, <code>tehdit_turu = \"Yazılım\"</code> adında bir 'sınıf niteliği' ekleyin. İki farklı <code>v1</code> ve <code>v2</code> nesnesi oluşturun. Hem <code>v1.tehdit_turu</code>'nü hem de <code>v2.tehdit_turu</code>'nü yazdırarak ikisinin de aynı paylaşılan değere sahip olduğunu gösterin.",
      "hint": "<code>class Vulnerability: ... tehdit_turu = \"Yazılım\" ... def __init__(...): ...</code>"
    },
    "default_code": "class Vulnerability:\n    # Sınıf niteliğini (Class Attribute) buraya ekleyin\n\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nv1 = Vulnerability(\"CVE-1\")\nv2 = Vulnerability(\"CVE-2\")\n\n# İki nesnenin de 'tehdit_turu' niteliğini yazdırın\n",
    "solution": "class Vulnerability:\n    # Sınıf niteliğini (Class Attribute) buraya ekleyin\n    tehdit_turu = \"Yazılım\"\n\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nv1 = Vulnerability(\"CVE-1\")\nv2 = Vulnerability(\"CVE-2\")\n\n# İki nesnenin de 'tehdit_turu' niteliğini yazdırın\nprint(v1.tehdit_turu)\nprint(v2.tehdit_turu)"
  },
  {
    "id": "U5_T2_E1",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Temel Kalıtım",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Kalıtım (Inheritance)</h1><p>Kalıtım, bir sınıfın (çocuk/child) başka bir sınıfın (ebeveyn/parent) tüm nitelik ve metodlarını miras almasına denir. Bu, 'bir ... bir ...' ilişkisi kurar (örn: 'Router' bir 'Device'dır).</p><p>Bir sınıfı miras almak için, çocuk sınıfı tanımlarken parantez <code>()</code> içine ebeveyn sınıfın adını yazarız.</p><pre><code># Ebeveyn (Parent) Sınıf\nclass Device:\n    def __init__(self, ip):\n        self.ip = ip\n    def ping(self):\n        print(f\"{self.ip} adresine ping atılıyor...\")\n\n# Çocuk (Child) Sınıf\n# 'Device' sınıfından miras alır\nclass Router(Device):\n    pass # Henüz içi boş\n\n# 'r1' nesnesi, hem 'Router' hem de 'Device' sınıfının özelliklerine sahip\nr1 = Router(\"192.168.1.1\")\nr1.ping() # 'ping' metodunu Device sınıfından miras aldı!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Web Zafiyeti",
      "description": "<code>Vulnerability</code> (Ebeveyn) sınıfı tanımlanmıştır. <code>Vulnerability</code> sınıfından miras alan <code>WebVulnerability</code> (Çocuk) adında yeni bir sınıf oluşturun. İçi boş olacağı için <code>pass</code> kullanın. Ardından <code>WebVulnerability</code> sınıfından <code>xss_zafiyeti</code> adında bir nesne oluşturun ve ebeveynden miras aldığı <code>.raporla()</code> metodunu çağırın.",
      "hint": "<code>class WebVulnerability(Vulnerability): pass</code> ... <code>xss_zafiyeti = WebVulnerability(\"CVE-100\")</code> ... <code>xss_zafiyeti.raporla()</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} raporlanıyor...\")\n\n# 'Vulnerability'den miras alan 'WebVulnerability' sınıfını burada tanımlayın\n\n\n# 'WebVulnerability' nesnesi oluşturun ve 'raporla()' metodunu çağırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} raporlanıyor...\")\n\n# 'Vulnerability'den miras alan 'WebVulnerability' sınıfını burada tanımlayın\nclass WebVulnerability(Vulnerability):\n    pass\n\n# 'WebVulnerability' nesnesi oluşturun ve 'raporla()' metodunu çağırın\nxss_zafiyeti = WebVulnerability(\"CVE-100\")\nxss_zafiyeti.raporla()"
  },
  {
    "id": "U5_T2_E2",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Ebeveyn __init__ Kullanımı (super())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Ebeveyn __init__ Kullanımı (super())</h1><p>Çocuk sınıf (<code>Router</code>), ebeveyn sınıfın (<code>Device</code>) <code>__init__</code> metodundaki niteliklere (<code>self.ip</code>) ihtiyaç duyar. Ancak çocuk sınıfa da <code>__init__</code> yazarsak, ebeveynin <code>__init__</code>'ini 'ezer' (override) ve <code>self.ip</code> tanımlanmamış olur.</p><p>Çözüm: Çocuk sınıfın <code>__init__</code>'i içinden <code>super().__init__(parametreler)</code> fonksiyonunu çağırmaktır. <code>super()</code>, 'ebeveyn sınıf' anlamına gelir. Bu, ebeveynin <code>__init__</code>'inin çalışmasını ve <code>self.ip</code>'yi ayarlamasını sağlar.</p><pre><code>class Device:\n    def __init__(self, ip):\n        self.ip = ip\n\nclass Router(Device):\n    def __init__(self, ip):\n        # Ebeveynin __init__ metodunu çağır ve 'ip'yi ona gönder\n        super().__init__(ip)\n\nr1 = Router(\"192.168.1.1\")\nprint(r1.ip) # 'super()' sayesinde bu nitelik tanımlandı</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ebeveyn Yapıcısını Çağır",
      "description": "<code>Vulnerability</code> sınıfı verilmiştir. <code>WebVulnerability</code> sınıfının <code>__init__</code> metodu içinden, ebeveyn sınıfın (<code>Vulnerability</code>) <code>__init__</code> metodunu <code>super()</code> kullanarak çağırın ve <code>cve_kodu</code> parametresini ona iletin.",
      "hint": "<code>__init__</code> içine <code>super().__init__(cve_kodu)</code> satırını ekleyin."
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n        print(\"Vulnerability init çağrıldı\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu):\n        # super() fonksiyonunu burada çağırın\n        print(\"WebVulnerability init çağrıldı\")\n\nxss = WebVulnerability(\"CVE-XSS\")\nprint(xss.cve) # 'super()' çağrılmazsa bu satır hata verir",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n        print(\"Vulnerability init çağrıldı\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu):\n        # super() fonksiyonunu burada çağırın\n        super().__init__(cve_kodu)\n        print(\"WebVulnerability init çağrıldı\")\n\nxss = WebVulnerability(\"CVE-XSS\")\nprint(xss.cve)"
  },
  {
    "id": "U5_T2_E3",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Çocuk Sınıfa Yeni Nitelik Ekleme",
    "difficulty": "Orta",
    "lesson_html": "<h1>Yeni Nitelik Ekleme</h1><p>Kalıtımın amacı, ebeveynden gelenlere ek olarak yeni, daha spesifik nitelikler ve metodlar eklemektir.</p><pre><code>class Device:\n    def __init__(self, ip):\n        self.ip = ip\n\nclass Router(Device):\n    def __init__(self, ip, model):\n        super().__init__(ip) # Ebeveynden 'ip' niteliğini al\n        self.model = model  # Çocuğa özel 'model' niteliğini ekle\n\nr1 = Router(\"192.168.1.1\", \"Cisco-1900\")\nprint(r1.ip)   # Ebeveynden geldi\nprint(r1.model) # Çocuktan geldi</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Web Zafiyetine URL Ekle",
      "description": "<code>WebVulnerability</code> sınıfının <code>__init__</code> metodunu, <code>cve_kodu</code>'na ek olarak <code>url</code> parametresi de alacak şekilde güncelleyin. <code>super()</code> ile <code>cve_kodu</code>'nu ebeveyne gönderin ve <code>url</code>'i <code>self.url</code> olarak yeni bir nitelik şeklinde tanımlayın. <code>v1</code> nesnesini bu iki parametreyle oluşturun ve <code>v1.url</code>'i yazdırın.",
      "hint": "<code>def __init__(self, cve_kodu, url): ... super().__init__(cve_kodu) ... self.url = url</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    # __init__ metodunu 'url' alacak şekilde güncelleyin\n    def __init__(self, cve_kodu):\n        super().__init__(cve_kodu)\n\n# Nesneyi 'url' argümanıyla birlikte oluşturun\nv1 = WebVulnerability(\"CVE-XSS-101\", \"/login.php\")\n\n# v1.url niteliğini yazdırın (şu an hata verecek)\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n\nv1 = WebVulnerability(\"CVE-XSS-101\", \"/login.php\")\n\nprint(v1.url)"
  },
  {
    "id": "U5_T2_E4",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Çocuk Sınıfa Yeni Metod Ekleme",
    "difficulty": "Orta",
    "lesson_html": "<h1>Yeni Metod Ekleme</h1><p>Çocuk sınıflar, ebeveynden miras aldıkları metodlara (<code>.ping()</code> gibi) ek olarak, kendilerine özel yeni metodlar da tanımlayabilirler.</p><pre><code>class Device:\\n    def __init__(self, ip):\\n        self.ip = ip\\n    def ping(self):\\n        print(f\\\"{self.ip} ping...\\\\n\\\")\\n\\nclass Router(Device):\\n    def __init__(self, ip, model):\\n        super().__init__(ip)\\n        self.model = model\\n    \\n    # Çocuğa özel yeni metod\\n    def yonlendirme_tablosunu_goster(self):\\n        print(f\\\"{self.ip} ({self.model}) tablosu gösteriliyor.\\\")\\n\\nr1 = Router(\\\"192.168.1.1\\\", \\\"Cisco-1900\\\")\\nr1.ping() # Ebeveynden gelen metod\\nr1.yonlendirme_tablosunu_goster() # Çocuktan gelen metod</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Saldırı Metodu Ekle",
      "description": "<code>WebVulnerability</code> sınıfına (<code>__init__</code>'ten sonra) <code>exploit_at</code> adında yeni bir metod ekleyin. Bu metod, <code>f-string</code> kullanarak nesnenin <code>self.url</code> ve <code>self.cve</code> niteliklerine erişmeli ve <code>f\"{self.url} adresine {self.cve} saldırısı yapılıyor...\"</code> yazdırmalıdır. Oluşturulan <code>v1</code> nesnesinin bu yeni metodunu çağırın.",
      "hint": "<code>def exploit_at(self): ... print(f\"{self.url} ... {self.cve} ...\")</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    # 'exploit_at' metodunu buraya ekleyin\n    pass\n\nv1 = WebVulnerability(\"CVE-XSS-101\", \"/login.php\")\n\n# v1.exploit_at() metodunu çağırın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    def exploit_at(self):\n        print(f\"{self.url} adresine {self.cve} saldırısı yapılıyor...\")\n\nv1 = WebVulnerability(\"CVE-XSS-101\", \"/login.php\")\nv1.exploit_at()"
  },
  {
    "id": "U5_T2_E5",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Metod Ezme (Method Overriding)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Metod Ezme (Method Overriding)</h1><p>Bazen ebeveyn sınıfın bir metodu (örn: <code>.raporla()</code>) çocuk sınıf için yeterince spesifik değildir. Çocuk sınıf, ebeveynle *aynı isme* sahip bir metod tanımlayarak ebeveynin o metodunu 'ezebilir' (override).</p><p>Çocuk sınıftan bir nesne oluşturulduğunda, aynı isimli metod çağrılırsa, Python her zaman *önce* çocuk sınıftaki metodu (daha spesifik olanı) çalıştırır.</p><pre><code>class Device:\n    def raporla(self):\n        print(\"Genel cihaz raporu\")\n\nclass Router(Device):\n    # Ebeveyndeki 'raporla' metodunu eziyoruz\n    def raporla(self):\n        print(\"Detaylı Yönlendirici raporu\")\n\nr1 = Router()\nr1.raporla() # Çıktı: Detaylı Yönlendirici raporu</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Raporlama Metodunu Ez",
      "description": "<code>Vulnerability</code> sınıfının <code>raporla()</code> metodu \"Genel Rapor\" yazmaktadır. <code>WebVulnerability</code> sınıfı içine, ebeveynle aynı isimde (<code>raporla</code>) yeni bir metod yazarak bu metodu 'ezin'. Yeni metod, <code>f\"WEB ZAFİYETİ ({self.cve}) {self.url} adresinde bulundu.\"</code> yazdırmalıdır. <code>v1</code> nesnesinin <code>.raporla()</code> metodunu çağırarak ezilmiş metodun çalıştığını doğrulayın.",
      "hint": "<code>class WebVulnerability...: ... def raporla(self): ... print(...)</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} - Genel Rapor\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    # 'raporla' metodunu burada 'ezin' (override)\n    pass\n\nv1 = WebVulnerability(\"CVE-SQLi-001\", \"/search.aspx\")\nv1.raporla()",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"{self.cve} - Genel Rapor\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    def raporla(self):\n        print(f\"WEB ZAFİYETİ ({self.cve}) {self.url} adresinde bulundu.\")\n\nv1 = WebVulnerability(\"CVE-SQLi-001\", \"/search.aspx\")\nv1.raporla()"
  },
  {
    "id": "U5_T2_E6",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Ezilen Metodu Çağırma (super())",
    "difficulty": "Zor",
    "lesson_html": "<h1>Ezilen Metodu Çağırma (super())</h1><p>Metod ezme (overriding) yaparken, bazen ebeveynin metodunu tamamen yok saymak değil, onun yaptıklarına *eklemeler* yapmak isteriz. (Örn: Ebeveyn genel raporu hazırlasın, çocuk spesifik detayları eklesin).</p><p><code>super().metod_adi()</code> sözdizimini kullanarak, çocuk metodun içinden, ebeveynin ezdiğimiz metodunu çağırabiliriz.</p><pre><code>class Device:\n    def raporla(self):\n        print(\"--- Genel Cihaz Raporu Başlangıcı ---\")\n\nclass Router(Device):\n    def raporla(self):\n        super().raporla() # Ebeveynin 'raporla' metodunu çalıştır\n        print(\"Yönlendiriciye özel detaylar eklendi.\")\n\nr1 = Router()\nr1.raporla()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ebeveyn Raporuna Ekleme",
      "description": "<code>Vulnerability</code> sınıfının <code>raporla</code> metodu genel bir başlık yazmaktadır. <code>WebVulnerability</code> sınıfının <code>raporla</code> metodu içinde, <code>print()</code> satırından *önce* <code>super().raporla()</code> komutunu çağırarak ebeveyn metodun da çalışmasını sağlayın.",
      "hint": "<code>def raporla(self): ... super().raporla() ... print(...)</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"--- ZAFİYET RAPORU BAŞLANGIÇ ({self.cve}) ---\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    def raporla(self):\n        # Ebeveynin 'raporla' metodunu burada çağırın\n        print(f\"Detay: URL={self.url}\")\n\nv1 = WebVulnerability(\"CVE-SQLi-001\", \"/search.aspx\")\nv1.raporla()",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    def raporla(self):\n        print(f\"--- ZAFİYET RAPORU BAŞLANGIÇ ({self.cve}) ---\")\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n    \n    def raporla(self):\n        super().raporla()\n        print(f\"Detay: URL={self.url}\")\n\nv1 = WebVulnerability(\"CVE-SQLi-001\", \"/search.aspx\")\nv1.raporla()"
  },
  {
    "id": "U5_T2_E7",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Çok Seviyeli Kalıtım",
    "difficulty": "Zor",
    "lesson_html": "<h1>Çok Seviyeli Kalıtım</h1><p>Kalıtım zincirleme olabilir (Dede -> Baba -> Çocuk). Buna 'çok seviyeli kalıtım' denir. Çocuk, hem babanın hem de dedenin metodlarını miras alır.</p><pre><code>class Cihaz: # Dede\n    def ping(self):\n        print(\"Ping\")\n\nclass Router(Cihaz): # Baba\n    def yonlendir(self):\n        print(\"Yönlendiriliyor\")\n\nclass WifiRouter(Router): # Çocuk\n    def wifi_sinyali_ver(self):\n        print(\"WiFi Sinyali\")\n\nwr = WifiRouter()\nwr.ping() # Deden (Cihaz) geldi\nwr.yonlendir() # Babadan (Router) geldi\nwr.wifi_sinyali_ver() # Kendinden (WifiRouter) geldi</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: SQL Injection Zafiyeti",
      "description": "<code>Vulnerability</code> (Dede) ve <code>WebVulnerability</code> (Baba) sınıfları verilmiştir. <code>WebVulnerability</code>'den miras alan <code>SqlInjection</code> (Çocuk) adında yeni bir sınıf tanımlayın. <code>SqlInjection</code>'ın <code>__init__</code> metodu <code>cve_kodu</code>, <code>url</code> ve <code>parametre</code> (yeni nitelik) almalıdır. <code>super()</code> kullanarak <code>cve_kodu</code> ve <code>url</code>'i ebeveyne (<code>WebVulnerability</code>'ye) gönderin. <code>self.parametre</code>'yi tanımlayın.",
      "hint": "<code>class SqlInjection(WebVulnerability): ... def __init__(self, cve_kodu, url, parametre): ... super().__init__(cve_kodu, url) ... self.parametre = parametre</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n\n# 'WebVulnerability'den miras alan 'SqlInjection' sınıfını burada tanımlayın\n\n\n# Nesneyi oluştur ve 'parametre' niteliğini yazdır\nsqli = SqlInjection(\"CVE-SQLi-101\", \"/login\", \"username\")\nprint(sqli.parametre)\nprint(sqli.url) # Babadan geldi\nprint(sqli.cve) # Deden geldi",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n\nclass WebVulnerability(Vulnerability):\n    def __init__(self, cve_kodu, url):\n        super().__init__(cve_kodu)\n        self.url = url\n\nclass SqlInjection(WebVulnerability):\n    def __init__(self, cve_kodu, url, parametre):\n        super().__init__(cve_kodu, url)\n        self.parametre = parametre\n\nsqli = SqlInjection(\"CVE-SQLi-101\", \"/login\", \"username\")\nprint(sqli.parametre)\nprint(sqli.url)\nprint(sqli.cve)"
  },
  {
    "id": "U5_T2_E8",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Çoklu Kalıtım",
    "difficulty": "Zor",
    "lesson_html": "<h1>Çoklu Kalıtım (Multiple Inheritance)</h1><p>Python, bir sınıfın *birden fazla* ebeveynden (virgülle ayırarak) miras almasına izin verir. Bu, karmaşık durumlarda kullanılabilir ancak kodun takibini zorlaştırabilir.</p><pre><code>class IpMixin:\n    def __init__(self):\n        self.ip = \"0.0.0.0\"\n\nclass MacMixin:\n    def __init__(self):\n        self.mac = \"FF:FF:FF\"\n\n# Hem IpMixin'den hem MacMixin'den miras alır\nclass Cihaz(IpMixin, MacMixin):\n    def __init__(self):\n        IpMixin.__init__(self)\n        MacMixin.__init__(self)\n\nc1 = Cihaz()\nprint(c1.ip)  # IpMixin'den geldi\nprint(c1.mac) # MacMixin'den geldi</code></pre><p>Not: <code>super()</code> çoklu kalıtımda karmaşıklaşabilir, bu yüzden <code>Ebeveyn.__init__(self)</code> kullanımı daha nettir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Raporlanabilir Cihaz",
      "description": "<code>Raporlama</code> ve <code>Cihaz</code> adında iki ebeveyn sınıf verilmiştir. <code>GuvenliCihaz</code> adında, <i>her iki</i> ebeveynden de (<code>Raporlama, Cihaz</code> sırasıyla) miras alan bir sınıf tanımlayın. İçi boş olacağı için <code>pass</code> kullanın. <code>gc1</code> nesnesi oluşturun ve <i>her iki</i> ebeveynden de miras aldığı <code>.raporla()</code> ve <code>.ping()</code> metodlarını çağırın.",
      "hint": "<code>class GuvenliCihaz(Raporlama, Cihaz): ... pass</code>"
    },
    "default_code": "class Raporlama:\n    def raporla(self):\n        print(\"Rapor oluşturuldu.\")\n\nclass Cihaz:\n    def ping(self):\n        print(\"Ping atıldı.\")\n\n# 'Raporlama' ve 'Cihaz' sınıflarından miras alan sınıfı burada tanımlayın\n\n\n# Yeni nesneyi oluşturun\ngc1 = GuvenliCihaz()\n\n# Her iki ebeveynin metodlarını çağırın\n",
    "solution": "class Raporlama:\n    def raporla(self):\n        print(\"Rapor oluşturuldu.\")\n\nclass Cihaz:\n    def ping(self):\n        print(\"Ping atıldı.\")\n\nclass GuvenliCihaz(Raporlama, Cihaz):\n    pass\n\ngc1 = GuvenliCihaz()\n\ngc1.raporla()\ngc1.ping()"
  },
  {
    "id": "U5_T2_E9",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Tip Kontrolü: isinstance()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tip Kontrolü: isinstance()</h1><p><code>isinstance(nesne, sinif)</code> fonksiyonu, bir nesnenin belirli bir sınıftan (veya o sınıfın alt sınıflarından) oluşturulup oluşturulmadığını kontrol eder. <code>True</code>/<code>False</code> döndürür.</p><pre><code>class Cihaz:\n    pass\nclass Router(Cihaz):\n    pass\n\nr1 = Router()\n\nprint(isinstance(r1, Router)) # Çıktı: True\nprint(isinstance(r1, Cihaz))  # Çıktı: True (Çünkü Router, Cihaz'dan miras alır)\nprint(isinstance(r1, str))    # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Nesne Tipi Kontrolü",
      "description": "<code>Vulnerability</code> ve ondan miras alan <code>WebVulnerability</code> sınıfları verilmiştir. <code>v1</code> (<code>WebVulnerability</code> nesnesi) oluşturulmuştur. <code>isinstance()</code> kullanarak <code>v1</code>'in <code>WebVulnerability</code> sınıfının bir örneği olup olmadığını kontrol edin ve yazdırın.",
      "hint": "<code>print(isinstance(v1, WebVulnerability))</code>"
    },
    "default_code": "class Vulnerability:\n    pass\nclass WebVulnerability(Vulnerability):\n    pass\n\nv1 = WebVulnerability()\n\n# v1'in WebVulnerability nesnesi olup olmadığını kontrol edin\n",
    "solution": "class Vulnerability:\n    pass\nclass WebVulnerability(Vulnerability):\n    pass\n\nv1 = WebVulnerability()\n\nprint(isinstance(v1, WebVulnerability))"
  },
  {
    "id": "U5_T2_E10",
    "unit_id": 5,
    "topic_id": 2,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Kalıtım (Inheritance)",
    "title": "Sınıf Kontrolü: issubclass()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sınıf Kontrolü: issubclass()</h1><p><code>issubclass(cocuk_sinif, ebeveyn_sinif)</code> fonksiyonu, bir sınıfın başka bir sınıfın alt sınıfı (child) olup olmadığını kontrol eder.</p><pre><code>class Cihaz:\n    pass\nclass Router(Cihaz):\n    pass\n\nprint(issubclass(Router, Cihaz)) # Çıktı: True\nprint(issubclass(Cihaz, Router)) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Alt Sınıf Kontrolü",
      "description": "<code>Vulnerability</code> ve <code>WebVulnerability</code> sınıfları verilmiştir. <code>issubclass()</code> fonksiyonunu kullanarak <code>WebVulnerability</code> sınıfının, <code>Vulnerability</code> sınıfının bir alt sınıfı olup olmadığını kontrol edin ve sonucu yazdırın.",
      "hint": "<code>print(issubclass(WebVulnerability, Vulnerability))</code>"
    },
    "default_code": "class Vulnerability:\n    pass\nclass WebVulnerability(Vulnerability):\n    pass\n\n# WebVulnerability'nin Vulnerability'nin alt sınıfı olup olmadığını kontrol edin\n",
    "solution": "class Vulnerability:\n    pass\nclass WebVulnerability(Vulnerability):\n    pass\n\nprint(issubclass(WebVulnerability, Vulnerability))"
  },
  {
    "id": "U5_T3_E1",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Gözden Geçirme: __init__",
    "difficulty": "Orta",
    "lesson_html": "<h1>Özel Metodlar (Dunder Methods)</h1><p>Başı ve sonu çift alt çizgili (<code>__</code>) metodlar Python için özeldir. Zaten bir tanesini biliyoruz: <code>__init__</code>. Bu metod, bir nesne oluşturulduğunda otomatik olarak çağrılır (yapıcı/constructor).</p><pre><code>class Cihaz:\n    def __init__(self, ip):\n        print(f\"Cihaz {ip} başlatıldı.\")\n        self.ip = ip\n\nc1 = Cihaz(\"1.1.1.1\") # __init__ otomatik çalışır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: __init__ Hatırlatma",
      "description": "<code>Kural</code> adında bir sınıf tanımlayın. <code>__init__</code> metodu <code>kaynak_ip</code> ve <code>hedef_port</code> parametreleri almalı ve bunları <code>self.kaynak_ip</code> ve <code>self.hedef_port</code> olarak saklamalıdır.",
      "hint": "Bu, önceki derslerden bir hatırlatmadır. <code>def __init__(self, kaynak_ip, hedef_port): ...</code>"
    },
    "default_code": "class Kural:\n    # __init__ metodunu burada tanımlayın\n    pass\n\n# Test için nesne oluşturma (print gerekmez)\nk1 = Kural(\"10.0.0.1\", 443)\n",
    "solution": "class Kural:\n    def __init__(self, kaynak_ip, hedef_port):\n        self.kaynak_ip = kaynak_ip\n        self.hedef_port = hedef_port\n\nk1 = Kural(\"10.0.0.1\", 443)"
  },
  {
    "id": "U5_T3_E2",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Nesne Temsili: __str__",
    "difficulty": "Orta",
    "lesson_html": "<h1>Nesne Temsili: __str__()</h1><p>Bir nesneyi doğrudan <code>print()</code> ile yazdırmaya çalıştığımızda, genellikle <code>&lt;__main__.SinifAdi object at 0x...&gt;</code> gibi okunaksız bir çıktı alırız.</p><p><code>__str__(self)</code> metodu, <code>print(nesne)</code> çağrıldığında veya nesne bir string'e (örn: f-string içinde) dönüştürüldüğünde nasıl bir *okunabilir* metin gösterileceğini tanımlamamızı sağlar. Bu metod bir string döndürmelidir.</p><pre><code>class Cihaz:\n    def __init__(self, ip):\n        self.ip = ip\n    \n    def __str__(self):\n        return f\"Cihaz IP: {self.ip}\"\n\nc1 = Cihaz(\"1.1.1.1\")\nprint(c1) # Çıktı: Cihaz IP: 1.1.1.1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kuralı Yazdır",
      "description": "<code>Kural</code> sınıfına (<code>__init__</code>'ten sonra) bir <code>__str__(self)</code> metodu ekleyin. Bu metod, <code>f\"Kural: {self.kaynak_ip} -> {self.hedef_port}\"</code> formatında bir string döndürmelidir. Bir <code>k1</code> nesnesi oluşturun ve <code>print(k1)</code> ile yazdırarak metodun çalıştığını görün.",
      "hint": "<code>def __str__(self): ... return f\"...\"</code>"
    },
    "default_code": "class Kural:\n    def __init__(self, kaynak_ip, hedef_port):\n        self.kaynak_ip = kaynak_ip\n        self.hedef_port = hedef_port\n    \n    # __str__ metodunu buraya ekleyin\n    pass\n\nk1 = Kural(\"10.0.0.1\", 443)\nprint(k1)",
    "solution": "class Kural:\n    def __init__(self, kaynak_ip, hedef_port):\n        self.kaynak_ip = kaynak_ip\n        self.hedef_port = hedef_port\n    \n    def __str__(self):\n        return f\"Kural: {self.kaynak_ip} -> {self.hedef_port}\"\n\nk1 = Kural(\"10.0.0.1\", 443)\nprint(k1)"
  },
  {
    "id": "U5_T3_E3",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Geliştirici Temsili: __repr__",
    "difficulty": "Orta",
    "lesson_html": "<h1>Geliştirici Temsili: __repr__()</h1><p><code>__repr__(self)</code> metodu, <code>__str__</code>'a çok benzer ancak amacı farklıdır. <code>__str__</code> son kullanıcıya yönelik 'güzel' bir çıktı hedeflerken, <code>__repr__</code> geliştiriciye yönelik, nesnenin nasıl *tekrar oluşturulabileceğini* gösteren, daha teknik ve kesin bir temsil döndürmeyi hedefler.</p><p>Eğer <code>__str__</code> tanımlı değilse, <code>print()</code> <code>__repr__</code>'ı kullanır. Genellikle her ikisini de tanımlamak iyi bir pratiktir.</p><pre><code>class Cihaz:\n    def __init__(self, ip):\n        self.ip = ip\n    \n    def __str__(self):\n        return f\"IP: {self.ip}\"\n    \n    def __repr__(self):\n        # Nesneyi tekrar oluşturmak için gereken kodu gösterir\n        return f\"Cihaz('{self.ip}')\"\n\nc1 = Cihaz(\"1.1.1.1\")\nprint(c1)      # __str__ kullanılır: IP: 1.1.1.1\nprint(repr(c1)) # __repr__ kullanılır: Cihaz('1.1.1.1')</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kural repr",
      "description": "<code>Kural</code> sınıfına bir <code>__repr__(self)</code> metodu ekleyin. Bu metod, nesneyi tekrar oluşturmak için gereken kodu gösteren bir string döndürmelidir, örneğin: <code>f\"Kural(kaynak_ip='{self.kaynak_ip}', hedef_port={self.hedef_port})\"</code>. Bir nesne oluşturun ve <code>repr(k1)</code> ile yazdırın.",
      "hint": "String içindeki string değerler için (<code>self.kaynak_ip</code>) tırnakları unutmayın."
    },
    "default_code": "class Kural:\n    def __init__(self, kaynak_ip, hedef_port):\n        self.kaynak_ip = kaynak_ip\n        self.hedef_port = hedef_port\n    \n    def __str__(self):\n        return f\"Kural: {self.kaynak_ip} -> {self.hedef_port}\"\n\n    # __repr__ metodunu buraya ekleyin\n    pass\n\nk1 = Kural(\"10.0.0.1\", 443)\nprint(repr(k1))",
    "solution": "class Kural:\n    def __init__(self, kaynak_ip, hedef_port):\n        self.kaynak_ip = kaynak_ip\n        self.hedef_port = hedef_port\n    \n    def __str__(self):\n        return f\"Kural: {self.kaynak_ip} -> {self.hedef_port}\"\n\n    def __repr__(self):\n        return f\"Kural(kaynak_ip='{self.kaynak_ip}', hedef_port={self.hedef_port})\"\n\nk1 = Kural(\"10.0.0.1\", 443)\nprint(repr(k1))"
  },
  {
    "id": "U5_T3_E4",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Uzunluk: __len__",
    "difficulty": "Orta",
    "lesson_html": "<h1>Uzunluk: __len__()</h1><p><code>len(nesne)</code> fonksiyonunun kendi nesnelerimizle çalışmasını istiyorsak, <code>__len__(self)</code> metodunu tanımlamamız gerekir. Bu metod, nesnenin 'uzunluğunu' temsil eden bir tamsayı (integer) döndürmelidir.</p><pre><code>class KullaniciListesi:\n    def __init__(self):\n        self.kullanicilar = []\n    \n    def ekle(self, kullanici):\n        self.kullanicilar.append(kullanici)\n    \n    def __len__(self):\n        return len(self.kullanicilar) # İçindeki listenin uzunluğunu döndür\n\nliste = KullaniciListesi()\nliste.ekle(\"admin\")\nliste.ekle(\"guest\")\nprint(len(liste)) # Çıktı: 2</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kural Sayısı",
      "description": "<code>Firewall</code> sınıfı, <code>self.kurallar</code> adında bir liste tutmaktadır. Bu sınıfa <code>__len__(self)</code> metodunu ekleyin. Metod, <code>self.kurallar</code> listesinin uzunluğunu (yani içindeki kural sayısını) <code>return</code> etmelidir. Bir nesne oluşturup birkaç kural ekleyin ve <code>len(fw)</code>'yi yazdırın.",
      "hint": "<code>def __len__(self): ... return len(self.kurallar)</code>"
    },
    "default_code": "class Firewall:\n    def __init__(self):\n        self.kurallar = []\n    \n    def kural_ekle(self, kural):\n        self.kurallar.append(kural)\n        \n    # __len__ metodunu buraya ekleyin\n    pass\n\nfw = Firewall()\nfw.kural_ekle(\"Kural 1\")\nfw.kural_ekle(\"Kural 2\")\nprint(len(fw))",
    "solution": "class Firewall:\n    def __init__(self):\n        self.kurallar = []\n    \n    def kural_ekle(self, kural):\n        self.kurallar.append(kural)\n        \n    def __len__(self):\n        return len(self.kurallar)\n\nfw = Firewall()\nfw.kural_ekle(\"Kural 1\")\nfw.kural_ekle(\"Kural 2\")\nprint(len(fw))"
  },
  {
    "id": "U5_T3_E5",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Elemana Erişim: __getitem__ (Temel)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Elemana Erişim: __getitem__()</h1><p>Nesnemizin liste veya sözlük gibi <code>nesne[anahtar]</code> sözdizimiyle eleman erişimini desteklemesini istiyorsak, <code>__getitem__(self, anahtar)</code> metodunu tanımlamamız gerekir. Bu metod, verilen <code>anahtar</code>'a karşılık gelen değeri döndürmelidir.</p><pre><code>class Portlar:\n    def __init__(self):\n        self.servisler = {80: \"HTTP\", 443: \"HTTPS\"}\n    \n    # port[80] çağrıldığında bu çalışır\n    def __getitem__(self, port_numarasi):\n        return self.servisler.get(port_numarasi, \"Bilinmiyor\")\n\nport_bilgisi = Portlar()\nprint(port_bilgisi[80])  # Çıktı: HTTP\nprint(port_bilgisi[22])  # Çıktı: Bilinmiyor</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP'ye Göre Kural",
      "description": "<code>Firewall</code> sınıfı, <code>self.kurallar_sozlugu</code> (IP: Kural Açıklaması) tutmaktadır. Bu sınıfa <code>__getitem__(self, ip)</code> metodunu ekleyin. Metod, <code>self.kurallar_sozlugu</code>'nden verilen <code>ip</code>'ye karşılık gelen kuralı <code>.get()</code> ile (bulamazsa \"Kural Yok\" dönecek şekilde) <code>return</code> etmelidir. Bir nesne oluşturup birkaç kural ekleyin ve <code>fw[\"1.1.1.1\"]</code>'i yazdırın.",
      "hint": "<code>def __getitem__(self, ip): ... return self.kurallar_sozlugu.get(ip, \"Kural Yok\")</code>"
    },
    "default_code": "class Firewall:\n    def __init__(self):\n        self.kurallar_sozlugu = {}\n    \n    def kural_ekle(self, ip, aciklama):\n        self.kurallar_sozlugu[ip] = aciklama\n        \n    # __getitem__ metodunu buraya ekleyin\n    pass\n\nfw = Firewall()\nfw.kural_ekle(\"1.1.1.1\", \"DNS İzni\")\nfw.kural_ekle(\"2.2.2.2\", \"Web İzni\")\n\nprint(fw[\"1.1.1.1\"])\nprint(fw[\"3.3.3.3\"])",
    "solution": "class Firewall:\n    def __init__(self):\n        self.kurallar_sozlugu = {}\n    \n    def kural_ekle(self, ip, aciklama):\n        self.kurallar_sozlugu[ip] = aciklama\n        \n    def __getitem__(self, ip):\n        return self.kurallar_sozlugu.get(ip, \"Kural Yok\")\n\nfw = Firewall()\nfw.kural_ekle(\"1.1.1.1\", \"DNS İzni\")\nfw.kural_ekle(\"2.2.2.2\", \"Web İzni\")\n\nprint(fw[\"1.1.1.1\"])\nprint(fw[\"3.3.3.3\"])"
  },
  {
    "id": "U5_T3_E6",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Toplama: __add__",
    "difficulty": "Zor",
    "lesson_html": "<h1>Toplama Operatörü: __add__()</h1><p><code>+</code> operatörünün kendi nesnelerimizle nasıl çalışacağını tanımlamak için <code>__add__(self, diger)</code> metodunu kullanırız. <code>self</code> soldaki nesneyi, <code>diger</code> sağdaki nesneyi temsil eder. Metod genellikle yeni bir nesne veya bir değer döndürmelidir.</p><pre><code>class Vektor:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, diger):\n        # İki vektörü topla, yeni bir Vektor nesnesi döndür\n        yeni_x = self.x + diger.x\n        yeni_y = self.y + diger.y\n        return Vektor(yeni_x, yeni_y)\n    \n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\nv1 = Vektor(1, 2)\nv2 = Vektor(3, 4)\nv3 = v1 + v2 # __add__ metodu çağrılır\nprint(v3) # Çıktı: (4, 6)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Skorlarını Topla",
      "description": "<code>Risk</code> sınıfı <code>self.skor</code> tutmaktadır. Bu sınıfa <code>__add__(self, diger_risk)</code> metodunu ekleyin. Metod, <code>self.skor</code> ile <code>diger_risk.skor</code>'u toplamalı ve sonucu (tamsayı olarak) <code>return</code> etmelidir. İki <code>Risk</code> nesnesi oluşturup <code>+</code> ile toplayın ve sonucu yazdırın.",
      "hint": "<code>def __add__(self, diger_risk): ... return self.skor + diger_risk.skor</code>"
    },
    "default_code": "class Risk:\n    def __init__(self, skor):\n        self.skor = skor\n    \n    # __add__ metodunu buraya ekleyin\n    pass\n\nrisk1 = Risk(5)\nrisk2 = Risk(3)\ntoplam_risk = risk1 + risk2\nprint(toplam_risk)",
    "solution": "class Risk:\n    def __init__(self, skor):\n        self.skor = skor\n    \n    def __add__(self, diger_risk):\n        return self.skor + diger_risk.skor\n\nrisk1 = Risk(5)\nrisk2 = Risk(3)\ntoplam_risk = risk1 + risk2\nprint(toplam_risk)"
  },
  {
    "id": "U5_T3_E7",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Karşılaştırma: __eq__ (Eşitlik)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Karşılaştırma: __eq__()</h1><p><code>==</code> operatörünün kendi nesnelerimizle nasıl çalışacağını (iki nesnenin 'eşit' kabul edilip edilmeyeceğini) tanımlamak için <code>__eq__(self, diger)</code> metodunu kullanırız. Bu metod <code>True</code> veya <code>False</code> döndürmelidir.</p><p>Varsayılan olarak Python, sadece iki değişken *aynı* nesneyi gösteriyorsa <code>True</code> döndürür. Genellikle niteliklerin eşitliğini kontrol etmek isteriz.</p><pre><code>class Cihaz:\n    def __init__(self, ip):\n        self.ip = ip\n    \n    def __eq__(self, diger):\n        # Eğer 'diger' de Cihaz ise ve IP'leri aynıysa True döndür\n        if isinstance(diger, Cihaz):\n            return self.ip == diger.ip\n        return False\n\nc1 = Cihaz(\"1.1.1.1\")\nc2 = Cihaz(\"1.1.1.1\")\nc3 = Cihaz(\"2.2.2.2\")\n\nprint(c1 == c2) # Çıktı: True\nprint(c1 == c3) # Çıktı: False</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Eşitliği",
      "description": "<code>Vulnerability</code> sınıfına <code>__eq__(self, diger)</code> metodu ekleyin. İki zafiyet nesnesinin, <code>self.cve</code> kodları aynıysa eşit kabul edilmesini sağlayın (<code>return self.cve == diger.cve</code>). Ancak <code>diger</code>'in de bir <code>Vulnerability</code> nesnesi olduğunu <code>isinstance()</code> ile kontrol etmeyi unutmayın. İki aynı CVE koduna sahip ve bir farklı CVE koduna sahip nesneler oluşturup <code>==</code> ile karşılaştırın.",
      "hint": "<code>if isinstance(diger, Vulnerability): return self.cve == diger.cve ... return False</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    \n    # __eq__ metodunu buraya ekleyin\n    pass\n\nv1 = Vulnerability(\"CVE-100\")\nv2 = Vulnerability(\"CVE-100\")\nv3 = Vulnerability(\"CVE-200\")\n\nprint(v1 == v2) # True olmalı\nprint(v1 == v3) # False olmalı",
    "solution": "class Vulnerability:\n    def __init__(self, cve_kodu):\n        self.cve = cve_kodu\n    \n    def __eq__(self, diger):\n        if isinstance(diger, Vulnerability):\n            return self.cve == diger.cve\n        return False\n\nv1 = Vulnerability(\"CVE-100\")\nv2 = Vulnerability(\"CVE-100\")\nv3 = Vulnerability(\"CVE-200\")\n\nprint(v1 == v2)\nprint(v1 == v3)"
  },
  {
    "id": "U5_T3_E8",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Karşılaştırma: __lt__ (Küçüktür)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Karşılaştırma: __lt__()</h1><p><code><</code> (küçüktür) operatörünü tanımlamak için <code>__lt__(self, diger)</code> metodu kullanılır (Less Than). Bu da <code>True</code>/<code>False</code> döndürmelidir.</p><p>Python, eğer <code>__lt__</code> tanımlıysa, diğer karşılaştırma operatörlerini (<code>></code>, <code><=</code>, <code>>=</code>) otomatik olarak çıkarabilir (ama hepsini tanımlamak daha nettir).</p><pre><code>class Risk:\n    def __init__(self, skor):\n        self.skor = skor\n    \n    # self < diger ?\n    def __lt__(self, diger):\n        return self.skor < diger.skor\n\nr1 = Risk(5)\nr2 = Risk(8)\nprint(r1 < r2) # Çıktı: True</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Risk Karşılaştırma",
      "description": "<code>Vulnerability</code> sınıfına <code>__lt__(self, diger)</code> metodunu ekleyin. Bir zafiyetin diğerinden 'küçük' olup olmadığını <code>self.risk</code> skoruna göre karşılaştırsın (<code>return self.risk < diger.risk</code>). <code>risk=5.0</code> ve <code>risk=9.0</code> olan iki nesne oluşturup <code><</code> operatörü ile karşılaştırın.",
      "hint": "<code>def __lt__(self, diger): ... return self.risk < diger.risk</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self.risk = risk\n    \n    # __lt__ metodunu buraya ekleyin\n    pass\n\nv_dusuk = Vulnerability(\"CVE-1\", 5.0)\nv_yuksek = Vulnerability(\"CVE-2\", 9.0)\n\nprint(v_dusuk < v_yuksek) # True olmalı\nprint(v_yuksek < v_dusuk) # False olmalı",
    "solution": "class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self.risk = risk\n    \n    def __lt__(self, diger):\n        # Tip kontrolü eklemek iyi bir pratik olabilir\n        if isinstance(diger, Vulnerability):\n            return self.risk < diger.risk\n        return NotImplemented # Karşılaştırılamaz\n\nv_dusuk = Vulnerability(\"CVE-1\", 5.0)\nv_yuksek = Vulnerability(\"CVE-2\", 9.0)\n\nprint(v_dusuk < v_yuksek)\nprint(v_yuksek < v_dusuk)"
  },
  {
    "id": "U5_T3_E9",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Diğer Karşılaştırmalar",
    "difficulty": "Zor",
    "lesson_html": "<h1>Diğer Karşılaştırmalar</h1><p>Eşitlik (<code>__eq__</code>) ve Küçüktür (<code>__lt__</code>) dışında diğer karşılaştırma operatörleri için de özel metodlar vardır:</p><ul><li><code>__ne__(self, diger)</code>: Eşit Değil (<code>!=</code>)</li><li><code>__le__(self, diger)</code>: Küçük veya Eşit (<code><=</code>)</li><li><code>__gt__(self, diger)</code>: Büyüktür (<code>></code>)</li><li><code>__ge__(self, diger)</code>: Büyük veya Eşit (<code>>=</code>)</li></ul><p>Genellikle <code>__eq__</code> ve <code>__lt__</code> tanımlamak yeterlidir, ancak netlik için diğerlerini de tanımlayabilirsiniz.</p>",
    "challenge": {
      "title": "Meydan Okuma: Büyük veya Eşit",
      "description": "<code>Risk</code> sınıfına (<code>__lt__</code> metoduna ek olarak) <code>__ge__(self, diger)</code> metodunu (Greater than or Equal to) ekleyin. Bu metod <code>self.skor >= diger.skor</code> sonucunu döndürmelidir. <code>skor=8</code> ve <code>skor=8</code> olan iki nesne oluşturup <code>>=</code> operatörü ile karşılaştırın.",
      "hint": "<code>def __ge__(self, diger): ... return self.skor >= diger.skor</code>"
    },
    "default_code": "class Risk:\n    def __init__(self, skor):\n        self.skor = skor\n    def __lt__(self, diger):\n        return self.skor < diger.skor\n    \n    # __ge__ metodunu buraya ekleyin\n    pass\n\nr1 = Risk(8)\nr2 = Risk(8)\nr3 = Risk(5)\n\nprint(r1 >= r2) # True olmalı\nprint(r1 >= r3) # True olmalı\nprint(r3 >= r1) # False olmalı",
    "solution": "class Risk:\n    def __init__(self, skor):\n        self.skor = skor\n    def __lt__(self, diger):\n        return self.skor < diger.skor\n    \n    def __ge__(self, diger):\n        if isinstance(diger, Risk):\n            return self.skor >= diger.skor\n        return NotImplemented\n\nr1 = Risk(8)\nr2 = Risk(8)\nr3 = Risk(5)\n\nprint(r1 >= r2)\nprint(r1 >= r3)\nprint(r3 >= r1)"
  },
  {
    "id": "U5_T3_E10",
    "unit_id": 5,
    "topic_id": 3,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Özel Metodlar (Dunder)",
    "title": "Özet ve Faydaları",
    "difficulty": "Orta",
    "lesson_html": "<h1>Özel Metodların Faydaları</h1><p>Özel (Dunder) metodlar, kendi oluşturduğumuz sınıfların Python'un yerleşik fonksiyonları ve operatörleriyle doğal ve sezgisel bir şekilde çalışmasını sağlar.</p><ul><li><code>__str__</code>/<code>__repr__</code>: Nesnelerin okunabilir temsilini sağlar.</li><li><code>__len__</code>: Nesnenin 'boyutunu' tanımlar.</li><li><code>__getitem__</code>: İndeks/anahtar ile erişimi mümkün kılar.</li><li><code>__add__</code>, <code>__lt__</code>, <code>__eq__</code> vb.: Operatörlerin davranışını özelleştirir.</li></ul><p>Bu, kodumuzu daha Pythonic ve anlaşılır hale getirir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kavramları Tekrarla",
      "description": "<code>__str__</code> metodunun temel amacının ne olduğunu açıklayan bir yorum satırı yazın.",
      "hint": "Kullanıcıya yönelik, okunabilir metin temsilini sağlamak."
    },
    "default_code": "# __str__ metodunun amacı:\n",
    "solution": "# __str__ metodunun amacı:\n# Nesnenin print() ile yazdırıldığında veya string'e çevrildiğinde\n# kullanıcıya gösterilecek okunabilir metin temsilini sağlamaktır."
  },
  {
    "id": "U5_T4_E1",
    "unit_id": 5,
    "topic_id": 4,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Encapsulation & Properties",
    "title": "Problem: Doğrudan Erişim",
    "difficulty": "Zor",
    "lesson_html": "<h1>Encapsulation (Kapsülleme)</h1><p>Şu ana kadar nesne niteliklerine (<code>nesne.ip</code>) doğrudan erişip değiştirebiliyorduk. Ancak bazen bir niteliğin değerinin belirli kurallara uymasını (örn: IP adresi formatı, risk skoru 0-10 arası) veya değiştirildiğinde başka işlemlerin tetiklenmesini (örn: loglama) isteyebiliriz.</p><p>Doğrudan erişim (<code>nesne.nitelik = deger</code>) bu kontrolü sağlamaz.</p><pre><code>class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self.risk = risk # Doğrudan erişilebilir\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nv1.risk = -50 # Geçersiz bir değer atanabilir!\nprint(v1.risk)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Geçersiz Değer",
      "description": "Yukarıdaki ders örneğinde görüldüğü gibi, <code>v1.risk</code> niteliğine doğrudan erişilerek negatif bir değer atanabiliyor. Bu durumun neden bir problem olabileceğini açıklayan bir yorum satırı yazın.",
      "hint": "Risk skorları genellikle negatif olmamalıdır. Doğrudan erişim kontrolsüzlüğe yol açar."
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self.risk = risk\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nv1.risk = -50 # Geçersiz atama\nprint(v1.risk)\n\n# Neden problem olduğunu buraya yorum olarak yazın\n",
    "solution": "class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self.risk = risk\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nv1.risk = -50\nprint(v1.risk)\n\n# Risk skorunun negatif olması mantıklı değil.\n# Doğrudan erişim, bu tür geçersiz değer atamalarına izin vererek\n# nesnenin tutarsız bir duruma gelmesine neden olabilir."
  },
  {
    "id": "U5_T4_E2",
    "unit_id": 5,
    "topic_id": 4,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Encapsulation & Properties",
    "title": "Gizli Nitelik (Tek Alt Çizgi)",
    "difficulty": "Zor",
    "lesson_html": "<h1>'Gizli' Nitelik (Tek Alt Çizgi _)</h1><p>Python'da tam anlamıyla 'private' (gizli) nitelik yoktur, ancak bir niteliğin adının başına tek alt çizgi (<code>_</code>) koymak (örn: <code>self._risk</code>), diğer geliştiricilere 'bu niteliğin sınıfın iç kullanımı için olduğu ve dışarıdan doğrudan erişilmemesi gerektiği' konusunda bir <strong>anlaşmadır (convention)</strong>.</p><p>Python bunu zorlamaz, ama bu kurala uymak iyi bir pratiktir.</p><pre><code>class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self._risk = risk # İç kullanım için olduğunu belirtir</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP'yi Gizle",
      "description": "<code>Cihaz</code> sınıfının <code>__init__</code> metodunda, <code>ip_adresi</code> parametresini <code>self.ip</code> yerine <code>self._ip</code> olarak (tek alt çizgi ile) saklayın. Bu, IP adresinin 'iç' bir değişken olduğunu belirtir.",
      "hint": "<code>self._ip = ip_adresi</code>"
    },
    "default_code": "class Cihaz:\n    def __init__(self, ip_adresi):\n        # 'ip' niteliğini tek alt çizgi ile tanımlayın\n        self.ip = ip_adresi\n\nc1 = Cihaz(\"1.1.1.1\")\n# print(c1._ip) # Hala erişilebilir ama önerilmez",
    "solution": "class Cihaz:\n    def __init__(self, ip_adresi):\n        self._ip = ip_adresi\n\nc1 = Cihaz(\"1.1.1.1\")\n# print(c1._ip) # Erişim hala mümkün"
  },
  {
    "id": "U5_T4_E3",
    "unit_id": 5,
    "topic_id": 4,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Encapsulation & Properties",
    "title": "Getter Metodu (@property)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Getter Metodu (@property)</h1><p>Gizli bir niteliğe (<code>_risk</code>) dışarıdan kontrollü okuma erişimi sağlamak için 'getter' metodu kullanılır. Python'da bunu yapmanın en şık yolu <code>@property</code> dekoratörüdür.</p><p><code>@property</code> ile işaretlenen bir metod (örn: <code>risk()</code>), dışarıdan çağrılırken sanki bir nitelikmiş gibi (<code>nesne.risk</code>, parantez olmadan!) erişilir.</p><pre><code>class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self._risk = risk # Gizli nitelik\n    \n    @property\n    def risk(self): # Metod adı, erişilmek istenen nitelikle aynı\n        print(\"Getter çağrıldı\")\n        return self._risk\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nprint(v1.risk) # Metod çağrılır ama () yok! Çıktı: Getter çağrıldı -> 5.0</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Getter",
      "description": "<code>Cihaz</code> sınıfında <code>self._ip</code> niteliği vardır. Bu niteliğe dışarıdan <code>cihaz.ip</code> şeklinde (parantezsiz) erişilmesini sağlayan bir 'getter' metodu (<code>ip</code> adında) <code>@property</code> dekoratörü ile tanımlayın. Bu metod <code>self._ip</code> değerini <code>return</code> etmelidir. Bir nesne oluşturup <code>c1.ip</code>'yi yazdırın.",
      "hint": "<code>@property ... def ip(self): ... return self._ip</code>"
    },
    "default_code": "class Cihaz:\n    def __init__(self, ip_adresi):\n        self._ip = ip_adresi\n        \n    # '@property' ile 'ip' getter metodunu buraya ekleyin\n    pass\n\nc1 = Cihaz(\"1.1.1.1\")\nprint(c1.ip) # Bu satırın çalışması lazım",
    "solution": "class Cihaz:\n    def __init__(self, ip_adresi):\n        self._ip = ip_adresi\n        \n    @property\n    def ip(self):\n        return self._ip\n\nc1 = Cihaz(\"1.1.1.1\")\nprint(c1.ip)"
  },
  {
    "id": "U5_T4_E4",
    "unit_id": 5,
    "topic_id": 4,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Encapsulation & Properties",
    "title": "Setter Metodu (@risk.setter)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Setter Metodu (@.setter)</h1><p>Gizli bir niteliğin değerini dışarıdan kontrollü bir şekilde değiştirmek için 'setter' metodu kullanılır. <code>@property</code> ile tanımlanan getter metodunun adıyla (<code>@risk.setter</code>) yeni bir metod tanımlanır. Bu metod, yeni değeri parametre olarak alır.</p><p>Setter içinde, değere atama yapmadan önce kontroller (validation) yapabiliriz.</p><pre><code>class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        self._risk = risk\n    \n    @property\n    def risk(self):\n        return self._risk\n        \n    @risk.setter # Getter ile aynı isimde .setter\n    def risk(self, yeni_risk):\n        print(\"Setter çağrıldı\")\n        if 0 <= yeni_risk <= 10:\n            self._risk = yeni_risk\n        else:\n            print(\"Hata: Risk 0-10 arasında olmalı!\")\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nv1.risk = 9.0 # Setter çağrılır! Parantez yok!\nv1.risk = -5  # Setter çağrılır ve hata mesajı verir\nprint(v1.risk) # Getter çağrılır, sonuç 9.0 kalır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Risk Setter",
      "description": "<code>Vulnerability</code> sınıfına (<code>@property def risk(self): ...</code>'ten sonra) <code>@risk.setter</code> ile bir 'setter' metodu ekleyin. Bu metod <code>yeni_risk</code> parametresi almalı. <i>Sadece</i> <code>0 <= yeni_risk <= 10</code> ise <code>self._risk</code>'i güncellemeli, değilse bir uyarı mesajı yazdırmalıdır. Bir nesne oluşturup geçerli (<code>8.0</code>) ve geçersiz (<code>11.0</code>) değerler atamayı deneyin, sonra son <code>risk</code> değerini yazdırın.",
      "hint": "<code>@risk.setter ... def risk(self, yeni_risk): ... if 0 <= yeni_risk <= 10: ... self._risk = yeni_risk ... else: print(...)</code>"
    },
    "default_code": "class Vulnerability:\n    def __init__(self, cve, risk):\n        self.cve = cve\n        # Risk değerini başta kontrol etmek daha iyi olurdu\n        if 0 <= risk <= 10:\n            self._risk = risk \n        else:\n            self._risk = 0 # Veya hata ver\n            print(\"Başlangıç riski geçersiz!\")\n            \n    @property\n    def risk(self):\n        return self._risk\n        \n    # '@risk.setter' metodunu buraya ekleyin\n    pass\n\nv1 = Vulnerability(\"CVE-1\", 5.0)\nprint(f\"İlk risk: {v1.risk}\")\nv1.risk = 8.0\nprint(f\"Güncel risk: {v1.risk}\")\nv1.risk = 11.0 # Bu atama başarısız olmalı\nprint(f\"Son risk: {v1.risk}\")",
    "solution": "class Vulnerability:\\n    def __init__(self, cve, risk):\\n        self.cve = cve\\n        if 0 <= risk <= 10:\\n            self._risk = risk \\n        else:\\n            # Başlangıçta hata fırlatmak daha iyi olabilir\\n            raise ValueError(\\\"Risk 0-10 arasında olmalı!\\\")\\n            \\n    @property\\n    def risk(self):\\n        return self._risk\\n        \\n    @risk.setter\\n    def risk(self, yeni_risk):\\n        if 0 <= yeni_risk <= 10:\\n            self._risk = yeni_risk\\n        else:\\n            print(f\\\"Geçersiz risk değeri: {yeni_risk}. Atama yapılmadı.\\\")\\n\\ntry:\\n    v1 = Vulnerability(\\\"CVE-1\\\", 5.0)\\n    print(f\\\"İlk risk: {v1.risk}\\\")\\n    v1.risk = 8.0\\n    print(f\\\"Güncel risk: {v1.risk}\\\")\\n    v1.risk = 11.0 # Bu atama başarısız olmalı\\n    print(f\\\"Son risk: {v1.risk}\\\")\\nexcept ValueError as e:\\n    print(e)"
  },
  {
    "id": "U5_T4_E5",
    "unit_id": 5,
    "topic_id": 4,
    "unit_name": "Nesne Yönelimli Programlama (OOP)",
    "topic_name": "Encapsulation & Properties",
    "title": "Salt Okunur (Read-Only) Nitelik",
    "difficulty": "Zor",
    "lesson_html": "<h1>Salt Okunur (Read-Only) Nitelik</h1><p>Eğer bir niteliğin dışarıdan okunabilmesini ama *asla* değiştirilememesini istiyorsanız, sadece <code>@property</code> (getter) tanımlar, ama ona karşılık gelen <code>@.setter</code> metodunu tanımlamazsınız.</p><p>Böyle bir niteliğe dışarıdan atama yapmaya çalışmak <code>AttributeError</code> hatası verir.</p><pre><code>class LogKaydi:\n    def __init__(self, mesaj):\n        self._mesaj = mesaj\n        # Zaman damgası sadece oluşturulurken alınır\n        self._zaman = datetime.datetime.now()\n    \n    @property\n    def mesaj(self):\n        return self._mesaj\n        \n    @property\n    def zaman(self):\n        return self._zaman\n    \n    # 'zaman' için setter yok!\n\nlog1 = LogKaydi(\"Giriş yapıldı\")\nprint(log1.zaman) # Okunabilir\n# log1.zaman = \"yeni zaman\" # HATA VERİR (AttributeError)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Değişmez CVE Kodu",
      "description": "<code>Vulnerability</code> sınıfında <code>cve</code> kodunun oluşturulduktan sonra değiştirilememesi gerektiğini varsayalım. <code>__init__</code> içinde <code>self._cve = cve_kodu</code> olarak saklayın. Sadece <code>@property</code> kullanarak <code>cve</code> için bir 'getter' metodu tanımlayın, ancak 'setter' metodu tanımlamayın. Bir nesne oluşturun, <code>v1.cve</code>'yi okuyup yazdırın ve <code>v1.cve = \"YENI-CVE\"</code> ataması yapmaya çalışarak hata aldığınızı (veya almanız gerektiğini) gözlemleyin.",
      "hint": "<code>self._cve</code> tanımlayın, <code>@property def cve(self): return self._cve</code> yazın, <code>@cve.setter</code> metodunu yazmayın."
    },
    "default_code": "import datetime # Örnek için gerekli değil ama önceki derste vardı\n\nclass Vulnerability:\n    def __init__(self, cve_kodu):\n        # cve kodunu 'gizli' olarak saklayın\n        self._cve = cve_kodu\n        \n    # Sadece 'cve' için @property (getter) tanımlayın\n    pass\n\nv1 = Vulnerability(\"CVE-123\")\nprint(v1.cve) # Okuma başarılı olmalı\n\ntry:\n    v1.cve = \"YENI-CVE\" # Bu satır AttributeError vermeli\n    print(\"Atama başarılı oldu (olmamalıydı!)\")\nexcept AttributeError:\n    print(\"Atama engellendi (beklenen davranış)\")\n",
    "solution": "import datetime\n\nclass Vulnerability:\n    def __init__(self, cve_kodu):\n        self._cve = cve_kodu\n        \n    @property\n    def cve(self):\n        return self._cve\n    \n    # Setter yok!\n\nv1 = Vulnerability(\"CVE-123\")\nprint(v1.cve)\n\ntry:\n    v1.cve = \"YENI-CVE\"\n    print(\"Atama başarılı oldu (olmamalıydı!)\")\nexcept AttributeError:\n    print(\"Atama engellendi (beklenen davranış)\")\n"
  },
  {
    "id": "U6_T1_E1",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosya Açma (open)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Dosya Girdi/Çıktısı (File I/O)</h1><p>Python'da bir dosyayla çalışmak için önce onu <code>open()</code> fonksiyonu ile açmanız gerekir. Bu fonksiyon dosya adını ve bir 'mod'u (nasıl açılacağını belirten) parametre olarak alır.</p><p>En yaygın modlar:</p><ul><li><code>'r'</code>: Okuma (Read) - Varsayılan moddur. Dosya yoksa hata verir.</li><li><code>'w'</code>: Yazma (Write) - Dosya varsa içeriğini siler, yoksa oluşturur.</li><li><code>'a'</code>: Ekleme (Append) - Dosya varsa sonuna ekler, yoksa oluşturur.</li></ul><p><code>open()</code> bir 'dosya nesnesi' döndürür. İşiniz bittiğinde bu nesneyi <code>.close()</code> ile kapatmanız <strong>çok önemlidir</strong> (kaynak sızıntısını önlemek için).</p><pre><code># okuma.txt dosyasını okuma modunda aç\ndosya = open(\"okuma.txt\", \"r\")\n# ... dosya ile işlemler ...\ndosya.close() # Kapatmayı unutma!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Dosya Aç ve Kapat",
      "description": "Bu ortamda gerçek dosya oluşturamasak da, <code>open('logfile.txt', 'r')</code> komutuyla bir dosya nesnesi oluşturun ve <code>log_dosyasi</code> değişkenine atayın. Bir sonraki satırda <code>log_dosyasi.close()</code> komutuyla dosyayı kapatın. (Bu alıştırmada çıktı olmayacak).",
      "hint": "İki satır kod: <code>log_dosyasi = open(...)</code> ve <code>log_dosyasi.close()</code>."
    },
    "default_code": "# Dosyayı 'r' modunda açın\n\n\n# Dosyayı kapatın\n\nprint(\"Dosya açıldı ve kapatıldı.\")",
    "solution": "# Dosyayı 'r' modunda açın\nlog_dosyasi = open('logfile.txt', 'r')\n\n# Dosyayı kapatın\nlog_dosyasi.close()\n\nprint(\"Dosya açıldı ve kapatıldı.\")"
  },
  {
    "id": "U6_T1_E2",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Güvenli Açma: 'with open'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Güvenli Dosya Açma: 'with open'</h1><p>Dosyaları <code>.close()</code> ile kapatmayı unutmak yaygın bir hatadır. Python bunun için çok daha güvenli ve pratik bir yol sunar: <code>with open(...) as ...:</code> bloğu.</p><p><code>with</code> bloğu kullanıldığında, blok sona erdiğinde (veya bir hata oluşsa bile) Python dosyayı *otomatik olarak* kapatır. Bu nedenle <strong>her zaman</strong> <code>with</code> kullanılması önerilir.</p><pre><code># 'with' bloğu bitince dosya otomatik kapanır\nwith open(\"logfile.txt\", \"r\") as dosya:\n    # dosya nesnesini burada kullan\n    print(\"Dosya 'with' ile açıldı\")\n    # .close() yazmaya gerek yok!\n\nprint(\"Blok bitti, dosya kapandı.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'with' Kullanımı",
      "description": "<code>config.txt</code> adlı dosyayı okuma modunda (<code>'r'</code>) <code>with open(...)</code> sözdizimini kullanarak açın. Dosya nesnesine <code>cfg_dosyasi</code> adını verin (<code>as cfg_dosyasi</code>). Blok içine şimdilik sadece <code>pass</code> yazın.",
      "hint": "<code>with open('config.txt', 'r') as cfg_dosyasi: ... pass</code>"
    },
    "default_code": "# 'with open' kullanarak dosyayı açın\n\n\nprint(\"Dosya 'with' ile açıldı ve otomatik kapandı.\")",
    "solution": "with open('config.txt', 'r') as cfg_dosyasi:\n    pass\n\nprint(\"Dosya 'with' ile açıldı ve otomatik kapandı.\")"
  },
  {
    "id": "U6_T1_E3",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosyayı Okuma (.read())",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Dosyayı Okuma: .read()</h1><p>Bir dosyanın *tüm içeriğini* tek bir string olarak okumak için dosya nesnesinin <code>.read()</code> metodu kullanılır.</p><p>(Simülasyon: Dosyada 'Merhaba\nDünya' yazdığını varsayalım)</p><pre><code>with open(\"test.txt\", \"r\") as f:\n    icerik = f.read()\n    print(icerik)</code></pre><p>Çıktı:<br><code>Merhaba</code><br><code>Dünya</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Log Oku",
      "description": "<code>logfile.txt</code> dosyasının içeriğini (simüle edilmiş) okuyup <code>log_icerigi</code> değişkenine atayan ve yazdıran bir kod yazın. <code>with open</code> kullanın. (Pyodide ortamı dosya okuyamadığı için, <code>.read()</code> yerine doğrudan string ataması yapacağız).",
      "hint": "<code>with open...:</code> bloğu gerekli değil, sadece <code>log_icerigi = \"...\"; print(log_icerigi)</code> yeterli."
    },
    "default_code": "# Simülasyon: 'logfile.txt' içeriği\nlog_icerigi = \"[INFO] Sistem başladı.\\n[WARN] Düşük disk alanı.\\n[INFO] Kullanıcı girişi: admin\"\n\n# Dosyayı okuduğunuzu varsayın ve içeriği yazdırın\n",
    "solution": "# Simülasyon: 'logfile.txt' içeriği\nlog_icerigi = \"[INFO] Sistem başladı.\\n[WARN] Düşük disk alanı.\\n[INFO] Kullanıcı girişi: admin\"\n\n# Dosyayı okuduğunuzu varsayın ve içeriği yazdırın\nprint(log_icerigi)"
  },
  {
    "id": "U6_T1_E4",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Satır Satır Okuma (Döngü)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Satır Satır Okuma (Döngü)</h1><p>Büyük dosyaları (örn: uzun log dosyaları) tamamen belleğe okumak (<code>.read()</code>) verimli değildir. Bunun yerine, dosya nesnesi üzerinde doğrudan <code>for</code> döngüsü kurarak dosyayı satır satır işleyebilirsiniz.</p><p>(Simülasyon: Dosyada 3 satır olduğunu varsayalım)</p><pre><code>with open(\"logfile.txt\", \"r\") as dosya:\n    for satir in dosya:\n        print(f\"Okunan Satır: {satir.strip()}\") # .strip() ile sondaki \\n'i sil</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Satırlarını İşle",
      "description": "Simüle edilmiş <code>log_satirlari</code> listesi verilmiştir. Bir <code>for</code> döngüsü kullanarak listedeki her bir <code>satir</code>'ı, başındaki/sonundaki boşlukları <code>.strip()</code> ile temizleyerek ve başına <code>\"LOG: \"</code> ekleyerek yazdırın.",
      "hint": "<code>for satir in log_satirlari: ... print(f\"LOG: {satir.strip()}\")</code>"
    },
    "default_code": "# Simülasyon: Dosyadan satır satır okuma\nlog_satirlari = [\"[INFO] Başladı\\n\", \" [WARN] Hata \\n\", \"[INFO] Bitti\\n\"]\n\n# Döngü ile her satırı işleyin ve yazdırın\n",
    "solution": "# Simülasyon: Dosyadan satır satır okuma\nlog_satirlari = [\"[INFO] Başladı\\n\", \" [WARN] Hata \\n\", \"[INFO] Bitti\\n\"]\n\n# Döngü ile her satırı işleyin ve yazdırın\nfor satir in log_satirlari:\n    print(f\"LOG: {satir.strip()}\")"
  },
  {
    "id": "U6_T1_E5",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Tüm Satırları Okuma (.readlines())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tüm Satırları Okuma: .readlines()</h1><p>Dosyanın tüm satırlarını bir kerede okuyup, her satırı bir eleman olan bir *liste* olarak almak isterseniz <code>.readlines()</code> metodunu kullanabilirsiniz.</p><p><strong>Dikkat:</strong> Her satırın sonunda genellikle yeni satır karakteri (<code>\\n</code>) bulunur.</p><p>(Simülasyon: Dosyada 'Satir1\nSatir2' yazdığını varsayalım)</p><pre><code>with open(\"test.txt\", \"r\") as f:\n    satirlar_listesi = f.readlines()\n    print(satirlar_listesi) # Çıktı: ['Satir1\\n', 'Satir2']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesi Oku",
      "description": "Simüle edilmiş <code>ip_dosyasi_icerigi</code> string'i verilmiştir. <code>.splitlines()</code> string metodunu (<code>.readlines()</code>'a benzer bir iş yapar) kullanarak bu string'i satırlara bölün ve oluşan IP listesini yazdırın.",
      "hint": "<code>ip_listesi = ip_dosyasi_icerigi.splitlines()</code>"
    },
    "default_code": "# Simülasyon: ip_list.txt içeriği\nip_dosyasi_icerigi = \"1.1.1.1\\n8.8.8.8\\n192.168.1.1\"\n\n# İçeriği satırlara bölerek bir liste oluşturun\n\n\n# Listeyi yazdırın\n",
    "solution": "# Simülasyon: ip_list.txt içeriği\nip_dosyasi_icerigi = \"1.1.1.1\\n8.8.8.8\\n192.168.1.1\"\n\n# İçeriği satırlara bölerek bir liste oluşturun\nip_listesi = ip_dosyasi_icerigi.splitlines()\n\n# Listeyi yazdırın\nprint(ip_listesi)"
  },
  {
    "id": "U6_T1_E6",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosyaya Yazma ('w')",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dosyaya Yazma ('w')</h1><p>Bir dosyaya yazmak için <code>open()</code> fonksiyonunu <code>'w'</code> (write) modu ile kullanırız. Bu mod, dosya varsa içeriğini tamamen siler, dosya yoksa yeni bir dosya oluşturur.</p><p>Dosya nesnesinin <code>.write(string)</code> metodu, verilen string'i dosyaya yazar.</p><pre><code>with open(\"rapor.txt\", \"w\") as rapor_dosyasi:\n    rapor_dosyasi.write(\"Bu ilk satır.\\n\") # \\n ile alt satıra geç\n    rapor_dosyasi.write(\"Bu ikinci satır.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Rapor Yaz",
      "description": "<code>'w'</code> modunda açılmış (gibi simüle edilen) <code>rapor</code> dosyasına <code>.write()</code> metodunu kullanarak <code>\"Tarama Sonucu: Güvenli\\n\"</code> metnini yazın. (Bu ortamda gerçek yazma işlemi olmayacak).",
      "hint": "<code>rapor.write(\"...\")</code>"
    },
    "default_code": "# Simülasyon: Dosyayı 'w' modunda açtık\nclass SahteDosya:\n    def write(self, metin):\n        print(f\"DOSYAYA YAZILDI: {metin.strip()}\")\nrapor = SahteDosya()\n\n# Dosyaya 'Tarama Sonucu: Güvenli\\n' yazdırın\n\n",
    "solution": "# Simülasyon: Dosyayı 'w' modunda açtık\nclass SahteDosya:\n    def write(self, metin):\n        print(f\"DOSYAYA YAZILDI: {metin.strip()}\")\nrapor = SahteDosya()\n\n# Dosyaya 'Tarama Sonucu: Güvenli\\n' yazdırın\nrapor.write(\"Tarama Sonucu: Güvenli\\n\")"
  },
  {
    "id": "U6_T1_E7",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosyaya Ekleme ('a')",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dosyaya Ekleme ('a')</h1><p>Mevcut bir dosyanın içeriğini silmeden, sonuna yeni veri eklemek için <code>'a'</code> (append) modunu kullanırız. Dosya yoksa, <code>'w'</code> gibi yeni dosya oluşturur.</p><pre><code># İlk yazma ('w' ile)\nwith open(\"log.txt\", \"w\") as f:\n    f.write(\"İlk log.\\n\")\n\n# Sonuna ekleme ('a' ile)\nwith open(\"log.txt\", \"a\") as f:\n    f.write(\"İkinci log.\\n\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Ekle",
      "description": "<code>'a'</code> modunda açılmış (gibi simüle edilen) <code>log</code> dosyasına <code>.write()</code> metodunu kullanarak <code>\"[WARN] Yeni uyarı eklendi.\\n\"</code> metnini ekleyin.",
      "hint": "<code>log.write(\"...\")</code>"
    },
    "default_code": "# Simülasyon: Dosyayı 'a' modunda açtık\nclass SahteDosya:\n    def __init__(self):\n        self.icerik = \"[INFO] Eski log\\n\"\n    def write(self, metin):\n        self.icerik += metin\n        print(f\"DOSYAYA EKLENDİ: {metin.strip()}\")\nlog = SahteDosya()\n\n# Dosyaya '[WARN] Yeni uyarı eklendi.\\n' ekleyin\n\n\n# print(log.icerik) # Gerçek içerik böyle olurdu",
    "solution": "# Simülasyon: Dosyayı 'a' modunda açtık\nclass SahteDosya:\n    def __init__(self):\n        self.icerik = \"[INFO] Eski log\\n\"\n    def write(self, metin):\n        self.icerik += metin\n        print(f\"DOSYAYA EKLENDİ: {metin.strip()}\")\nlog = SahteDosya()\n\n# Dosyaya '[WARN] Yeni uyarı eklendi.\\n' ekleyin\nlog.write(\"[WARN] Yeni uyarı eklendi.\\n\")"
  },
  {
    "id": "U6_T1_E8",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Liste Yazma (.writelines())",
    "difficulty": "Zor",
    "lesson_html": "<h1>Liste Yazma: .writelines()</h1><p>Elinizde string'lerden oluşan bir liste varsa ve her birini dosyaya ayrı bir satır olarak yazmak istiyorsanız, <code>.writelines(liste)</code> metodunu kullanabilirsiniz.</p><p><strong>Çok Önemli:</strong> <code>.writelines()</code> satır sonlarına otomatik olarak <code>\\n</code> eklemez! Eğer alt alta yazılmasını istiyorsanız, listedeki string'lerin sonunda <code>\\n</code> olduğundan emin olmalısınız.</p><pre><code>satirlar = [\"Satır 1\\n\", \"Satır 2\\n\", \"Satır 3\"]\nwith open(\"output.txt\", \"w\") as f:\n    f.writelines(satirlar)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Listesini Yaz",
      "description": "<code>ip_listesi</code> verilmiştir. Ancak elemanların sonunda <code>\\n</code> yoktur. List comprehension kullanarak her IP'nin sonuna <code>\\n</code> ekleyen <code>yazilacak_liste</code> adında yeni bir liste oluşturun. Ardından simüle edilmiş <code>yasakli_ips</code> dosyasına <code>.writelines()</code> ile bu yeni listeyi yazdırın.",
      "hint": "<code>yazilacak_liste = [ip + '\\n' for ip in ip_listesi]</code> ... <code>yasakli_ips.writelines(yazilacak_liste)</code>"
    },
    "default_code": "# Simülasyon: Dosyayı 'w' modunda açtık\nclass SahteDosya:\n    def writelines(self, satirlar):\n        for satir in satirlar:\n            print(f\"DOSYAYA YAZILDI: {satir.strip()}\")\nyasakli_ips = SahteDosya()\n\nip_listesi = [\"1.1.1.1\", \"2.2.2.2\", \"3.3.3.3\"]\n\n# Her IP'nin sonuna '\\n' ekleyen listeyi oluşturun\n\n\n# .writelines() ile yeni listeyi dosyaya yazdırın\n",
    "solution": "# Simülasyon: Dosyayı 'w' modunda açtık\nclass SahteDosya:\n    def writelines(self, satirlar):\n        for satir in satirlar:\n            print(f\"DOSYAYA YAZILDI: {satir.strip()}\")\nyasakli_ips = SahteDosya()\n\nip_listesi = [\"1.1.1.1\", \"2.2.2.2\", \"3.3.3.3\"]\n\n# Her IP'nin sonuna '\\n' ekleyen listeyi oluşturun\nyazilacak_liste = [ip + '\\n' for ip in ip_listesi]\n\n# .writelines() ile yeni listeyi dosyaya yazdırın\nyasakli_ips.writelines(yazilacak_liste)"
  },
  {
    "id": "U6_T1_E9",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosya Yolu (Path)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dosya Yolu (Path)</h1><p><code>open()</code> fonksiyonuna sadece dosya adı verirseniz, Python dosyayı kodun çalıştığı *aynı dizinde* arar veya oluşturur.</p><p>Farklı bir klasördeki dosyayla çalışmak için 'dosya yolunu' (path) belirtmeniz gerekir.</p><ul><li><b>Windows:</b> <code>open(\"C:\\Users\\Kullanici\\Belgeler\\log.txt\", \"r\")</code> (<code>\\</code> kullanılır)</li><li><b>Linux/macOS:</b> <code>open(\"/home/kullanici/loglar/log.txt\", \"r\")</code> (<code>/</code> kullanılır)</li></ul><p>Farklı işletim sistemlerinde sorunsuz çalışması için genellikle <code>pathlib</code> modülü kullanılır (daha ileri bir konu).</p>",
    "challenge": {
      "title": "Meydan Okuma: Linux Yolu",
      "description": "Linux sisteminde <code>/var/log/</code> klasöründeki <code>auth.log</code> dosyasını okuma modunda (<code>'r'</code>) açan (gibi simüle eden) bir <code>with open(...)</code> ifadesi yazın. Dosya nesnesine <code>f</code> adını verin ve blok içine <code>pass</code> koyun.",
      "hint": "<code>with open(\"/var/log/auth.log\", \"r\") as f: ...</code>"
    },
    "default_code": "# Linux dosya yolunu kullanarak dosyayı açın\n\n\nprint(\"Dosya yolu belirtildi.\")",
    "solution": "with open(\"/var/log/auth.log\", \"r\") as f:\n    pass\n\nprint(\"Dosya yolu belirtildi.\")"
  },
  {
    "id": "U6_T1_E10",
    "unit_id": 6,
    "topic_id": 1,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Dosya G/Ç",
    "title": "Dosya Varlığını Kontrol Etme (os.path)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dosya Varlığını Kontrol Etme (os.path)</h1><p>Okuma modunda (<code>'r'</code>) var olmayan bir dosyayı açmaya çalışmak <code>FileNotFoundError</code> hatası verir. Bunu önlemek için, dosyayı açmadan *önce* var olup olmadığını kontrol etmek iyi bir pratiktir.</p><p><code>os</code> modülünün <code>path.exists(dosya_yolu)</code> fonksiyonu bu işi yapar (<code>True</code>/<code>False</code> döndürür).</p><pre><code>import os\n\ndosya_adi = \"belki_yok.txt\"\n\nif os.path.exists(dosya_adi):\n    with open(dosya_adi, \"r\") as f:\n        print(\"Dosya bulundu ve açıldı.\")\nelse:\n    print(f\"{dosya_adi} bulunamadı.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Config Dosyası Kontrolü",
      "description": "<code>os</code> modülünü <code>import</code> edin. <code>config_dosyasi = \"settings.conf\"</code> adında bir değişken tanımlayın. <code>os.path.exists()</code> fonksiyonunu kullanarak bu dosyanın var olup olmadığını (simüle edilmiş olarak <code>False</code> dönecek) kontrol edin. Eğer varsa <code>\"Konfigürasyon okunuyor...\"</code>, yoksa (<code>else</code>) <code>\"Konfigürasyon dosyası bulunamadı!\"</code> yazdırın.",
      "hint": "<code>import os</code> ... <code>if os.path.exists(config_dosyasi): ... else: ...</code>"
    },
    "default_code": "# os modülünü içeri aktarın\n\n\nconfig_dosyasi = \"settings.conf\"\n\n# Simülasyon: Dosyanın var olmadığını varsayalım\nimport os\noriginal_exists = os.path.exists\nos.path.exists = lambda x: False if x == config_dosyasi else original_exists(x)\n\n# Dosyanın varlığını kontrol edip uygun mesajı yazdırın\n\n\n# Simülasyonu geri al (sonraki kodları etkilemesin)\nos.path.exists = original_exists",
    "solution": "import os\n\nconfig_dosyasi = \"settings.conf\"\n\n# Simülasyon:\noriginal_exists = os.path.exists\nos.path.exists = lambda x: False if x == config_dosyasi else original_exists(x)\n\nif os.path.exists(config_dosyasi):\n    print(\"Konfigürasyon okunuyor...\")\nelse:\n    print(\"Konfigürasyon dosyası bulunamadı!\")\n\nos.path.exists = original_exists"
  },
  {
    "id": "U6_T2_E1",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Hata Nedir? (Exception)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Hata Yönetimi (Exception Handling)</h1><p>Programlar çalışırken bazen beklenmedik durumlar oluşur ve bu durumlar 'hata' (exception) olarak adlandırılır. Örneğin, olmayan bir dosyayı açmaya çalışmak <code>FileNotFoundError</code>, sıfıra bölmeye çalışmak <code>ZeroDivisionError</code> hatası verir.</p><p>Eğer bu hatalar yönetilmezse (yakalanmazsa), program çalışmayı durdurur (çöker).</p><pre><code># Bu kod hata verir ve program çöker\nprint(10 / 0)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hatalı Kodu Gözlemle",
      "description": "Aşağıdaki kod, bir string ile bir sayıyı toplamaya çalıştığı için <code>TypeError</code> hatası verecektir. Kodu çalıştırın ve konsoldaki hata mesajını gözlemleyin. Sonraki alıştırmalarda bu tür hataları nasıl yöneteceğimizi göreceğiz. Bu alıştırmayı geçmek için <code># Hatayı gördüm</code> yorumunu ekleyin.",
      "hint": "Editöre <code># Hatayı gördüm</code> yazın."
    },
    "default_code": "port = 80\nmesaj = \"Port: \"\n\n# Bu satır TypeError verir\nprint(mesaj + port)\n\n# Buraya yorum ekleyin\n",
    "solution": "port = 80\nmesaj = \"Port: \"\n\n# Bu satır TypeError verir\n# print(mesaj + port)\n\n# Hatayı gördüm"
  },
  {
    "id": "U6_T2_E2",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Temel Hata Yakalama (try/except)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Hata Yakalama: 'try' ve 'except'</h1><p>Bir kod bloğunun hata verebileceğini öngörüyorsak, onu <code>try:</code> bloğunun içine alırız. Eğer <code>try</code> bloğu içinde bir hata oluşursa, program çökmez; bunun yerine Python hemen <code>except:</code> bloğuna atlar ve oradaki kodu çalıştırır.</p><p>Eğer <code>try</code> bloğunda hata oluşmazsa, <code>except</code> bloğu tamamen atlanır.</p><pre><code>try:\n    # Hata verebilecek kod\n    sonuc = 10 / 0 \n    print(\"İşlem başarılı\") # Bu satır çalışmaz\nexcept:\n    # Hata oluşursa burası çalışır\n    print(\"Bir hata oluştu!\")\n\nprint(\"Program devam ediyor...\") # Program çökmediği için bu satır çalışır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sıfıra Bölme Hatasını Yakala",
      "description": "<code>10 / 0</code> işlemini bir <code>try:</code> bloğu içine alın. Hata oluşması durumunda (ki oluşacak), <code>except:</code> bloğunda <code>\"Sıfıra bölme hatası yakalandı!\"</code> mesajını yazdırın.",
      "hint": "<code>try: ... 10 / 0 ... except: ... print(...)</code>"
    },
    "default_code": "# try/except bloğunu buraya yazın\n\n\nprint(\"Program sonlandı.\")",
    "solution": "try:\n    sonuc = 10 / 0\n    print(\"Bu mesaj görünmeyecek\")\nexcept:\n    print(\"Sıfıra bölme hatası yakalandı!\")\n\nprint(\"Program sonlandı.\")"
  },
  {
    "id": "U6_T2_E3",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Belirli Hataları Yakalama",
    "difficulty": "Orta",
    "lesson_html": "<h1>Belirli Hataları Yakalama</h1><p>Genel bir <code>except:</code> bloğu tüm hataları yakalar, ancak bu genellikle iyi bir pratik değildir. Hangi tür hatayı beklediğimizi belirtmek daha doğrudur. Böylece farklı hatalara farklı tepkiler verebiliriz.</p><pre><code>try:\n    sayi = int(\"abc\") # Bu ValueError verir\nexcept ValueError:\n    print(\"Lütfen geçerli bir sayı girin!\")\nexcept ZeroDivisionError:\n    print(\"Sıfıra bölemezsiniz!\")\n# except Exception: # Diğer tüm hatalar için (opsiyonel)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: ValueError Yakala",
      "description": "Kullanıcıdan sayı beklerken metin girildiğini varsayalım. <code>int(\"metin\")</code> kodunu <code>try</code> bloğuna alın. Özellikle <code>ValueError</code> hatasını yakalamak için <code>except ValueError:</code> bloğunu kullanın ve içinde <code>\"Geçersiz sayı formatı\"</code> yazdırın.",
      "hint": "<code>try: ... int(\"metin\") ... except ValueError: ... print(...)</code>"
    },
    "default_code": "# try/except ValueError bloğunu buraya yazın\n\n\nprint(\"Devam ediyor...\")",
    "solution": "try:\n    sayi = int(\"metin\")\n    print(f\"Sayı: {sayi}\")\nexcept ValueError:\n    print(\"Geçersiz sayı formatı\")\n\nprint(\"Devam ediyor...\")"
  },
  {
    "id": "U6_T2_E4",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Dosya Bulunamadı Hatası (FileNotFoundError)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dosya Bulunamadı Hatası</h1><p>Var olmayan bir dosyayı 'r' modunda açmaya çalışmak <code>FileNotFoundError</code> hatası verir. Bu, <code>try/except</code> ile yönetilmesi gereken yaygın bir durumdur.</p><pre><code>try:\n    with open(\"olmayan_dosya.txt\", \"r\") as f:\n        icerik = f.read()\nexcept FileNotFoundError:\n    print(\"Hata: Dosya bulunamadı!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Dosyası Yok",
      "description": "<code>open(\"yok_log.log\", \"r\")</code> komutunu <code>try</code> bloğuna alın. <code>FileNotFoundError</code> hatasını yakalayın ve <code>except</code> bloğunda <code>\"Log dosyası mevcut değil.\"</code> yazdırın.",
      "hint": "<code>try: ... open(...) ... except FileNotFoundError: ... print(...)</code>"
    },
    "default_code": "# try/except FileNotFoundError bloğunu buraya yazın\n\n\nprint(\"İşlem tamamlandı.\")",
    "solution": "try:\n    with open(\"yok_log.log\", \"r\") as f:\n        print(\"Dosya açıldı (açılmamalı)\")\nexcept FileNotFoundError:\n    print(\"Log dosyası mevcut değil.\")\n\nprint(\"İşlem tamamlandı.\")"
  },
  {
    "id": "U6_T2_E5",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Hata Mesajını Alma ('as e')",
    "difficulty": "Orta",
    "lesson_html": "<h1>Hata Mesajını Alma ('as e')</h1><p><code>except</code> bloğunda, oluşan hatanın detaylarını içeren 'exception nesnesini' alabilirsiniz. Bunu yapmak için <code>except HataTipi as degisken_adi:</code> sözdizimi kullanılır (genellikle <code>as e</code> veya <code>as ex</code>).</p><pre><code>try:\n    sonuc = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Bir hata oluştu: {e}\") # Hatayı yazdırır</code></pre><p>Çıktı: <code>Bir hata oluştu: division by zero</code></p>",
    "challenge": {
      "title": "Meydan Okuma: Hata Detayını Yazdır",
      "description": "<code>int(\"geçersiz\")</code> kodunu <code>try</code> içine alın. <code>ValueError</code> hatasını <code>as hata_mesaji</code> kullanarak yakalayın ve <code>except</code> bloğunda <code>f\"Detaylı hata: {hata_mesaji}\"</code> formatında yazdırın.",
      "hint": "<code>except ValueError as hata_mesaji: ... print(f\"...{hata_mesaji}\")</code>"
    },
    "default_code": "# try/except as e bloğunu buraya yazın\n",
    "solution": "try:\n    sayi = int(\"geçersiz\")\nexcept ValueError as hata_mesaji:\n    print(f\"Detaylı hata: {hata_mesaji}\")"
  },
  {
    "id": "U6_T2_E6",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Birden Fazla Hata Türü Yakalama (Tuple)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Birden Fazla Hata Yakalama</h1><p>Aynı <code>except</code> bloğunda birden fazla hata türünü yakalamak isterseniz, hata türlerini bir demet (tuple) <code>()</code> içine alabilirsiniz.</p><pre><code>try:\n    deger = input(\"Bir sayı girin: \")\n    sayi = int(deger)\n    sonuc = 100 / sayi\nexcept (ValueError, ZeroDivisionError) as e:\n    print(f\"Hatalı giriş veya sıfıra bölme: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İki Hata",
      "description": "<code>try</code> bloğuna <code>bolunen / bolen</code> işlemini koyun. Hem <code>ZeroDivisionError</code> hem de <code>TypeError</code> hatalarını (eğer <code>bolen</code> bir string olursa) tek bir <code>except</code> bloğunda <code>(ZeroDivisionError, TypeError)</code> olarak yakalayın ve <code>\"Geçersiz işlem\"</code> yazdırın. Kodu önce <code>bolen=0</code>, sonra <code>bolen=\"iki\"</code> ile (ayrı ayrı) test edin.",
      "hint": "<code>except (ZeroDivisionError, TypeError): ...</code>"
    },
    "default_code": "bolunen = 10\nbolen = 0 # Bu değeri \"iki\" olarak da değiştirip deneyin\n\ntry:\n    sonuc = bolunen / bolen\n    print(f\"Sonuç: {sonuc}\")\n# İki hatayı yakalayan except bloğunu buraya yazın\nexcept:\n    print(\"Beklenmedik bir hata\") # Bu satırı değiştirin\n",
    "solution": "bolunen = 10\n# bolen = 0 \nbolen = \"iki\" # Farklı hataları test etmek için değiştirin\n\ntry:\n    sonuc = bolunen / bolen\n    print(f\"Sonuç: {sonuc}\")\nexcept (ZeroDivisionError, TypeError) as e:\n    print(f\"Geçersiz işlem: {e}\")"
  },
  {
    "id": "U6_T2_E7",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "'else' Bloğu",
    "difficulty": "Orta",
    "lesson_html": "<h1>'else' Bloğu</h1><p><code>try/except</code> yapısına bir <code>else:</code> bloğu da eklenebilir. Bu blok, <strong>sadece <code>try</code> bloğunda hiçbir hata oluşmazsa</strong> çalıştırılır.</p><p>Bu, 'hata vermesi muhtemel' kod ile 'hata oluşmazsa yapılacaklar' kodunu ayırmak için kullanışlıdır.</p><pre><code>try:\n    sayi = int(\"10\")\nexcept ValueError:\n    print(\"Hatalı giriş\")\nelse:\n    # Hata oluşmadığı için burası çalışır\n    print(f\"Sayı başarıyla okundu: {sayi}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Başarılı Dosya Okuma",
      "description": "<code>try</code> bloğunda (simüle edilmiş) <code>config.txt</code> dosyasını okuyun. <code>except FileNotFoundError</code> bloğunda hata mesajı yazdırın. <code>else:</code> bloğunda ise (yani dosya başarıyla okunduysa) <code>\"Konfigürasyon başarıyla okundu\"</code> mesajını yazdırın. (Dosya var olduğu için <code>else</code> bloğu çalışmalı).",
      "hint": "<code>try: ... except ...: ... else: ... print(...)</code>"
    },
    "default_code": "dosya_adi = \"config.txt\"\n\n# Simülasyon: Dosyanın var olduğunu varsayalım\nclass SahteOkuma:\n    def read(self): return \"icerik\"\n\ntry:\n    print(f\"'{dosya_adi}' açılıyor...\")\n    # with open(dosya_adi, 'r') as f:\n    #     icerik = f.read() # Gerçek kod böyle olurdu\n    icerik = SahteOkuma().read()\n    print(\"Okuma denemesi tamamlandı.\")\nexcept FileNotFoundError:\n    print(\"Dosya bulunamadı\")\n# 'else' bloğunu buraya ekleyin\n",
    "solution": "dosya_adi = \"config.txt\"\n\nclass SahteOkuma:\n    def read(self): return \"icerik\"\n\ntry:\n    print(f\"'{dosya_adi}' açılıyor...\")\n    icerik = SahteOkuma().read()\n    print(\"Okuma denemesi tamamlandı.\")\nexcept FileNotFoundError:\n    print(\"Dosya bulunamadı\")\nelse:\n    print(\"Konfigürasyon başarıyla okundu\")"
  },
  {
    "id": "U6_T2_E8",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "'finally' Bloğu",
    "difficulty": "Orta",
    "lesson_html": "<h1>'finally' Bloğu</h1><p><code>finally:</code> bloğu, <code>try</code> bloğunda hata oluşsa da oluşmasa da, <strong>her zaman en sonda</strong> çalıştırılır. Bu, 'ne olursa olsun yapılması gereken' temizlik işlemleri (örn: açık bırakılmış ağ bağlantısını kapatmak, geçici dosyayı silmek) için kullanılır.</p><p>(<code>with open</code> zaten dosyayı otomatik kapattığı için dosya işlemlerinde <code>finally</code>'ye genellikle gerek kalmaz.)</p><pre><code>try:\n    print(\"Kaynak açılıyor...\")\n    # sonuc = 10 / 0 # Hata olsa da...\n    sonuc = 10 / 2 # Hata olmasa da...\nexcept ZeroDivisionError:\n    print(\"Sıfıra bölme hatası\")\nfinally:\n    # Bu blok her zaman çalışır\n    print(\"Kaynak kapatılıyor...\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bağlantıyı Kapat",
      "description": "<code>try</code> bloğunda (simüle edilmiş) bir ağ bağlantısı açın ve veri gönderin. Olası bir <code>ConnectionError</code>'ı <code>except</code> ile yakalayın. Hata olsa da olmasa da çalışacak bir <code>finally:</code> bloğu ekleyin ve içinde <code>\"Bağlantı kapatıldı.\"</code> yazdırın.",
      "hint": "<code>try: ... except ConnectionError: ... finally: ... print(...)</code>"
    },
    "default_code": "# Simülasyon için hata tanımlama\nclass ConnectionError(Exception): pass\n\ntry:\n    print(\"Bağlantı açılıyor...\")\n    # Simülasyon: Bağlantı hatası oluşabilir\n    # raise ConnectionError(\"Bağlantı koptu\") \n    print(\"Veri gönderildi.\")\nexcept ConnectionError as e:\n    print(f\"Hata: {e}\")\n# 'finally' bloğunu buraya ekleyin\n",
    "solution": "# Simülasyon için hata tanımlama\nclass ConnectionError(Exception): pass\n\ntry:\n    print(\"Bağlantı açılıyor...\")\n    # Simülasyon: Bağlantı hatası oluşabilir\n    # raise ConnectionError(\"Bağlantı koptu\") \n    print(\"Veri gönderildi.\")\nexcept ConnectionError as e:\n    print(f\"Hata: {e}\")\nfinally:\n    print(\"Bağlantı kapatıldı.\")"
  },
  {
    "id": "U6_T2_E9",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Hata Fırlatma (raise)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Hata Fırlatma (raise)</h1><p>Bazen hataları sadece yakalamak değil, belirli bir koşul sağlandığında kendi hatamızı *kasıtlı olarak* fırlatmak (oluşturmak) isteriz. Bunu <code>raise</code> anahtar kelimesi ve bir Hata Sınıfı (örn: <code>ValueError</code>, <code>TypeError</code> veya kendi tanımladığımız bir hata) ile yaparız.</p><pre><code>def parola_kontrol(parola):\n    if len(parola) < 8:\n        # Kasıtlı olarak hata fırlat\n        raise ValueError(\"Parola en az 8 karakter olmalı!\")\n    print(\"Parola geçerli.\")\n\ntry:\n    parola_kontrol(\"123\")\nexcept ValueError as e:\n    print(f\"Parola hatası: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Geçersiz Port",
      "description": "<code>port_tara</code> adında <code>port</code> parametresi alan bir fonksiyon yazın. Eğer <code>port</code> 0'dan küçük VEYA 65535'ten büyükse, <code>raise ValueError(\"Geçersiz port numarası\")</code> komutuyla bir hata fırlatın. Değilse, <code>f\"{port} taranıyor\"</code> yazdırın. Fonksiyonu <code>try/except ValueError</code> bloğu içinde <code>-5</code> portu ile çağırarak hatayı yakalayın ve mesajını yazdırın.",
      "hint": "<code>def ...: if port < 0 or port > 65535: raise ValueError(...) ... print(...)</code> ... <code>try: ... port_tara(-5) ... except ValueError as e: ...</code>"
    },
    "default_code": "# Fonksiyonu 'raise' ile burada tanımlayın\n\n\n# try/except bloğu içinde fonksiyonu çağırın\n",
    "solution": "# Fonksiyonu 'raise' ile burada tanımlayın\ndef port_tara(port):\n    if port < 0 or port > 65535:\n        raise ValueError(\"Geçersiz port numarası\")\n    print(f\"{port} taranıyor\")\n\n# try/except bloğu içinde fonksiyonu çağırın\ntry:\n    port_tara(-5)\nexcept ValueError as e:\n    print(f\"Hata yakalandı: {e}\")"
  },
  {
    "id": "U6_T2_E10",
    "unit_id": 6,
    "topic_id": 2,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Hata Yönetimi",
    "title": "Özel Hata Sınıfı",
    "difficulty": "Zor",
    "lesson_html": "<h1>Özel Hata Sınıfı</h1><p>Daha spesifik hata türleri tanımlamak için Python'un yerleşik <code>Exception</code> sınıfından miras alan kendi hata sınıflarımızı oluşturabiliriz.</p><pre><code># Kendi hata sınıfımız\nclass GuvenlikDuvariHatasi(Exception):\n    pass\n\ndef kural_ekle(kural):\n    if \"yasakli\" in kural:\n        raise GuvenlikDuvariHatasi(\"Yasaklı kural içeriyor!\")\n    print(\"Kural eklendi.\")\n\ntry:\n    kural_ekle(\"yasakli kural\")\nexcept GuvenlikDuvariHatasi as e:\n    print(f\"Özel hata: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kimlik Doğrulama Hatası",
      "description": "<code>Exception</code>'dan miras alan <code>KimlikDogrulamaHatasi</code> adında boş (<code>pass</code>) bir hata sınıfı tanımlayın. <code>giris_yap</code> adında bir fonksiyon yazın; eğer <code>parola != \"1234\"</code> ise bu özel <code>KimlikDogrulamaHatasi</code>'nı <code>raise</code> etsin. <code>try/except KimlikDogrulamaHatasi</code> bloğunda fonksiyonu yanlış parolayla (\"sifre\") çağırın ve hatayı yakalayıp <code>\"Giriş başarısız!\"</code> yazdırın.",
      "hint": "<code>class KimlikDogrulamaHatasi(Exception): pass</code> ... <code>def giris_yap(parola): if ...: raise KimlikDogrulamaHatasi()</code> ... <code>try: ... except KimlikDogrulamaHatasi: ...</code>"
    },
    "default_code": "# Özel hata sınıfını burada tanımlayın\n\n\n# 'giris_yap' fonksiyonunu burada tanımlayın\n\n\n# try/except bloğunu burada yazın\n",
    "solution": "# Özel hata sınıfını burada tanımlayın\nclass KimlikDogrulamaHatasi(Exception):\n    pass\n\n# 'giris_yap' fonksiyonunu burada tanımlayın\ndef giris_yap(parola):\n    if parola != \"1234\":\n        raise KimlikDogrulamaHatasi(\"Yanlış parola\")\n    print(\"Giriş başarılı\")\n\n# try/except bloğunu burada yazın\ntry:\n    giris_yap(\"sifre\")\nexcept KimlikDogrulamaHatasi as e:\n    print(f\"Giriş başarısız! Detay: {e}\")"
  },
  {
    "id": "U6_T3_E1",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Decorator Nedir? (Fonksiyon Sarmalama)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Decorators</h1><p>Decorator'lar, bir fonksiyonu alıp, ona ek özellikler katıp, (genellikle) yeni bir fonksiyon döndüren fonksiyonlardır. Bu, mevcut fonksiyonun kodunu değiştirmeden davranışını genişletmek için kullanılır.</p><p>Temel fikir şudur: Bir fonksiyon (decorator), başka bir fonksiyonu (dekore edilen) argüman olarak alır, içinde yeni bir 'sarmalayıcı' (wrapper) fonksiyon tanımlar, bu wrapper orijinal fonksiyonu çağırır (ve öncesinde/sonrasında ekstra işler yapar) ve sonunda bu wrapper fonksiyonunu döndürür.</p><pre><code># Bu decorator fonksiyonu\ndef basit_decorator(func):\n    def wrapper():\n        print(\"Fonksiyondan önce...\")\n        func() # Orijinal fonksiyonu çağır\n        print(\"Fonksiyondan sonra...\")\n    return wrapper # Yeni fonksiyonu döndür\n\n# Dekore edilecek fonksiyon\ndef merhaba():\n    print(\"Merhaba dünya!\")\n\n# Decorator'ı manuel uygula\ngelistirilmis_merhaba = basit_decorator(merhaba)\ngelistirilmis_merhaba()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Manuel Decorator Uygula",
      "description": "<code>loglama_decorator</code> ve <code>islem_yap</code> fonksiyonları verilmiştir. <code>loglama_decorator</code>'ı <code>islem_yap</code> fonksiyonuna manuel olarak uygulayın: <code>loglanmis_islem = loglama_decorator(islem_yap)</code> satırını yazın ve ardından <code>loglanmis_islem()</code> fonksiyonunu çağırarak decorator'ın çalıştığını (öncesi/sonrası logların çıktığını) görün.",
      "hint": "Önce atama yapın, sonra yeni değişkeni fonksiyon gibi çağırın."
    },
    "default_code": "def loglama_decorator(func):\n    def wrapper():\n        print(\"LOG: İşlem başlıyor...\")\n        func()\n        print(\"LOG: İşlem bitti.\")\n    return wrapper\n\ndef islem_yap():\n    print(\"Asıl işlem yapılıyor.\")\n\n# Decorator'ı manuel olarak burada uygulayın ve çağırın\n",
    "solution": "def loglama_decorator(func):\n    def wrapper():\n        print(\"LOG: İşlem başlıyor...\")\n        func()\n        print(\"LOG: İşlem bitti.\")\n    return wrapper\n\ndef islem_yap():\n    print(\"Asıl işlem yapılıyor.\")\n\nloglanmis_islem = loglama_decorator(islem_yap)\nloglanmis_islem()"
  },
  {
    "id": "U6_T3_E2",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Decorator Sözdizimi (@)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Decorator Sözdizimi (@)</h1><p>Python, decorator uygulamayı çok daha kolaylaştıran özel bir sözdizimi sunar: <code>@</code> sembolü.</p><p>Dekore etmek istediğiniz fonksiyonun <code>def</code> satırının hemen üstüne <code>@decorator_fonksiyon_adi</code> yazmak, bir önceki derste manuel olarak yaptığımız <code>fonksiyon = decorator(fonksiyon)</code> atamasıyla tamamen aynı anlama gelir.</p><pre><code>def basit_decorator(func):\n    # ... (wrapper tanımı içinde)\n    return wrapper\n\n# '@' ile decorator'ı uygula\n@basit_decorator\ndef merhaba():\n    print(\"Merhaba dünya!\")\n\n# Artık doğrudan 'merhaba()' çağrılabilir\nmerhaba() # Wrapper fonksiyonu çalışır</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: @ ile Loglama",
      "description": "<code>loglama_decorator</code> ve <code>islem_yap</code> fonksiyonları verilmiştir. Bu kez decorator'ı manuel olarak uygulamak yerine, <code>islem_yap</code> fonksiyonunun tanımının (<code>def</code> satırının) hemen üstüne <code>@loglama_decorator</code> satırını ekleyin. Ardından doğrudan <code>islem_yap()</code> fonksiyonunu çağırın.",
      "hint": "<code>def islem_yap():</code> satırının üstüne <code>@loglama_decorator</code> yazın."
    },
    "default_code": "def loglama_decorator(func):\n    def wrapper():\n        print(\"LOG: İşlem başlıyor...\")\n        func()\n        print(\"LOG: İşlem bitti.\")\n    return wrapper\n\n# Decorator'ı '@' ile buraya uygulayın\ndef islem_yap():\n    print(\"Asıl işlem yapılıyor.\")\n\n# Doğrudan 'islem_yap' fonksiyonunu çağırın\n",
    "solution": "def loglama_decorator(func):\n    def wrapper():\n        print(\"LOG: İşlem başlıyor...\")\n        func()\n        print(\"LOG: İşlem bitti.\")\n    return wrapper\n\n@loglama_decorator\ndef islem_yap():\n    print(\"Asıl işlem yapılıyor.\")\n\n# Doğrudan 'islem_yap' fonksiyonunu çağırın\nislem_yap()"
  },
  {
    "id": "U6_T3_E3",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Argüman Alan Fonksiyonları Dekore Etme",
    "difficulty": "Zor",
    "lesson_html": "<h1>Argüman Alan Fonksiyonları Dekore Etme</h1><p>Eğer dekore ettiğimiz fonksiyon argüman alıyorsa (örn: <code>topla(a, b)</code>), decorator içindeki <code>wrapper</code> fonksiyonunun da bu argümanları alıp orijinal fonksiyona iletmesi gerekir. Bunun en esnek yolu <code>*args</code> ve <code>**kwargs</code> kullanmaktır.</p><pre><code>def arg_decorator(func):\n    # Wrapper da *args, **kwargs almalı\n    def wrapper(*args, **kwargs):\n        print(f\"Argümanlar: {args}, {kwargs}\")\n        func(*args, **kwargs) # Argümanları orijinal fonksiyona ilet\n    return wrapper\n\n@arg_decorator\ndef topla(a, b):\n    print(f\"Toplam: {a + b}\")\n\ntopla(10, 5)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Tarama Loglama",
      "description": "<code>loglama_decorator</code>'ın içindeki <code>wrapper</code> fonksiyonunu, <code>*args</code> ve <code>**kwargs</code> alacak ve bunları orijinal fonksiyona (<code>func</code>) iletecek şekilde güncelleyin. Ardından <code>ip_tara(ip_adresi)</code> fonksiyonunu (decorator uygulanmış halde) bir IP adresi argümanıyla çağırın.",
      "hint": "<code>def wrapper(*args, **kwargs): ... func(*args, **kwargs) ...</code>"
    },
    "default_code": "def loglama_decorator(func):\n    # Bu wrapper'ı *args, **kwargs alacak şekilde güncelleyin\n    def wrapper(): \n        print(\"LOG: Tarama başlıyor...\")\n        func() # Argümanları buraya iletin\n        print(\"LOG: Tarama bitti.\")\n    return wrapper\n\n@loglama_decorator\ndef ip_tara(ip_adresi):\n    print(f\"{ip_adresi} taranıyor.\")\n\n# Fonksiyonu bir IP adresi ile çağırın\nip_tara(\"192.168.1.1\")",
    "solution": "def loglama_decorator(func):\n    def wrapper(*args, **kwargs):\n        # args[0]'ı kullanarak IP'yi loglayabiliriz (daha güvenli yolları var)\n        ip = args[0] if args else 'Bilinmeyen IP'\n        print(f\"LOG: {ip} tarama başlıyor...\")\n        func(*args, **kwargs)\n        print(f\"LOG: {ip} tarama bitti.\")\n    return wrapper\n\n@loglama_decorator\ndef ip_tara(ip_adresi):\n    print(f\"{ip_adresi} taranıyor.\")\n\nip_tara(\"192.168.1.1\")"
  },
  {
    "id": "U6_T3_E4",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Değer Döndüren Fonksiyonları Dekore Etme",
    "difficulty": "Zor",
    "lesson_html": "<h1>Değer Döndüren Fonksiyonları Dekore Etme</h1><p>Eğer dekore edilen fonksiyon bir değer <code>return</code> ediyorsa, <code>wrapper</code> fonksiyonunun da bu değeri alıp dışarıya <code>return</code> etmesi gerekir. Aksi takdirde, dekore edilmiş fonksiyon çağrıldığında <code>None</code> döndürür.</p><pre><code>def sonuc_loglama_decorator(func):\n    def wrapper(*args, **kwargs):\n        sonuc = func(*args, **kwargs) # Orijinal fonksiyonun sonucunu al\n        print(f\"Fonksiyon sonucu: {sonuc}\")\n        return sonuc # Sonucu dışarıya döndür\n    return wrapper\n\n@sonuc_loglama_decorator\ndef topla(a, b):\n    return a + b\n\nhesap = topla(10, 5)\nprint(f\"Hesaplanan değer: {hesap}\") # Sonuç None olmaz</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Durumunu Döndür",
      "description": "<code>zaman_olc_decorator</code> verilmiştir. <code>port_kontrol</code> fonksiyonu bir string ('Açık'/'Kapalı') <code>return</code> etmektedir. Decorator'ın <code>wrapper</code> fonksiyonunu, <code>port_kontrol</code>'den dönen değeri yakalayıp <code>return</code> edecek şekilde güncelleyin. Dekore edilmiş fonksiyonu çağırın ve dönen <code>durum</code>'u yazdırın.",
      "hint": "<code>wrapper</code> içinde: <code>sonuc = func(*args, **kwargs) ... return sonuc</code>"
    },
    "default_code": "import time\n\ndef zaman_olc_decorator(func):\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        # Orijinal fonksiyonu çağırıp sonucunu alın\n        func(*args, **kwargs) # Bu satırı güncelleyin\n        bitis = time.time()\n        print(f\"Süre: {bitis - baslangic:.4f}s\")\n        # Sonucu burada return edin\n    return wrapper\n\n@zaman_olc_decorator\ndef port_kontrol(port):\n    # Simülasyon\n    time.sleep(0.1)\n    if port == 80:\n        return \"Açık\"\n    else:\n        return \"Kapalı\"\n\ndurum = port_kontrol(80)\nprint(f\"Port Durumu: {durum}\") # Hedef: None yerine 'Açık' yazdırmalı",
    "solution": "import time\n\ndef zaman_olc_decorator(func):\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs) # Sonucu al\n        bitis = time.time()\n        print(f\"Süre: {bitis - baslangic:.4f}s\")\n        return sonuc # Sonucu döndür\n    return wrapper\n\n@zaman_olc_decorator\ndef port_kontrol(port):\n    time.sleep(0.1)\n    if port == 80:\n        return \"Açık\"\n    else:\n        return \"Kapalı\"\n\ndurum = port_kontrol(80)\nprint(f\"Port Durumu: {durum}\")"
  },
  {
    "id": "U6_T3_E5",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Pratik Örnek: Zaman Ölçümü",
    "difficulty": "Zor",
    "lesson_html": "<h1>Pratik Örnek: Fonksiyon Çalışma Süresi</h1><p>Decorator'ların yaygın bir kullanımı, bir fonksiyonun ne kadar sürede çalıştığını ölçmektir. <code>time</code> modülü bunun için kullanılır.</p><pre><code>import time\n\ndef zaman_olc(func):\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs)\n        bitis = time.time()\n        print(f\"{func.__name__} fonksiyonu {bitis - baslangic:.4f} saniyede çalıştı.\")\n        return sonuc\n    return wrapper\n\n@zaman_olc\ndef uzun_islem():\n    time.sleep(0.5) # 0.5 saniye bekle\n\nuzun_islem()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tarama Süresini Ölç",
      "description": "Yukarıda tanımlanan <code>zaman_olc</code> decorator'ını <code>ag_taramasi</code> fonksiyonuna <code>@</code> ile uygulayın. Ardından <code>ag_taramasi()</code> fonksiyonunu çağırarak çalışma süresinin yazdırıldığını görün.",
      "hint": "<code>def ag_taramasi():</code> satırının üstüne <code>@zaman_olc</code> yazın."
    },
    "default_code": "import time\n\ndef zaman_olc(func):\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs)\n        bitis = time.time()\n        # func.__name__ fonksiyonun adını verir\n        print(f\"{func.__name__} fonksiyonu {bitis - baslangic:.4f} saniyede çalıştı.\")\n        return sonuc\n    return wrapper\n\n# Decorator'ı buraya uygulayın\ndef ag_taramasi():\n    print(\"Ağ taranıyor...\")\n    time.sleep(0.2) # Simülasyon\n    print(\"Tarama tamamlandı.\")\n\n# Fonksiyonu çağırın\n",
    "solution": "import time\n\ndef zaman_olc(func):\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs)\n        bitis = time.time()\n        print(f\"{func.__name__} fonksiyonu {bitis - baslangic:.4f} saniyede çalıştı.\")\n        return sonuc\n    return wrapper\n\n@zaman_olc\ndef ag_taramasi():\n    print(\"Ağ taranıyor...\")\n    time.sleep(0.2)\n    print(\"Tarama tamamlandı.\")\n\nag_taramasi()"
  },
  {
    "id": "U6_T3_E6",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Pratik Örnek: Loglama",
    "difficulty": "Zor",
    "lesson_html": "<h1>Pratik Örnek: Fonksiyon Çağrılarını Loglama</h1><p>Decorator'lar, hangi fonksiyonun ne zaman ve hangi argümanlarla çağrıldığını loglamak için mükemmeldir.</p><pre><code>def cagri_logla(func):\n    def wrapper(*args, **kwargs):\n        print(f\"LOG: {func.__name__} çağrıldı. Args={args}, Kwargs={kwargs}\")\n        sonuc = func(*args, **kwargs)\n        print(f\"LOG: {func.__name__} tamamlandı. Sonuç={sonuc}\")\n        return sonuc\n    return wrapper\n\n@cagri_logla\ndef kullanici_ekle(isim, yetki=\"guest\"):\n    print(f\"{isim} ekleniyor...\")\n    return True\n\nkullanici_ekle(\"admin\", yetki=\"root\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Erişim Loglama",
      "description": "Yukarıda tanımlanan <code>cagri_logla</code> decorator'ını <code>veritabani_erisim</code> fonksiyonuna uygulayın. Ardından fonksiyonu bir argümanla (örn: <code>\"kullanici_tablosu\"</code>) çağırarak logların çıktığını görün.",
      "hint": "<code>@cagri_logla</code>"
    },
    "default_code": "def cagri_logla(func):\n    def wrapper(*args, **kwargs):\n        print(f\"LOG: {func.__name__} çağrıldı. Args={args}, Kwargs={kwargs}\")\n        sonuc = func(*args, **kwargs)\n        print(f\"LOG: {func.__name__} tamamlandı. Sonuç={sonuc}\")\n        return sonuc\n    return wrapper\n\n# Decorator'ı buraya uygulayın\ndef veritabani_erisim(tablo_adi):\n    print(f\"{tablo_adi} tablosuna erişiliyor...\")\n    return \"Veri alındı\"\n\n# Fonksiyonu bir argümanla çağırın\n",
    "solution": "def cagri_logla(func):\n    def wrapper(*args, **kwargs):\n        print(f\"LOG: {func.__name__} çağrıldı. Args={args}, Kwargs={kwargs}\")\n        sonuc = func(*args, **kwargs)\n        print(f\"LOG: {func.__name__} tamamlandı. Sonuç={sonuc}\")\n        return sonuc\n    return wrapper\n\n@cagri_logla\ndef veritabani_erisim(tablo_adi):\n    print(f\"{tablo_adi} tablosuna erişiliyor...\")\n    return \"Veri alındı\"\n\nveritabani_erisim(\"kullanici_tablosu\")"
  },
  {
    "id": "U6_T3_E7",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Decorator Argümanları (Decorator Factory)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Argüman Alan Decorator'lar</h1><p>Bazen decorator'ın davranışını dışarıdan bir argümanla (örn: kaç kez deneneceği, hangi log seviyesi kullanılacağı) kontrol etmek isteriz. Bunu yapmak için 'decorator factory' (decorator üreten fabrika) adı verilen bir yapı kullanılır.</p><p>Bu, 3 katmanlı bir fonksiyondur: En dıştaki fonksiyon decorator'ın argümanlarını alır ve *asıl decorator fonksiyonunu* (ikinci katman) döndürür. Asıl decorator, dekore edilecek fonksiyonu alır ve *wrapper* fonksiyonunu (üçüncü katman) döndürür.</p><pre><code># Decorator Factory\ndef tekrarla(adet):\n    # Asıl Decorator\n    def decorator(func):\n        # Wrapper\n        def wrapper(*args, **kwargs):\n            for _ in range(adet):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# Decorator'a argüman gönder (@ ile)\n@tekrarla(adet=3)\ndef bip_ver():\n    print(\"Bip!\")\n\nbip_ver() # 3 kez \"Bip!\" yazar</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Yetki Kontrolü Decorator'ı",
      "description": "<code>yetki_gerekli(gerekli_yetki)</code> adında bir 'decorator factory' tanımlayın. Bu, <code>decorator(func)</code>'ı, o da <code>wrapper(*args, **kwargs)</code>'ı döndürmeli. <code>wrapper</code> içinde, fonksiyonun <code>kwargs</code>'ında <code>'aktif_yetki'</code> anahtarının değerinin <code>gerekli_yetki</code>'ye eşit olup olmadığını kontrol edin. Eşitse <code>func</code>'ı çalıştırın, değilse <code>\"Yetki Yetersiz!\"</code> yazdırın. Bu decorator'ı <code>@yetki_gerekli(gerekli_yetki=\"admin\")</code> şeklinde <code>gizli_islem</code> fonksiyonuna uygulayın ve <code>aktif_yetki=\"user\"</code> ile çağırarak test edin.",
      "hint": "3 iç içe <code>def</code> olacak. En içteki <code>wrapper</code>'da <code>if kwargs.get('aktif_yetki') == gerekli_yetki: ... else: ...</code> kontrolü yapın."
    },
    "default_code": "def yetki_gerekli(gerekli_yetki):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            # Yetki kontrolünü burada yapın\n            print(\"Kontrol ediliyor...\") # Örnek\n            # func(*args, **kwargs) # Eğer yetki varsa çağır\n            # else:\n            #     print(\"Yetki Yetersiz!\")\n            pass # Bu pass'ı silin\n        return wrapper\n    return decorator\n\n@yetki_gerekli(gerekli_yetki=\"admin\")\ndef gizli_islem(param1):\n    print(f\"Gizli işlem yapıldı: {param1}\")\n\n# Fonksiyonu yetersiz yetkiyle çağırın\ngizli_islem(\"test\", aktif_yetki=\"user\")\n# Fonksiyonu yeterli yetkiyle çağırın\n# gizli_islem(\"test\", aktif_yetki=\"admin\")",
    "solution": "def yetki_gerekli(gerekli_yetki):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if kwargs.get('aktif_yetki') == gerekli_yetki:\n                print(f\"Yetki ({gerekli_yetki}) doğrulandı.\")\n                return func(*args, **kwargs)\n            else:\n                print(f\"Yetki Yetersiz! Gerekli: {gerekli_yetki}, Aktif: {kwargs.get('aktif_yetki')}\")\n                # Hata döndürmek veya None döndürmek daha iyi olabilir\n                return None\n        return wrapper\n    return decorator\n\n@yetki_gerekli(gerekli_yetki=\"admin\")\ndef gizli_islem(param1):\n    print(f\"Gizli işlem yapıldı: {param1}\")\n\nprint(\"--- Yetersiz Yetki Testi ---\")\ngizli_islem(\"test1\", aktif_yetki=\"user\")\nprint(\"\\n--- Yeterli Yetki Testi ---\")\ngizli_islem(\"test2\", aktif_yetki=\"admin\")"
  },
  {
    "id": "U6_T3_E8",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "functools.wraps",
    "difficulty": "Zor",
    "lesson_html": "<h1>Sorun: Fonksiyon Metadatası Kaybı</h1><p>Decorator kullandığımızda, dekore edilmiş fonksiyon (örn: <code>merhaba</code>) aslında arka planda <code>wrapper</code> fonksiyonu haline gelir. Bu durum, orijinal fonksiyonun adını (<code>__name__</code>) ve docstring'ini (<code>__doc__</code>) kaybetmemize neden olur.</p><pre><code>def basit_decorator(func):\n    def wrapper():\n        func()\n    return wrapper\n\n@basit_decorator\ndef merhaba():\n    \"\"\"Bu bir merhaba fonksiyonudur.\"\"\"\n    print(\"Merhaba\")\n\nprint(merhaba.__name__) # Çıktı: wrapper (merhaba değil!)\nprint(merhaba.__doc__)  # Çıktı: None (docstring kayboldu!)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Metadata Kaybını Gör",
      "description": "Yukarıdaki <code>basit_decorator</code> ve <code>@basit_decorator</code> ile dekore edilmiş <code>merhaba</code> fonksiyonunu kopyalayın. <code>merhaba.__name__</code> ve <code>merhaba.__doc__</code> değerlerini yazdırarak orijinal bilgilerin kaybolduğunu gözlemleyin. Bir sonraki derste bunu nasıl düzelteceğimizi göreceğiz.",
      "hint": "Kodu çalıştırıp çıktıyı inceleyin."
    },
    "default_code": "def basit_decorator(func):\n    def wrapper():\n        \"\"\"Bu wrapper fonksiyonudur.\"\"\"\n        func()\n    return wrapper\n\n@basit_decorator\ndef merhaba():\n    \"\"\"Bu bir merhaba fonksiyonudur.\"\"\"\n    print(\"Merhaba\")\n\n# Fonksiyonun adını ve docstring'ini yazdırın\n\n",
    "solution": "def basit_decorator(func):\n    def wrapper():\n        \"\"\"Bu wrapper fonksiyonudur.\"\"\"\n        func()\n    return wrapper\n\n@basit_decorator\ndef merhaba():\n    \"\"\"Bu bir merhaba fonksiyonudur.\"\"\"\n    print(\"Merhaba\")\n\nprint(f\"Fonksiyon Adı: {merhaba.__name__}\")\nprint(f\"Docstring: {merhaba.__doc__}\")"
  },
  {
    "id": "U6_T3_E9",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Çözüm: functools.wraps",
    "difficulty": "Zor",
    "lesson_html": "<h1>Çözüm: @functools.wraps</h1><p>Bu metadata kaybı sorununu çözmek için Python'un <code>functools</code> modülündeki <code>wraps</code> decorator'ını kullanırız. <code>@wraps(func)</code>, decorator'ımızın *içindeki* <code>wrapper</code> fonksiyonuna uygulanır.</p><p><code>@wraps(func)</code>, orijinal fonksiyonun (<code>func</code>) <code>__name__</code>, <code>__doc__</code> gibi özel niteliklerini kopyalayıp <code>wrapper</code> fonksiyonuna aktarır.</p><pre><code>import functools\n\ndef duzgun_decorator(func):\n    @functools.wraps(func) # func'ın metadatasını wrapper'a kopyala\n    def wrapper(*args, **kwargs):\n        # ... wrapper kodu ...\n        return func(*args, **kwargs)\n    return wrapper\n\n@duzgun_decorator\ndef merhaba():\n    \"\"\"Bu bir merhaba fonksiyonudur.\"\"\"\n    print(\"Merhaba\")\n\nprint(merhaba.__name__) # Çıktı: merhaba (Doğru!)\nprint(merhaba.__doc__)  # Çıktı: Bu bir merhaba fonksiyonudur. (Doğru!)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: @wraps Ekle",
      "description": "<code>loglama_decorator</code>'ın içindeki <code>wrapper</code> fonksiyonunun tanımının hemen üstüne <code>@functools.wraps(func)</code> decorator'ını ekleyin (<code>functools</code>'u import etmeyi unutmayın). Ardından dekore edilmiş <code>islem_yap</code> fonksiyonunun <code>__name__</code> ve <code>__doc__</code> değerlerini yazdırarak orijinal bilgilerin korunduğunu doğrulayın.",
      "hint": "<code>import functools</code> ... <code>def decorator(func): ... @functools.wraps(func) ... def wrapper(...): ...</code>"
    },
    "default_code": "import functools\n\ndef loglama_decorator(func):\n    # @functools.wraps(func) decorator'ını buraya ekleyin\n    def wrapper():\n        \"\"\"Wrapper docstring\"\"\"\n        print(\"LOG: Başladı\")\n        func()\n        print(\"LOG: Bitti\")\n    return wrapper\n\n@loglama_decorator\ndef islem_yap():\n    \"\"\"Bu asıl işlemi yapan fonksiyondur.\"\"\"\n    print(\"İşlem yapılıyor.\")\n\n# islem_yap'ın adını ve docstring'ini yazdırın\n\n",
    "solution": "import functools\n\ndef loglama_decorator(func):\n    @functools.wraps(func)\n    def wrapper():\n        \"\"\"Wrapper docstring\"\"\"\n        print(\"LOG: Başladı\")\n        func()\n        print(\"LOG: Bitti\")\n    return wrapper\n\n@loglama_decorator\ndef islem_yap():\n    \"\"\"Bu asıl işlemi yapan fonksiyondur.\"\"\"\n    print(\"İşlem yapılıyor.\")\n\n# islem_yap'ın adını ve docstring'ini yazdırın\nprint(f\"Fonksiyon Adı: {islem_yap.__name__}\")\nprint(f\"Docstring: {islem_yap.__doc__}\")"
  },
  {
    "id": "U6_T3_E10",
    "unit_id": 6,
    "topic_id": 3,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Decorators",
    "title": "Decorator'ların İstiflenmesi",
    "difficulty": "Zor",
    "lesson_html": "<h1>Decorator İstifleme (Stacking)</h1><p>Bir fonksiyona birden fazla decorator uygulayabilirsiniz. Decorator'lar yukarıdan aşağıya doğru uygulanır (en üstteki en dışta olur).</p><pre><code>import functools\n\ndef deco1(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Deco 1 Başladı\")\n        result = func(*args, **kwargs)\n        print(\"Deco 1 Bitti\")\n        return result\n    return wrapper\n\ndef deco2(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Deco 2 Başladı\")\n        result = func(*args, **kwargs)\n        print(\"Deco 2 Bitti\")\n        return result\n    return wrapper\n\n@deco1 # En dıştaki\n@deco2 # Bir içteki\ndef islem():\n    print(\"Asıl İşlem\")\n\nislem()</code></pre><p>Çıktı sırası: Deco 1 Başladı -> Deco 2 Başladı -> Asıl İşlem -> Deco 2 Bitti -> Deco 1 Bitti</p>",
    "challenge": {
      "title": "Meydan Okuma: Loglama ve Zaman Ölçümü",
      "description": "Daha önceki alıştırmalardan <code>cagri_logla</code> ve <code>zaman_olc</code> decorator'ları verilmiştir. <code>ag_taramasi</code> fonksiyonuna <i>önce</i> <code>@cagri_logla</code>, <i>sonra</i> (bir alt satıra) <code>@zaman_olc</code> decorator'larını uygulayın. Fonksiyonu çağırın ve çıktının sırasını (Log başladı -> Zaman ölçümü başladı -> İşlem -> Zaman ölçümü bitti -> Log bitti) gözlemleyin.",
      "hint": "<code>def ag_taramasi</code> üstüne iki tane <code>@</code> satırı ekleyin."
    },
    "default_code": "import functools\nimport time\n\ndef cagri_logla(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"LOG: {func.__name__} çağrılıyor...\")\n        sonuc = func(*args, **kwargs)\n        print(f\"LOG: {func.__name__} bitti.\")\n        return sonuc\n    return wrapper\n\ndef zaman_olc(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs)\n        bitis = time.time()\n        print(f\"SÜRE: {func.__name__} {bitis - baslangic:.4f}s sürdü.\")\n        return sonuc\n    return wrapper\n\n# İki decorator'ı buraya doğru sırada uygulayın\ndef ag_taramasi():\n    print(\"--- Ağ Taraması Yapılıyor ---\")\n    time.sleep(0.1)\n    print(\"--- Tarama Tamamlandı ---\")\n\n# Fonksiyonu çağırın\n",
    "solution": "import functools\nimport time\n\ndef cagri_logla(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"LOG: {func.__name__} çağrılıyor...\")\n        sonuc = func(*args, **kwargs)\n        print(f\"LOG: {func.__name__} bitti.\")\n        return sonuc\n    return wrapper\n\ndef zaman_olc(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        baslangic = time.time()\n        sonuc = func(*args, **kwargs)\n        bitis = time.time()\n        print(f\"SÜRE: {func.__name__} {bitis - baslangic:.4f}s sürdü.\")\n        return sonuc\n    return wrapper\n\n@cagri_logla # En dış\n@zaman_olc # İçteki\ndef ag_taramasi():\n    print(\"--- Ağ Taraması Yapılıyor ---\")\n    time.sleep(0.1)\n    print(\"--- Tarama Tamamlandı ---\")\n\nag_taramasi()"
  },
  {
    "id": "U6_T4_E1",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator Fonksiyonu (yield)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Generators (Üreteçler)</h1><p>Generator fonksiyonları, normal fonksiyonlara benzer şekilde <code>def</code> ile tanımlanır, ancak değer döndürmek için <code>return</code> yerine <code>yield</code> anahtar kelimesini kullanırlar.</p><p>Bir fonksiyon içinde <code>yield</code> kullanılması, o fonksiyonu otomatik olarak bir 'generator' yapar. Generator fonksiyonları çağrıldığında hemen çalışmazlar; bunun yerine bir 'generator nesnesi' döndürürler.</p><p>Değerleri almak için bu nesne üzerinde <code>next()</code> fonksiyonu veya <code>for</code> döngüsü kullanılır.</p><pre><code>def sayac(limit):\n    n = 0\n    while n < limit:\n        yield n # Değer üret ve dur, durumu hatırla\n        n += 1\n\n# Generator nesnesini oluştur\nsayac_gen = sayac(3)\n\nprint(sayac_gen) # Çıktı: <generator object sayac at ...>\n\n# Değerleri tek tek al\nprint(next(sayac_gen)) # Çıktı: 0\nprint(next(sayac_gen)) # Çıktı: 1\nprint(next(sayac_gen)) # Çıktı: 2\n# print(next(sayac_gen)) # HATA VERİR (StopIteration)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Basit Generator",
      "description": "<code>ilk_iki_sayi</code> adında bir generator fonksiyonu tanımlayın. Bu fonksiyon önce <code>0</code> değerini <code>yield</code> etmeli, sonra <code>1</code> değerini <code>yield</code> etmelidir. Bu generator'ı <code>gen</code> değişkenine atayın ve <code>next(gen)</code>'i iki kez çağırarak 0 ve 1 değerlerini yazdırın.",
      "hint": "<code>def ilk_iki_sayi(): ... yield 0 ... yield 1</code>"
    },
    "default_code": "# Generator fonksiyonunu burada tanımlayın\n\n\n# Generator nesnesini oluşturun\ngen = ilk_iki_sayi()\n\n# next() ile değerleri alın ve yazdırın\n\n",
    "solution": "# Generator fonksiyonunu burada tanımlayın\ndef ilk_iki_sayi():\n    yield 0\n    yield 1\n\n# Generator nesnesini oluşturun\ngen = ilk_iki_sayi()\n\n# next() ile değerleri alın ve yazdırın\nprint(next(gen))\nprint(next(gen))"
  },
  {
    "id": "U6_T4_E2",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator ile 'for' Döngüsü",
    "difficulty": "Zor",
    "lesson_html": "<h1>Generator ve 'for' Döngüsü</h1><p>Generator nesneleriyle çalışmanın en yaygın yolu, onlar üzerinde doğrudan <code>for</code> döngüsü kurmaktır. <code>for</code> döngüsü, generator'dan değerleri otomatik olarak <code>next()</code> ile alır ve <code>StopIteration</code> hatası oluştuğunda (yani generator bittiğinde) otomatik olarak durur.</p><pre><code>def sayac(limit):\n    n = 0\n    while n < limit:\n        yield n\n        n += 1\n\n# Generator üzerinde döngü\nfor sayi in sayac(4):\n    print(sayi) # Çıktı: 0, 1, 2, 3</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Aralığı Üret",
      "description": "<code>port_araligi</code> adında bir generator fonksiyonu yazın. <code>baslangic</code> ve <code>bitis</code> parametreleri alsın. <code>while</code> döngüsü ve <code>yield</code> kullanarak <code>baslangic</code>'tan <code>bitis</code>'e kadar (<code>bitis</code> dahil değil) port numaralarını üretsin. <code>for</code> döngüsü kullanarak <code>port_araligi(80, 83)</code>'ten gelen değerleri (80, 81, 82) yazdırın.",
      "hint": "<code>def port_araligi(baslangic, bitis): ... n = baslangic ... while n < bitis: ... yield n ... n += 1</code>"
    },
    "default_code": "# Generator fonksiyonunu burada tanımlayın\n\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\n",
    "solution": "# Generator fonksiyonunu burada tanımlayın\ndef port_araligi(baslangic, bitis):\n    n = baslangic\n    while n < bitis:\n        yield n\n        n += 1\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\nfor port in port_araligi(80, 83):\n    print(port)"
  },
  {
    "id": "U6_T4_E3",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Bellek Verimliliği (Lazy Evaluation)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Bellek Verimliliği (Lazy Evaluation)</h1><p>Generator'ların en büyük avantajı 'tembel değerlendirme' (lazy evaluation) yapmalarıdır. Değerleri *sadece istendiğinde* (<code>next()</code> veya <code>for</code> döngüsü ile) üretirler ve tüm diziyi bellekte tutmazlar.</p><p>Milyonlarca eleman içeren bir liste belleği doldururken, milyonlarca değer üreten bir generator çok az bellek kullanır.</p><pre><code># Milyon elemanlı LİSTE (Çok bellek kullanır)\nliste = [i for i in range(1000000)]\n\n# Milyon değer üretecek GENERATOR (Az bellek kullanır)\ndef milyon_sayac():\n    i = 0\n    while i < 1000000:\n        yield i\n        i += 1\ngen = milyon_sayac()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kavramsal Fark",
      "description": "<code>range(1000000)</code> (bir tür generator gibi davranır) ile <code>list(range(1000000))</code> arasındaki temel bellek kullanımı farkını açıklayan bir yorum satırı yazın.",
      "hint": "Biri değerleri hemen oluşturup bellekte saklar, diğeri istendiğinde üretir."
    },
    "default_code": "# range(1000000) vs list(range(1000000)) bellek farkı:\n",
    "solution": "# range(1000000) vs list(range(1000000)) bellek farkı:\n# range(1000000) bir generator benzeri nesnedir, sadece başlangıç,\n# bitiş ve adımı saklar, tüm sayıları bellekte tutmaz.\n# list(range(1000000)) ise 0'dan 999999'a kadar tüm sayıları\n# içeren bir listeyi bellekte oluşturur, bu çok fazla bellek gerektirir."
  },
  {
    "id": "U6_T4_E4",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator İfadesi (Expression)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Generator İfadeleri (Expressions)</h1><p>List comprehension'a (<code>[i for i in range(10)]</code>) çok benzeyen, ancak <code>[]</code> yerine <code>()</code> kullanan bir sözdizimi ile tek satırda generator oluşturabilirsiniz. Buna 'generator ifadesi' (generator expression) denir.</p><p>List comprehension tüm listeyi bellekte oluştururken, generator ifadesi bir generator nesnesi döndürür (lazy evaluation).</p><pre><code># List Comprehension (Bellekte liste oluşturur)\nliste_kareler = [x*x for x in range(5)]\n\n# Generator Expression (Generator nesnesi oluşturur)\ngen_kareler = (x*x for x in range(5))\n\nprint(liste_kareler) # [0, 1, 4, 9, 16]\nprint(gen_kareler)   # <generator object <genexpr> at ...>\n\n# Generator'dan değerleri almak için döngü gerekir\nfor kare in gen_kareler:\n    print(kare)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Port Karesi Generator'ı",
      "description": "<code>port_listesi = [22, 80, 443]</code> verilmiştir. Generator ifadesi (<code>(...)</code>) kullanarak, bu listedeki her portun karesini (<code>p*p</code>) üreten bir generator nesnesi (<code>port_kareleri_gen</code>) oluşturun. Ardından <code>for</code> döngüsü ile bu generator'dan gelen değerleri yazdırın.",
      "hint": "<code>port_kareleri_gen = (p*p for p in port_listesi)</code>"
    },
    "default_code": "port_listesi = [22, 80, 443]\n\n# Generator ifadesini burada oluşturun\n\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\n",
    "solution": "port_listesi = [22, 80, 443]\n\n# Generator ifadesini burada oluşturun\nport_kareleri_gen = (p*p for p in port_listesi)\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\nfor kare in port_kareleri_gen:\n    print(kare)"
  },
  {
    "id": "U6_T4_E5",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Pratik Kullanım: Büyük Dosyaları İşleme",
    "difficulty": "Zor",
    "lesson_html": "<h1>Pratik Kullanım: Büyük Dosyaları İşleme</h1><p>Generator'lar, çok büyük dosyaları (örn: gigabaytlarca log dosyası) belleğe tamamen yüklemeden satır satır işlemek için idealdir.</p><pre><code># Milyonlarca satırlık bir dosyayı okuyan generator\ndef log_satirlarini_oku(dosya_adi):\n    with open(dosya_adi, \"r\") as f:\n        for satir in f:\n            yield satir.strip()\n\n# Belleği doldurmadan her satırı işle\nfor log_satiri in log_satirlarini_oku(\"buyuk_log.txt\"):\n    if \"ERROR\" in log_satiri:\n        print(f\"Hata bulundu: {log_satiri}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Satırı Generator'ı",
      "description": "Simüle edilmiş <code>log_satirlari</code> listesi verilmiştir. <code>log_generator</code> adında bir fonksiyon yazın. Bu fonksiyon, <code>log_satirlari</code> listesi üzerinde <code>for</code> ile dönmeli ve her bir <code>satir</code>'ı <code>.strip()</code> ile temizleyip <code>yield</code> etmelidir. Ardından <code>for</code> döngüsü ile <code>log_generator()</code>'dan gelen temizlenmiş satırları yazdırın.",
      "hint": "<code>def log_generator(): ... for satir in log_satirlari: ... yield satir.strip()</code>"
    },
    "default_code": "# Simülasyon: Dosya satırları\nlog_satirlari = [\"[INFO] Başladı\\n\", \" [WARN] Hata \\n\", \"[INFO] Bitti\\n\"]\n\n# Generator fonksiyonunu burada tanımlayın\n\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\n",
    "solution": "# Simülasyon: Dosya satırları\nlog_satirlari = [\"[INFO] Başladı\\n\", \" [WARN] Hata \\n\", \"[INFO] Bitti\\n\"]\n\n# Generator fonksiyonunu burada tanımlayın\ndef log_generator():\n    for satir in log_satirlari:\n        yield satir.strip()\n\n# for döngüsü ile generator'dan gelen değerleri yazdırın\nfor temiz_satir in log_generator():\n    print(temiz_satir)"
  },
  {
    "id": "U6_T4_E6",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator vs List Comprehension",
    "difficulty": "Orta",
    "lesson_html": "<h1>Generator İfadesi vs List Comprehension</h1><p>Ne zaman hangisini kullanmalı?</p><ul><li><b>List Comprehension <code>[]</code>:</b> Sonuç listesine *hemen* ihtiyacınız varsa, liste üzerinde tekrar tekrar işlem yapacaksanız (örn: sıralama, indeksleme) veya liste küçükse kullanılır. Bellekte yer kaplar.</li><li><b>Generator İfadesi <code>()</code>:</b> Büyük veri setleri üzerinde tek seferlik bir döngü yapacaksanız, belleği verimli kullanmak kritikse veya sonsuz bir diziyle çalışıyorsanız kullanılır. Değerleri anında üretmez.</li></ul>",
    "challenge": {
      "title": "Meydan Okuma: Doğru Seçim",
      "description": "1 Milyon satırlık bir log dosyasındaki 'ERROR' içeren satırları bulup yazdırmak için List Comprehension mı yoksa Generator İfadesi mi kullanmak daha mantıklıdır? Nedenini bir yorum satırıyla açıklayın.",
      "hint": "Bellek verimliliği önemli mi? Tüm satırları aynı anda bellekte tutmak gerekiyor mu?"
    },
    "default_code": "# 1 Milyon satırlık log için tercih:\n# Açıklama:\n",
    "solution": "# 1 Milyon satırlık log için tercih:\n# Generator İfadesi (veya generator fonksiyonu)\n# Açıklama:\n# Çünkü 1 milyon satırı bellekte bir liste olarak tutmak çok fazla bellek tüketebilir.\n# Generator, satırları tek tek işleyerek bellek kullanımını minimumda tutar."
  },
  {
    "id": "U6_T4_E7",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator'ı Listeye Çevirme",
    "difficulty": "Orta",
    "lesson_html": "<h1>Generator'ı Listeye Çevirme</h1><p>Bir generator nesnesinin ürettiği tüm değerleri bir kerede bir liste olarak almak isterseniz, <code>list()</code> fonksiyonunu kullanabilirsiniz.</p><p><strong>Dikkat:</strong> Eğer generator çok büyük veya sonsuz ise, bu işlem belleği doldurabilir veya programı kilitleyebilir!</p><pre><code>def sayac(limit):\n    n = 0\n    while n < limit:\n        yield n\n        n += 1\n\nsayac_gen = sayac(5)\n\n# Generator'ın tüm değerlerini listeye çevir\nsayi_listesi = list(sayac_gen)\nprint(sayi_listesi) # Çıktı: [0, 1, 2, 3, 4]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Portları Listele",
      "description": "<code>port_araligi(100, 105)</code> generator fonksiyonu verilmiştir. Bu generator'ın ürettiği tüm port numaralarını (100, 101, 102, 103, 104) <code>list()</code> fonksiyonunu kullanarak bir listeye çevirin ve bu listeyi yazdırın.",
      "hint": "<code>port_listesi = list(port_araligi(100, 105))</code>"
    },
    "default_code": "def port_araligi(baslangic, bitis):\n    n = baslangic\n    while n < bitis:\n        yield n\n        n += 1\n\n# Generator'ı listeye çevirin ve yazdırın\n",
    "solution": "def port_araligi(baslangic, bitis):\n    n = baslangic\n    while n < bitis:\n        yield n\n        n += 1\n\n# Generator'ı listeye çevirin ve yazdırın\nport_listesi = list(port_araligi(100, 105))\nprint(port_listesi)"
  },
  {
    "id": "U6_T4_E8",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Generator'ların Tükenmesi",
    "difficulty": "Zor",
    "lesson_html": "<h1>Generator'ların Tükenmesi</h1><p>Generator'lar bir kere tüketildikten sonra (yani <code>for</code> döngüsü bittiğinde veya <code>StopIteration</code> hatası alındığında) boşalırlar. Aynı generator nesnesi üzerinde tekrar döngü kuramazsınız veya <code>next()</code> çağıramazsınız.</p><pre><code>gen = (x for x in range(3)) # 0, 1, 2\n\nprint(\"İlk döngü:\")\nfor i in gen:\n    print(i)\n\nprint(\"\\nİkinci döngü (çalışmaz):\")\nfor i in gen: # gen artık boş\n    print(i) # Hiçbir şey yazdırmaz!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tükenmiş Generator",
      "description": "<code>sayilar = (x for x in range(2))</code> generator ifadesi verilmiştir. İlk <code>for</code> döngüsü generator'ı tüketir. İkinci <code>for</code> döngüsünün neden hiçbir şey yazdırmadığını bir yorum satırıyla açıklayın.",
      "hint": "Generator'lar sadece bir kez kullanılabilir."
    },
    "default_code": "sayilar = (x for x in range(2))\n\nprint(\"İlk tur:\")\nfor sayi in sayilar:\n    print(sayi)\n\nprint(\"\\nİkinci tur:\")\nfor sayi in sayilar:\n    print(sayi)\n\n# İkinci döngünün neden boş olduğunu buraya yazın\n",
    "solution": "sayilar = (x for x in range(2))\n\nprint(\"İlk tur:\")\nfor sayi in sayilar:\n    print(sayi)\n\nprint(\"\\nİkinci tur:\")\nfor sayi in sayilar:\n    print(sayi)\n\n# İkinci döngünün neden boş olduğunu buraya yazın\n# Çünkü ilk for döngüsü generator'ın tüm değerlerini (0, 1)\n# üretti ve tüketti. Generator'lar tek kullanımlıktır,\n# tekrar başa saramazlar. İkinci döngü başladığında\n# generator'da üretilecek başka değer kalmamıştır."
  },
  {
    "id": "U6_T4_E9",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "'yield from' (İleri Seviye)",
    "difficulty": "Zor",
    "lesson_html": "<h1>'yield from' (İleri Seviye)</h1><p>Bir generator fonksiyonu içinde, başka bir generator'ın veya iterable'ın (liste, string vb.) tüm değerlerini tek tek <code>yield</code> etmek isterseniz, <code>yield from</code> ifadesini kullanabilirsiniz.</p><pre><code>def harfler():\n    yield 'A'\n    yield 'B'\n\ndef sayilar():\n    yield 1\n    yield 2\n\ndef hepsi():\n    yield from harfler() # 'A', 'B' üretilir\n    yield from sayilar() # 1, 2 üretilir\n\nfor eleman in hepsi():\n    print(eleman)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zincirleme Tarama",
      "description": "<code>web_portlari()</code> (80, 443 üreten) ve <code>mail_portlari()</code> (25, 110 üreten) adında iki generator fonksiyonu verilmiştir. <code>tum_portlari_tara</code> adında üçüncü bir generator fonksiyonu yazın. Bu fonksiyon, <code>yield from</code> kullanarak önce <code>web_portlari</code>'nın, sonra <code>mail_portlari</code>'nın tüm değerlerini üretmelidir. Son olarak <code>for</code> döngüsü ile <code>tum_portlari_tara()</code>'dan gelen tüm portları yazdırın.",
      "hint": "<code>def tum_portlari_tara(): ... yield from web_portlari() ... yield from mail_portlari()</code>"
    },
    "default_code": "def web_portlari():\n    yield 80\n    yield 443\n\ndef mail_portlari():\n    yield 25\n    yield 110\n\n# 'tum_portlari_tara' generator'ını burada tanımlayın\n\n\n# for döngüsü ile tüm portları yazdırın\n",
    "solution": "def web_portlari():\n    yield 80\n    yield 443\n\ndef mail_portlari():\n    yield 25\n    yield 110\n\n# 'tum_portlari_tara' generator'ını burada tanımlayın\ndef tum_portlari_tara():\n    yield from web_portlari()\n    yield from mail_portlari()\n\n# for döngüsü ile tüm portları yazdırın\nfor port in tum_portlari_tara():\n    print(port)"
  },
  {
    "id": "U6_T4_E10",
    "unit_id": 6,
    "topic_id": 4,
    "unit_name": "İleri Düzey Konular",
    "topic_name": "Generators",
    "title": "Sonsuz Generator",
    "difficulty": "Zor",
    "lesson_html": "<h1>Sonsuz Generator'lar</h1><p>Generator'lar bir bitiş koşulu olmadan da tanımlanabilirler. Bu, sonsuz bir dizi üretir. Bu tür generator'lar genellikle bir <code>break</code> koşulu ile birlikte veya <code>itertools</code> gibi modüllerle kullanılır.</p><pre><code>def sonsuz_sayac():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n# DİKKAT: Bu döngüyü kontrolsüz çalıştırmayın!\n# for sayi in sonsuz_sayac():\n#     print(sayi)\n#     if sayi == 10:\n#         break # Durdurma koşulu önemli!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Rastgele IP Üretici",
      "description": "<code>rastgele_ip_uret</code> adında *sonsuz* bir generator fonksiyonu yazın. <code>while True:</code> döngüsü kullanın. Döngü içinde, 1 ile 254 arasında 4 adet rastgele sayı (<code>random.randint(1, 254)</code>) üretin ve bunları f-string ile <code>f\"{o1}.{o2}.{o3}.{o4}\"</code> formatında birleştirip <code>yield</code> edin. <code>random</code> modülünü import etmeyi unutmayın. <code>for</code> döngüsü ve <code>break</code> kullanarak bu generator'dan sadece 3 adet IP adresi alıp yazdırın.",
      "hint": "<code>import random ... def ...: while True: o1 = random.randint... yield f'...'</code> ... <code>sayac=0; for ip in ...: print(ip); sayac+=1; if sayac==3: break</code>"
    },
    "default_code": "import random\n\n# Sonsuz rastgele IP üreten generator'ı burada tanımlayın\n\n\n# Bu generator'dan 3 adet IP alıp yazdırın ve durun\n",
    "solution": "import random\n\n# Sonsuz rastgele IP üreten generator'ı burada tanımlayın\ndef rastgele_ip_uret():\n    while True:\n        o1 = random.randint(1, 254)\n        o2 = random.randint(0, 254) # Oktet 0 olabilir\n        o3 = random.randint(0, 254)\n        o4 = random.randint(1, 254) # Son oktet 0 olmaz genelde\n        yield f\"{o1}.{o2}.{o3}.{o4}\"\n\n# Bu generator'dan 3 adet IP alıp yazdırın ve durun\nsayac = 0\nfor ip in rastgele_ip_uret():\n    print(ip)\n    sayac += 1\n    if sayac == 3:\n        break"
  },
  {
    "id": "U7_T1_E1",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "'datetime' İçeri Aktarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'datetime' Modülü</h1><p><code>datetime</code> modülü, Python'da tarih ve zamanla ilgili her türlü işlemi yapmak için kullanılır. Loglama, zaman damgaları (timestamps), süre hesaplamaları gibi birçok alanda kritiktir.</p><p>Modülü kullanmak için önce <code>import datetime</code> yazmanız gerekir.</p><pre><code>import datetime\n\n# Modülün içindeki 'datetime' sınıfını kullanarak şu anki zamanı al\nan = datetime.datetime.now()\nprint(an)</code></pre><p>Not: Modül adı ile içindeki sınıfın adı aynıdır (<code>datetime.datetime</code>), bu bazen kafa karıştırıcı olabilir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Modülü İçeri Aktar",
      "description": "<code>datetime</code> modülünü kodunuza <code>import</code> edin. Ardından, <code>datetime.datetime.now()</code> fonksiyonunu çağırarak şu anki tam tarih ve saati <code>simdiki_zaman</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>import datetime</code> ... <code>simdiki_zaman = datetime.datetime.now()</code>"
    },
    "default_code": "# datetime modülünü burada içeri aktarın\n\n\n# Şu anki zamanı alın ve yazdırın\n",
    "solution": "import datetime\n\nsimdiki_zaman = datetime.datetime.now()\nprint(simdiki_zaman)"
  },
  {
    "id": "U7_T1_E2",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "'from datetime import datetime'",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'from datetime import datetime'</h1><p><code>datetime.datetime.now()</code> yazmak yerine, modülün içindeki <code>datetime</code> sınıfını doğrudan içeri aktararak daha kısa yazabiliriz: <code>from datetime import datetime</code>.</p><p>Bu sayede <code>datetime.now()</code> şeklinde kullanabiliriz.</p><pre><code>from datetime import datetime\n\n# Artık sadece 'datetime.now()' yeterli\nan = datetime.now()\nprint(an)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kısa İçe Aktarma",
      "description": "<code>datetime</code> modülünden <code>datetime</code> sınıfını <code>from ... import ...</code> sözdizimi ile içeri aktarın. Ardından <code>datetime.now()</code> fonksiyonunu çağırarak şu anki zamanı yazdırın.",
      "hint": "<code>from datetime import datetime</code> ... <code>print(datetime.now())</code>"
    },
    "default_code": "# datetime sınıfını 'from' ile içeri aktarın\n\n\n# datetime.now() ile şu anki zamanı yazdırın\n",
    "solution": "from datetime import datetime\n\nprint(datetime.now())"
  },
  {
    "id": "U7_T1_E3",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Tarih ve Saat Bileşenleri",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Tarih ve Saat Bileşenleri</h1><p>Bir <code>datetime</code> nesnesinin yıl, ay, gün, saat, dakika, saniye gibi bileşenlerine nitelik (attribute) olarak erişebilirsiniz.</p><pre><code>from datetime import datetime\n\nan = datetime.now()\n\nprint(f\"Yıl: {an.year}\")\nprint(f\"Ay: {an.month}\")\nprint(f\"Gün: {an.day}\")\nprint(f\"Saat: {an.hour}\")\nprint(f\"Dakika: {an.minute}\")\nprint(f\"Saniye: {an.second}\")\nprint(f\"Mikrosaniye: {an.microsecond}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Zaman Damgası",
      "description": "Şu anki zamanı <code>datetime.now()</code> ile alın. Ardından bu nesnenin <code>hour</code>, <code>minute</code> ve <code>second</code> niteliklerini kullanarak <code>f\"{saat}:{dakika}:{saniye}\"</code> formatında bir zaman damgası string'i oluşturun ve yazdırın.",
      "hint": "<code>an = datetime.now()</code> ... <code>print(f\"{an.hour}:{an.minute}:{an.second}\")</code>"
    },
    "default_code": "from datetime import datetime\n\n# Şu anki zamanı alın\nan = datetime.now()\n\n# Saat:Dakika:Saniye formatında yazdırın\n",
    "solution": "from datetime import datetime\n\nan = datetime.now()\n\nzaman_damgasi = f\"{an.hour}:{an.minute}:{an.second}\"\nprint(zaman_damgasi)"
  },
  {
    "id": "U7_T1_E4",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Belirli Bir Tarih Oluşturma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Belirli Bir Tarih Oluşturma</h1><p><code>datetime(yil, ay, gun, saat, dakika, saniye)</code> yapıcısını kullanarak belirli bir tarih ve saati temsil eden bir <code>datetime</code> nesnesi oluşturabilirsiniz.</p><pre><code>from datetime import datetime\n\n# 2023 yılının 10. ayının 26. günü, saat 15:30:00\nolay_zamani = datetime(2023, 10, 26, 15, 30, 0)\nprint(olay_zamani)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Saldırı Zamanı",
      "description": "<code>datetime</code> yapıcısını kullanarak <code>2024</code> yılı, <code>5</code>. ay, <code>15</code>. gün, saat <code>10</code>, dakika <code>00</code>, saniye <code>00</code>'ı temsil eden bir <code>datetime</code> nesnesi oluşturun ve <code>saldiri_zamani</code> değişkenine atayıp yazdırın.",
      "hint": "<code>datetime(2024, 5, 15, 10, 0, 0)</code>"
    },
    "default_code": "from datetime import datetime\n\n# Belirtilen tarih ve saati burada oluşturun\n\n\n# Oluşturulan nesneyi yazdırın\n",
    "solution": "from datetime import datetime\n\nsaldiri_zamani = datetime(2024, 5, 15, 10, 0, 0)\n\nprint(saldiri_zamani)"
  },
  {
    "id": "U7_T1_E5",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Zaman Farkı (timedelta)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Zaman Farkı: timedelta</h1><p>İki <code>datetime</code> nesnesi arasındaki farkı hesapladığınızda (<code>-</code> operatörü ile), sonuç bir <code>timedelta</code> nesnesi olur. Bu nesne, iki zaman arasındaki gün, saniye, mikrosaniye farkını temsil eder.</p><p>Ayrıca <code>timedelta</code> nesnelerini kendiniz de oluşturarak bir tarihe zaman ekleyip çıkarabilirsiniz.</p><pre><code>from datetime import datetime, timedelta\n\nan = datetime.now()\nbir_saat_sonra = an + timedelta(hours=1)\niki_gun_once = an - timedelta(days=2)\n\ntarih1 = datetime(2023, 1, 1, 10, 0, 0)\ntarih2 = datetime(2023, 1, 1, 12, 30, 0)\nfark = tarih2 - tarih1\n\nprint(bir_saat_sonra)\nprint(fark) # Çıktı: 2:30:00\nprint(f\"Toplam saniye farkı: {fark.total_seconds()}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Oturum Süresi",
      "description": "<code>giris_zamani</code> ve <code>cikis_zamani</code> verilmiştir. Bu iki zaman arasındaki farkı (<code>timedelta</code>) hesaplayın ve <code>oturum_suresi</code> değişkenine atayın. Ardından bu sürenin <code>.total_seconds()</code> metodunu kullanarak toplam saniye karşılığını yazdırın.",
      "hint": "<code>oturum_suresi = cikis_zamani - giris_zamani</code>"
    },
    "default_code": "from datetime import datetime, timedelta\n\ngiris_zamani = datetime(2025, 10, 27, 12, 0, 0)\ncikis_zamani = datetime(2025, 10, 27, 12, 15, 30)\n\n# İki zaman arasındaki farkı hesaplayın\n\n\n# Farkın toplam saniyesini yazdırın\n",
    "solution": "from datetime import datetime, timedelta\n\ngiris_zamani = datetime(2025, 10, 27, 12, 0, 0)\ncikis_zamani = datetime(2025, 10, 27, 12, 15, 30)\n\noturum_suresi = cikis_zamani - giris_zamani\n\nprint(f\"Oturum Süresi (saniye): {oturum_suresi.total_seconds()}\")"
  },
  {
    "id": "U7_T1_E6",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Tarihi String'e Çevirme (strftime)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tarihi String'e Çevirme: strftime()</h1><p>Bir <code>datetime</code> nesnesini belirli bir formatta (örn: 'GG/AA/YYYY SS:DD') string'e dönüştürmek için <code>.strftime()</code> metodu kullanılır. Bu metod, format kodları içeren bir string alır.</p><p>Yaygın format kodları:</p><ul><li><code>%Y</code>: Yıl (4 haneli)</li><li><code>%m</code>: Ay (01-12)</li><li><code>%d</code>: Gün (01-31)</li><li><code>%H</code>: Saat (00-23)</li><li><code>%M</code>: Dakika (00-59)</li><li><code>%S</code>: Saniye (00-59)</li></ul><pre><code>from datetime import datetime\n\nan = datetime.now()\n\n# GG.AA.YYYY SS:DD formatı\nformatli = an.strftime(\"%d.%m.%Y %H:%M\")\nprint(formatli)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Formatı (strftime)",
      "description": "Şu anki zamanı <code>datetime.now()</code> ile alın. <code>.strftime()</code> metodunu kullanarak zamanı <code>\"Yıl: %Y, Ay: %m, Gün: %d - Saat: %H:%M:%S\"</code> formatında bir string'e çevirin ve yazdırın.",
      "hint": "<code>an = datetime.now()</code> ... <code>print(an.strftime(\"Yıl: %Y, Ay: %m, ...\"))</code>"
    },
    "default_code": "from datetime import datetime\n\n# Şu anki zamanı alın\nan = datetime.now()\n\n# Belirtilen formatta string'e çevirip yazdırın\n",
    "solution": "from datetime import datetime\n\nan = datetime.now()\n\nformatli_zaman = an.strftime(\"Yıl: %Y, Ay: %m, Gün: %d - Saat: %H:%M:%S\")\nprint(formatli_zaman)"
  },
  {
    "id": "U7_T1_E7",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "String'i Tarihe Çevirme (strptime)",
    "difficulty": "Orta",
    "lesson_html": "<h1>String'i Tarihe Çevirme: strptime()</h1><p><code>strftime()</code>'ın tersi işlemdir. Belirli bir formatta olan tarih string'ini bir <code>datetime</code> nesnesine dönüştürmek için <code>datetime.strptime(tarih_stringi, format_stringi)</code> fonksiyonu kullanılır.</p><p>String'in formatıyla verdiğiniz format kodlarının *tam olarak eşleşmesi* gerekir, yoksa <code>ValueError</code> verir.</p><pre><code>from datetime import datetime\n\ntarih_str = \"26/10/2023 15:30\"\nformat_kodu = \"%d/%m/%Y %H:%M\"\n\n# String'i datetime nesnesine çevir\ndt_nesnesi = datetime.strptime(tarih_str, format_kodu)\nprint(dt_nesnesi)\nprint(dt_nesnesi.year) # Artık yıl gibi bileşenlere erişebiliriz</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Zamanını Çözümle",
      "description": "<code>log_zamani_str = \"2025-10-27-12:51:00\"</code> string'i verilmiştir. Bu string'in formatına uygun format kodunu (<code>\"%Y-%m-%d-%H:%M:%S\"</code>) kullanarak <code>datetime.strptime()</code> ile bir <code>datetime</code> nesnesine çevirin ve sonucu yazdırın.",
      "hint": "<code>format_str = \"%Y-%m-%d-%H:%M:%S\"</code> ... <code>dt = datetime.strptime(log_zamani_str, format_str)</code>"
    },
    "default_code": "from datetime import datetime\n\nlog_zamani_str = \"2025-10-27-12:51:00\"\n# Doğru format kodunu tanımlayın\nformat_str = \"...\"\n\n# strptime ile çevirme işlemini yapın ve sonucu yazdırın\n",
    "solution": "from datetime import datetime\n\nlog_zamani_str = \"2025-10-27-12:51:00\"\nformat_str = \"%Y-%m-%d-%H:%M:%S\"\n\ndt_nesnesi = datetime.strptime(log_zamani_str, format_str)\nprint(dt_nesnesi)"
  },
  {
    "id": "U7_T1_E8",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Sadece Tarih (date)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sadece Tarih: date</h1><p><code>datetime</code> modülü içinde sadece tarih bilgisini (yıl, ay, gün) tutmak için <code>date</code> sınıfı da bulunur. <code>datetime.now().date()</code> ile şu anki tarihi alabilir veya <code>date(yil, ay, gun)</code> ile oluşturabilirsiniz.</p><pre><code>from datetime import date\n\nbugun = date.today() # datetime.now().date() ile benzer\nprint(bugun)\nprint(bugun.year)\n\ndogum_gunu = date(2000, 5, 15)\nprint(dogum_gunu)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bugünün Tarihi",
      "description": "<code>datetime</code> modülünden <code>date</code> sınıfını import edin. <code>date.today()</code> fonksiyonunu kullanarak bugünün tarihini alın ve <code>bugunun_tarihi</code> değişkenine atayıp yazdırın.",
      "hint": "<code>from datetime import date</code> ... <code>bugunun_tarihi = date.today()</code>"
    },
    "default_code": "# date sınıfını içeri aktarın\n\n\n# Bugünün tarihini alın ve yazdırın\n",
    "solution": "from datetime import date\n\nbugunun_tarihi = date.today()\nprint(bugunun_tarihi)"
  },
  {
    "id": "U7_T1_E9",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Sadece Zaman (time)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Sadece Zaman: time</h1><p>Sadece zaman bilgisini (saat, dakika, saniye, mikrosaniye) tutmak için <code>time</code> sınıfı bulunur. <code>datetime.now().time()</code> ile şu anki zamanı alabilir veya <code>time(saat, dakika, saniye)</code> ile oluşturabilirsiniz.</p><pre><code>from datetime import time, datetime\n\nsu_anki_zaman = datetime.now().time()\nprint(su_anki_zaman)\nprint(su_anki_zaman.hour)\n\nders_basi = time(9, 0, 0)\nprint(ders_basi)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İşlem Zamanı",
      "description": "<code>datetime</code> modülünden <code>time</code> sınıfını import edin. <code>time()</code> yapıcısını kullanarak saat <code>14</code>, dakika <code>30</code>, saniye <code>15</code>'i temsil eden bir <code>time</code> nesnesi oluşturun ve <code>islem_zamani</code> değişkenine atayıp yazdırın.",
      "hint": "<code>from datetime import time</code> ... <code>islem_zamani = time(14, 30, 15)</code>"
    },
    "default_code": "# time sınıfını içeri aktarın\n\n\n# Belirtilen zamanı oluşturun ve yazdırın\n",
    "solution": "from datetime import time\n\nislem_zamani = time(14, 30, 15)\nprint(islem_zamani)"
  },
  {
    "id": "U7_T1_E10",
    "unit_id": 7,
    "topic_id": 1,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "datetime Modülü",
    "title": "Timestamp (Unix Zaman Damgası)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Timestamp (Unix Zaman Damgası)</h1><p>Timestamp, genellikle 1 Ocak 1970 UTC'den (Epoch) bu yana geçen saniye sayısını temsil eden bir float sayıdır. Sistemler arasında zamanı tek bir sayı ile ifade etmek için kullanılır.</p><p>Bir <code>datetime</code> nesnesini timestamp'e çevirmek için <code>.timestamp()</code> metodunu, timestamp'i <code>datetime</code> nesnesine çevirmek için <code>datetime.fromtimestamp(ts)</code> fonksiyonunu kullanırız.</p><pre><code>from datetime import datetime\n\nan = datetime.now()\n\n# Datetime -> Timestamp\nts = an.timestamp()\nprint(f\"Timestamp: {ts}\")\n\n# Timestamp -> Datetime\ndt_nesnesi = datetime.fromtimestamp(ts)\nprint(f\"Datetime: {dt_nesnesi}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Timestamp Çevrimi",
      "description": "Şu anki zamanı <code>datetime.now()</code> ile alın. <code>.timestamp()</code> metodunu kullanarak bunu Unix zaman damgasına çevirin ve yazdırın.",
      "hint": "<code>an = datetime.now()</code> ... <code>print(an.timestamp())</code>"
    },
    "default_code": "from datetime import datetime\n\n# Şu anki zamanı alın\nan = datetime.now()\n\n# Zamanı timestamp'e çevirip yazdırın\n",
    "solution": "from datetime import datetime\n\nan = datetime.now()\n\nts = an.timestamp()\nprint(ts)"
  },
  {
    "id": "U7_T2_E1",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "JSON Nedir?",
    "difficulty": "Kolay",
    "lesson_html": "<h1>JSON (JavaScript Object Notation)</h1><p>JSON, insanlar tarafından okunabilir, makineler tarafından kolayca işlenebilir, hafif bir veri değişim formatıdır. Web API'leri ve konfigürasyon dosyaları için çok yaygın kullanılır.</p><p>Yapısı Python sözlüklerine ve listelerine çok benzer:</p><ul><li>Nesneler (Objects): Süslü parantez <code>{}</code> içinde anahtar-değer (key-value) çiftleri. Anahtarlar *string* olmalıdır.</li><li>Diziler (Arrays): Köşeli parantez <code>[]</code> içinde değerler.</li><li>Değerler: String (çift tırnaklı), sayı (int/float), boolean (<code>true</code>/<code>false</code> - küçük harfle!), <code>null</code> (Python'daki <code>None</code>) veya başka bir nesne/dizi.</li></ul><pre><code>// Örnek JSON\n{\n  \"ip_adresi\": \"192.168.1.1\",\n  \"portlar\": [80, 443],\n  \"aktif\": true,\n  \"sahip\": null\n}</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: JSON Yapısı",
      "description": "Yukarıdaki örnek JSON metninde, <code>\"portlar\"</code> anahtarının değeri hangi veri tipindedir (JSON Array mi, JSON Object mi, String mi, Number mı)? Cevabınızı bir yorum satırı olarak yazın.",
      "hint": "Köşeli parantez <code>[]</code> neyi temsil ediyordu?"
    },
    "default_code": "# Cevabınızı buraya yorum olarak yazın\n",
    "solution": "# Cevabınızı buraya yorum olarak yazın\n# JSON Array (Python listesine karşılık gelir)"
  },
  {
    "id": "U7_T2_E2",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "'json' Modülünü İçeri Aktarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'json' Modülü</h1><p>Python'da JSON verileriyle çalışmak için standart kütüphanede bulunan <code>json</code> modülünü kullanırız. Önce onu <code>import</code> etmemiz gerekir.</p><pre><code>import json\n\n# Artık json.loads(), json.dumps() gibi fonksiyonları kullanabiliriz.</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İçeri Aktar",
      "description": "<code>json</code> modülünü kodunuza <code>import</code> edin.",
      "hint": "<code>import json</code>"
    },
    "default_code": "# json modülünü burada içeri aktarın\n\nprint(\"json modülü içeri aktarıldı.\")",
    "solution": "import json\n\nprint(\"json modülü içeri aktarıldı.\")"
  },
  {
    "id": "U7_T2_E3",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "JSON String -> Python Dict (loads)",
    "difficulty": "Orta",
    "lesson_html": "<h1>JSON String'den Python'a: json.loads()</h1><p>Elinizde JSON formatında bir *string* varsa, bunu Python'un sözlük (<code>dict</code>) veya listesine (<code>list</code>) dönüştürmek için <code>json.loads()</code> (load string) fonksiyonunu kullanırsınız.</p><pre><code>import json\n\n# JSON formatında bir string\njson_str = '{\"ip_adresi\": \"192.168.1.1\", \"port\": 80}'\n\n# JSON string'ini Python sözlüğüne çevir\nveri_dict = json.loads(json_str)\n\nprint(veri_dict)\nprint(type(veri_dict)) # <class 'dict'>\nprint(veri_dict['ip_adresi']) # Artık sözlük gibi erişebiliriz</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Cihaz Bilgisini Çözümle",
      "description": "<code>cihaz_json_str</code> adında JSON formatında bir string verilmiştir. <code>json.loads()</code> fonksiyonunu kullanarak bu string'i bir Python sözlüğüne (<code>cihaz_bilgisi</code>) çevirin ve ardından bu sözlüğün <code>'model'</code> anahtarının değerini yazdırın.",
      "hint": "<code>cihaz_bilgisi = json.loads(cihaz_json_str)</code> ... <code>print(cihaz_bilgisi['model'])</code>"
    },
    "default_code": "import json\n\ncihaz_json_str = '{\"ip\": \"10.0.0.1\", \"model\": \"Firewall-X\", \"aktif\": true}'\n\n# JSON string'ini burada Python sözlüğüne çevirin\n\n\n# Sözlükten 'model' değerini yazdırın\n",
    "solution": "import json\n\ncihaz_json_str = '{\"ip\": \"10.0.0.1\", \"model\": \"Firewall-X\", \"aktif\": true}'\n\ncihaz_bilgisi = json.loads(cihaz_json_str)\n\nprint(cihaz_bilgisi['model'])"
  },
  {
    "id": "U7_T2_E4",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "Hatalı JSON ve Hata Yakalama",
    "difficulty": "Orta",
    "lesson_html": "<h1>Hatalı JSON: json.JSONDecodeError</h1><p>Eğer <code>json.loads()</code> fonksiyonuna geçersiz formatta bir JSON string'i verirseniz (örn: eksik tırnak, virgül hatası), <code>json.JSONDecodeError</code> hatası alırsınız.</p><p>Bu hatayı <code>try/except</code> bloğu ile yakalamak önemlidir.</p><pre><code>import json\n\nhatali_json = '{\"ip\": \"10.0.0.1\", model: \"Hatalı\"}' # model tırnaksız\n\ntry:\n    veri = json.loads(hatali_json)\nexcept json.JSONDecodeError as e:\n    print(f\"JSON parse hatası: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: JSON Hatasını Yakala",
      "description": "<code>hatali_str</code> geçersiz bir JSON string'i içermektedir (sondaki süslü parantez eksik). <code>json.loads()</code> işlemini <code>try</code> bloğuna alın. <code>except json.JSONDecodeError as e:</code> ile hatayı yakalayın ve <code>\"JSON formatı bozuk!\"</code> mesajını yazdırın.",
      "hint": "<code>try: ... json.loads(...) ... except json.JSONDecodeError as e: ... print(...)</code>"
    },
    "default_code": "import json\n\nhatali_str = '{\"kullanici\": \"test\"'\n\n# try/except bloğunu buraya yazın\n",
    "solution": "import json\n\nhatali_str = '{\"kullanici\": \"test\"'\n\ntry:\n    veri = json.loads(hatali_str)\n    print(\"Başarılı (olmamalı)\")\nexcept json.JSONDecodeError as e:\n    print(f\"JSON formatı bozuk! Hata: {e}\")"
  },
  {
    "id": "U7_T2_E5",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "Python Dict -> JSON String (dumps)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Python'dan JSON String'e: json.dumps()</h1><p>Bir Python sözlüğünü veya listesini JSON formatında bir string'e dönüştürmek için <code>json.dumps()</code> (dump string) fonksiyonunu kullanırsınız.</p><p>Python'daki <code>True</code>/<code>False</code> <code>true</code>/<code>false</code>'a, <code>None</code> ise <code>null</code>'a dönüşür.</p><pre><code>import json\n\nveri_dict = {\n    \"ip_adresi\": \"192.168.1.1\",\n    \"portlar\": [80, 443],\n    \"aktif\": True,\n    \"sahip\": None\n}\n\n# Python sözlüğünü JSON string'ine çevir\njson_str = json.dumps(veri_dict)\n\nprint(json_str) # Tek satırlık, okunması zor bir string\nprint(type(json_str)) # <class 'str'></code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kuralı JSON Yap",
      "description": "<code>kural_bilgisi</code> adında bir Python sözlüğü verilmiştir. <code>json.dumps()</code> fonksiyonunu kullanarak bu sözlüğü JSON formatında bir string'e çevirin ve <code>kural_json_str</code> değişkenine atayıp yazdırın.",
      "hint": "<code>kural_json_str = json.dumps(kural_bilgisi)</code>"
    },
    "default_code": "import json\n\nkural_bilgisi = {\n    \"kaynak_ip\": \"10.0.0.0/24\",\n    \"hedef_port\": 443,\n    \"eylem\": \"izin_ver\"\n}\n\n# Sözlüğü JSON string'ine burada çevirin\n\n\n# JSON string'ini yazdırın\n",
    "solution": "import json\n\nkural_bilgisi = {\n    \"kaynak_ip\": \"10.0.0.0/24\",\n    \"hedef_port\": 443,\n    \"eylem\": \"izin_ver\"\n}\n\nkural_json_str = json.dumps(kural_bilgisi)\n\nprint(kural_json_str)"
  },
  {
    "id": "U7_T2_E6",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "JSON Güzelleştirme (indent)",
    "difficulty": "Orta",
    "lesson_html": "<h1>JSON Güzelleştirme (indent)</h1><p><code>json.dumps()</code> ile oluşturulan string genellikle tek satırda ve okunması zordur. <code>indent</code> parametresine bir tamsayı (genellikle <code>4</code>) vererek JSON string'ini girintili ve daha okunabilir hale getirebilirsiniz.</p><pre><code>import json\n\nveri_dict = {\"ip\": \"1.1.1.1\", \"portlar\": [80, 443]}\n\n# 4 boşluk girintili JSON string'i oluştur\nguzel_json_str = json.dumps(veri_dict, indent=4)\n\nprint(guzel_json_str)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Okunabilir Zafiyet Raporu",
      "description": "<code>zafiyet_bilgisi</code> sözlüğü verilmiştir. <code>json.dumps()</code> fonksiyonunu <code>indent=4</code> parametresiyle kullanarak bu sözlüğü okunabilir (girintili) bir JSON string'ine çevirin ve yazdırın.",
      "hint": "<code>json.dumps(zafiyet_bilgisi, indent=4)</code>"
    },
    "default_code": "import json\n\nzafiyet_bilgisi = {\n    \"cve\": \"CVE-2021-44228\",\n    \"risk\": 9.8,\n    \"cozum_var\": False\n}\n\n# Sözlüğü okunabilir JSON string'ine burada çevirin ve yazdırın\n",
    "solution": "import json\n\nzafiyet_bilgisi = {\n    \"cve\": \"CVE-2021-44228\",\n    \"risk\": 9.8,\n    \"cozum_var\": False\n}\n\nguzel_json = json.dumps(zafiyet_bilgisi, indent=4)\nprint(guzel_json)"
  },
  {
    "id": "U7_T2_E7",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "Dosyadan JSON Okuma (load)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dosyadan JSON Okuma: json.load()</h1><p>Bir JSON dosyasının içeriğini doğrudan Python nesnesine (sözlük/liste) dönüştürmek için <code>json.load()</code> (s yok!) fonksiyonu kullanılır. Bu fonksiyon, string yerine açık bir *dosya nesnesini* argüman olarak alır.</p><p>(Simülasyon: 'config.json' dosyası <code>{\"ip\": \"1.1.1.1\"}</code> içeriyor)</p><pre><code>import json\n\n# Gerçek kod:\n# with open('config.json', 'r') as f:\n#     config_data = json.load(f)\n#     print(config_data['ip'])\n\n# Simülasyon:\nimport io\njson_metni = '{\"ip\": \"1.1.1.1\"}'\ndosya_benzeri = io.StringIO(json_metni)\nconfig_data = json.load(dosya_benzeri)\nprint(config_data['ip']) # Çıktı: 1.1.1.1</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: JSON Dosyasını Yükle",
      "description": "Simüle edilmiş <code>kullanicilar.json</code> dosyasını temsil eden <code>dosya</code> nesnesi verilmiştir. <code>json.load()</code> fonksiyonunu kullanarak bu dosya nesnesinin içeriğini <code>kullanici_listesi</code> adlı bir Python listesine yükleyin ve bu listeyi yazdırın.",
      "hint": "<code>kullanici_listesi = json.load(dosya)</code>"
    },
    "default_code": "import json\nimport io\n\n# Simülasyon: 'kullanicilar.json' içeriği\njson_icerik = '[{\"id\": 1, \"ad\": \"admin\"}, {\"id\": 2, \"ad\": \"guest\"}]'\ndosya = io.StringIO(json_icerik) # Dosya gibi davranan nesne\n\n# json.load() ile dosyadan veriyi okuyun\n\n\n# Okunan listeyi yazdırın\n",
    "solution": "import json\nimport io\n\njson_icerik = '[{\"id\": 1, \"ad\": \"admin\"}, {\"id\": 2, \"ad\": \"guest\"}]'\ndosya = io.StringIO(json_icerik)\n\nkullanici_listesi = json.load(dosya)\n\nprint(kullanici_listesi)"
  },
  {
    "id": "U7_T2_E8",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "Dosyaya JSON Yazma (dump)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dosyaya JSON Yazma: json.dump()</h1><p>Bir Python nesnesini (sözlük/liste) doğrudan bir dosyaya JSON formatında yazmak için <code>json.dump(nesne, dosya_nesnesi)</code> (s yok!) fonksiyonu kullanılır.</p><p>Okunabilirlik için <code>indent</code> parametresi burada da kullanılabilir.</p><p>(Simülasyon: 'output.json' dosyasına yazıyoruz)</p><pre><code>import json\n\nveri = {\"status\": \"OK\", \"data\": [1, 2, 3]}\n\n# Gerçek kod:\n# with open('output.json', 'w') as f:\n#     json.dump(veri, f, indent=4)\n\n# Simülasyon:\nimport io\ndosya_benzeri = io.StringIO()\njson.dump(veri, dosya_benzeri, indent=4)\nprint(\"DOSYAYA YAZILAN:\\n\" + dosya_benzeri.getvalue())</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Raporu JSON Olarak Kaydet",
      "description": "<code>rapor_verisi</code> sözlüğü ve simüle edilmiş <code>rapor_dosyasi</code> nesnesi verilmiştir. <code>json.dump()</code> fonksiyonunu kullanarak <code>rapor_verisi</code>'ni <code>rapor_dosyasi</code>'na <code>indent=2</code> (2 boşluk girinti) ile yazdırın.",
      "hint": "<code>json.dump(rapor_verisi, rapor_dosyasi, indent=2)</code>"
    },
    "default_code": "import json\nimport io\n\nrapor_verisi = {\"hedef\": \"10.0.0.1\", \"portlar\": [80, 22], \"durum\": \"Tamamlandı\"}\n\n# Simülasyon: Yazılacak dosya nesnesi\nclass SahteYazmaDosyasi:\n    def __init__(self):\n        self._icerik = \"\"\n    def write(self, s):\n        self._icerik += s\n    def getvalue(self):\n        return self._icerik\nrapor_dosyasi = SahteYazmaDosyasi()\n\n# json.dump() ile veriyi dosyaya yazın (indent=2 ile)\n\n\n# Dosyaya ne yazıldığını görmek için (simülasyon)\nprint(rapor_dosyasi.getvalue())",
    "solution": "import json\nimport io\n\nrapor_verisi = {\"hedef\": \"10.0.0.1\", \"portlar\": [80, 22], \"durum\": \"Tamamlandı\"}\n\nclass SahteYazmaDosyasi:\n    def __init__(self):\n        self._icerik = \"\"\n    def write(self, s):\n        self._icerik += s\n    def getvalue(self):\n        return self._icerik\nrapor_dosyasi = SahteYazmaDosyasi()\n\njson.dump(rapor_verisi, rapor_dosyasi, indent=2)\n\nprint(rapor_dosyasi.getvalue())"
  },
  {
    "id": "U7_T2_E9",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "İç İçe Veriye Erişim",
    "difficulty": "Orta",
    "lesson_html": "<h1>İç İçe Veriye Erişim</h1><p>JSON verileri genellikle iç içe (nested) yapılara sahiptir (sözlük içinde liste, liste içinde sözlük vb.). <code>json.loads()</code> veya <code>json.load()</code> ile Python nesnesine çevirdikten sonra, bu iç içe verilere standart Python sözlük/liste erişim yöntemleri (<code>[]</code>) ile erişiriz.</p><pre><code>import json\n\njson_str = '''\n{\n  \"tarama\": {\n    \"id\": \"scan001\",\n    \"hedefler\": [\"1.1.1.1\", \"2.2.2.2\"],\n    \"ayarlar\": {\"port\": \"full\"}\n  }\n}\n'''\n\nveri = json.loads(json_str)\n\n# İç içe erişim\ntarama_id = veri[\"tarama\"][\"id\"]\nilk_hedef = veri[\"tarama\"][\"hedefler\"][0]\nport_ayari = veri[\"tarama\"][\"ayarlar\"][\"port\"]\n\nprint(f\"ID: {tarama_id}, İlk Hedef: {ilk_hedef}, Port: {port_ayari}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Zafiyet Detayına Eriş",
      "description": "JSON'dan çevrilmiş <code>zafiyet_raporu</code> sözlüğü verilmiştir. Bu sözlüğün içindeki <code>'detaylar'</code> anahtarının altındaki <code>'cvss_skoru'</code> anahtarının değerini (<code>9.8</code>) yazdırın.",
      "hint": "<code>zafiyet_raporu['detaylar']['cvss_skoru']</code>"
    },
    "default_code": "import json\n\nrapor_str = '''\n{\n  \"cve\": \"CVE-2021-44228\",\n  \"urun\": \"Apache Log4j\",\n  \"detaylar\": {\n    \"cvss_skoru\": 9.8,\n    \"vektor\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\"\n  }\n}\n'''\nzafiyet_raporu = json.loads(rapor_str)\n\n# CVSS skorunu buradan erişip yazdırın\n",
    "solution": "import json\n\nrapor_str = '''\n{\n  \"cve\": \"CVE-2021-44228\",\n  \"urun\": \"Apache Log4j\",\n  \"detaylar\": {\n    \"cvss_skoru\": 9.8,\n    \"vektor\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\"\n  }\n}\n'''\nzafiyet_raporu = json.loads(rapor_str)\n\ncvss = zafiyet_raporu['detaylar']['cvss_skoru']\nprint(f\"CVSS Skoru: {cvss}\")"
  },
  {
    "id": "U7_T2_E10",
    "unit_id": 7,
    "topic_id": 2,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "json Modülü",
    "title": "Kullanım Alanı: API Yanıtı (Simülasyon)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Kullanım Alanı: API Yanıtı</h1><p><code>json</code> modülünün en yaygın kullanım alanlarından biri, web API'lerinden (örn: VirusTotal, Shodan, Hava Durumu) gelen JSON formatındaki yanıtları işlemektir.</p><p>(Simülasyon: Bir IP sorgulama API'sinden gelen yanıt)</p><pre><code>import json\n\napi_yaniti_str = '''\n{\n  \"ip\": \"8.8.8.8\",\n  \"ulke\": \"US\",\n  \"organizasyon\": \"Google LLC\",\n  \"kara_liste\": false\n}\n'''\n\n# Yanıtı parse et\nbilgi = json.loads(api_yaniti_str)\n\n# Bilgileri kullan\nif not bilgi[\"kara_liste\"]:\n    print(f\"{bilgi['ip']} ({bilgi['organizasyon']}) temiz görünüyor.\")\nelse:\n    print(f\"UYARI: {bilgi['ip']} kara listede!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: VirusTotal Yanıtı",
      "description": "Simüle edilmiş bir VirusTotal API yanıtı (<code>vt_yanit_str</code>) verilmiştir. Bu JSON string'ini <code>json.loads()</code> ile <code>vt_veri</code> sözlüğüne çevirin. Ardından, <code>vt_veri</code> sözlüğünden <code>'positives'</code> (kaç antivirüs motorunun zararlı bulduğu) ve <code>'total'</code> (toplam kaç motorun taradığı) değerlerini alıp <code>f\"{positives} / {total} oranında zararlı\"</code> formatında yazdırın.",
      "hint": "<code>vt_veri = json.loads(...)</code> ... <code>pos = vt_veri['positives']</code> ... <code>tot = vt_veri['total']</code>"
    },
    "default_code": "import json\n\n# Simüle edilmiş VirusTotal API yanıtı (basitleştirilmiş)\nvt_yanit_str = '''\n{\n  \"response_code\": 1,\n  \"scan_id\": \"abc-123\",\n  \"positives\": 5,\n  \"total\": 70,\n  \"scan_date\": \"2025-10-27 13:00:00\"\n}\n'''\n\n# JSON'ı burada parse edin\n\n\n# 'positives' ve 'total' değerlerini alıp yazdırın\n",
    "solution": "import json\n\nvt_yanit_str = '''\n{\n  \"response_code\": 1,\n  \"scan_id\": \"abc-123\",\n  \"positives\": 5,\n  \"total\": 70,\n  \"scan_date\": \"2025-10-27 13:00:00\"\n}\n'''\n\n# JSON'ı burada parse edin\nvt_veri = json.loads(vt_yanit_str)\n\n# 'positives' ve 'total' değerlerini alıp yazdırın\npositives = vt_veri['positives']\ntotal = vt_veri['total']\nprint(f\"{positives} / {total} oranında zararlı\")"
  },
  {
    "id": "U7_T3_E1",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "'os' Modülünü İçeri Aktarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'os' Modülü</h1><p><code>os</code> (Operating System - İşletim Sistemi) modülü, Python'un işletim sistemiyle etkileşim kurmasını sağlayan fonksiyonları içerir. Dosya/dizin işlemleri, ortam değişkenleri gibi temel görevler için kullanılır.</p><p>Kullanmak için önce <code>import os</code> yazmanız gerekir.</p><pre><code>import os\n\n# os.getcwd(), os.listdir() gibi fonksiyonları kullanabiliriz.</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'os' İçeri Aktar",
      "description": "<code>os</code> modülünü kodunuza <code>import</code> edin.",
      "hint": "<code>import os</code>"
    },
    "default_code": "# os modülünü burada içeri aktarın\n\nprint(\"os modülü içeri aktarıldı.\")",
    "solution": "import os\n\nprint(\"os modülü içeri aktarıldı.\")"
  },
  {
    "id": "U7_T3_E2",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Çalışma Dizini (os.getcwd)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Çalışma Dizini: os.getcwd()</h1><p><code>os.getcwd()</code> (Get Current Working Directory) fonksiyonu, Python betiğinizin o an çalıştığı *mevcut dizinin* tam yolunu (path) bir string olarak döndürür.</p><p>Bu, özellikle göreceli (relative) dosya yollarıyla çalışırken (örn: <code>open('data.txt', 'r')</code>) dosyanın nerede arandığını anlamak için önemlidir.</p><pre><code>import os\n\nmevcut_dizin = os.getcwd()\nprint(f\"Şu anki çalışma dizini: {mevcut_dizin}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Çalışma Dizinini Yazdır",
      "description": "<code>os</code> modülünü import edin ve <code>os.getcwd()</code> fonksiyonunu kullanarak mevcut çalışma dizinini konsola yazdırın. (Pyodide ortamında bu genellikle '/' kök dizinini gösterir).",
      "hint": "<code>import os</code> ... <code>print(os.getcwd())</code>"
    },
    "default_code": "# os modülünü import edin\n\n\n# Mevcut çalışma dizinini yazdırın\n",
    "solution": "import os\n\nmevcut_dizin = os.getcwd()\nprint(mevcut_dizin)"
  },
  {
    "id": "U7_T3_E3",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Dizin İçeriğini Listeleme (os.listdir)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Dizin İçeriğini Listeleme: os.listdir()</h1><p><code>os.listdir(dizin_yolu)</code> fonksiyonu, belirtilen dizin yolundaki dosya ve klasörlerin adlarını içeren bir *liste* döndürür. Eğer dizin yolu verilmezse, mevcut çalışma dizinini (<code>.</code>) listeler.</p><p>Bu, belirli dosyaları aramak veya bir dizindeki tüm dosyaları işlemek için kullanılır.</p><pre><code>import os\n\n# Mevcut dizindekileri listele\nicerik = os.listdir('.') # '.' mevcut dizin demektir\nprint(icerik)\n\n# Belirli bir dizini listele (varsa)\n# try:\n#     log_icerigi = os.listdir('/var/log')\n# except FileNotFoundError:\n#     print(\"/var/log bulunamadı\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Dizin Listele (Simülasyon)",
      "description": "<code>os</code> modülünü import edin. <code>os.listdir('.')</code> fonksiyonunu çağırarak mevcut dizinin içeriğini (simüle edilmiş olarak) <code>dosyalar</code> değişkenine atayın ve yazdırın. (Pyodide ortamı kısıtlı olduğu için gerçek dosya sistemini listelemeyecektir).",
      "hint": "<code>dosyalar = os.listdir('.')</code>"
    },
    "default_code": "import os\n\n# Simülasyon: os.listdir'ın sahte bir liste döndürmesini sağla\noriginal_listdir = os.listdir\nos.listdir = lambda x: ['index.html', 'style.css', 'script.js', 'database.json'] if x == '.' else original_listdir(x)\n\n# Mevcut dizinin içeriğini listele ve yazdır\n\n\n# Simülasyonu geri al\nos.listdir = original_listdir",
    "solution": "import os\n\n# Simülasyon:\noriginal_listdir = os.listdir\nos.listdir = lambda x: ['index.html', 'style.css', 'script.js', 'database.json'] if x == '.' else original_listdir(x)\n\n# Mevcut dizinin içeriğini listele ve yazdır\ndosyalar = os.listdir('.')\nprint(dosyalar)\n\n# Simülasyonu geri al\nos.listdir = original_listdir"
  },
  {
    "id": "U7_T3_E4",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Platform Bağımsız Yol (os.path.join)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Platform Bağımsız Yol: os.path.join()</h1><p>Farklı işletim sistemleri (Windows, Linux) dosya yollarını farklı ayraçlarla (<code>\\</code> vs <code>/</code>) gösterir. Kodunuzun her platformda çalışması için yolları manuel olarak birleştirmek yerine <code>os.path.join()</code> kullanmak en doğrusudur. Bu fonksiyon, işletim sistemine uygun ayraçları otomatik olarak kullanır.</p><pre><code>import os\n\ndizin = \"logs\"\ndosya_adi = \"access.log\"\n\n# Otomatik olarak doğru ayracı kullanır (Win'de \\, Linux'ta /)\ntam_yol = os.path.join(dizin, dosya_adi)\nprint(tam_yol) # Örn: logs/access.log veya logs\\access.log</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log Dosyası Yolu",
      "description": "<code>os</code> modülünü import edin. <code>log_klasoru = \"/var/log\"</code> ve <code>log_dosyasi = \"auth.log\"</code> değişkenleri verilmiştir. <code>os.path.join()</code> fonksiyonunu kullanarak bu iki parçayı işletim sistemine uygun şekilde birleştirin ve oluşan <code>tam_log_yolu</code>'nu yazdırın.",
      "hint": "<code>tam_log_yolu = os.path.join(log_klasoru, log_dosyasi)</code>"
    },
    "default_code": "# os modülünü import edin\n\n\nlog_klasoru = \"/var/log\"\nlog_dosyasi = \"auth.log\"\n\n# İki parçayı os.path.join ile birleştirin\n\n\n# Tam yolu yazdırın\n",
    "solution": "import os\n\nlog_klasoru = \"/var/log\"\nlog_dosyasi = \"auth.log\"\n\ntam_log_yolu = os.path.join(log_klasoru, log_dosyasi)\n\nprint(tam_log_yolu)"
  },
  {
    "id": "U7_T3_E5",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Dosya/Dizin Var mı? (os.path.exists)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Varlık Kontrolü: os.path.exists()</h1><p>Daha önce Dosya G/Ç ünitesinde gördüğümüz gibi, <code>os.path.exists(yol)</code> bir dosyanın veya dizinin belirtilen yolda var olup olmadığını kontrol eder (<code>True</code>/<code>False</code>). Bu, işlem yapmadan önce kontrol etmek için çok önemlidir.</p><pre><code>import os\n\nyol = \"/etc/passwd\"\nif os.path.exists(yol):\n    print(f\"{yol} bulundu.\")\nelse:\n    print(f\"{yol} bulunamadı.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Rapor Dosyası Kontrolü",
      "description": "<code>os</code> modülünü import edin. <code>rapor_yolu = \"reports/final_report.txt\"</code> değişkeni verilmiştir. <code>os.path.exists()</code> kullanarak bu dosyanın var olup olmadığını (simüle edilmiş <code>False</code>) kontrol edin. Yoksa <code>\"Rapor dosyası henüz oluşturulmamış.\"</code> yazdırın.",
      "hint": "<code>if not os.path.exists(rapor_yolu): ...</code>"
    },
    "default_code": "import os\n\nrapor_yolu = \"reports/final_report.txt\"\n\n# Simülasyon: Dosyanın var olmadığını varsayalım\noriginal_exists = os.path.exists\nos.path.exists = lambda x: False if x == rapor_yolu else original_exists(x)\n\n# Dosyanın var olup olmadığını kontrol edin\n\n\n# Simülasyonu geri al\nos.path.exists = original_exists",
    "solution": "import os\n\nrapor_yolu = \"reports/final_report.txt\"\n\n# Simülasyon:\noriginal_exists = os.path.exists\nos.path.exists = lambda x: False if x == rapor_yolu else original_exists(x)\n\nif not os.path.exists(rapor_yolu):\n    print(\"Rapor dosyası henüz oluşturulmamış.\")\nelse:\n    print(\"Rapor dosyası bulundu.\")\n\n# Simülasyonu geri al\nos.path.exists = original_exists"
  },
  {
    "id": "U7_T3_E6",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Dosya mı? Dizin mi? (isfile/isdir)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Dosya mı? Dizin mi?</h1><p><code>os.path</code> modülü, bir yolun dosya mı yoksa dizin mi olduğunu kontrol etmek için fonksiyonlar sunar:</p><ul><li><code>os.path.isfile(yol)</code>: Yol bir dosyaysa <code>True</code> döner.</li><li><code>os.path.isdir(yol)</code>: Yol bir dizinse (klasör) <code>True</code> döner.</li></ul><pre><code>import os\n\nyol1 = \"/etc/passwd\" # Dosya\nyol2 = \"/var/log\"    # Dizin\n\nif os.path.isfile(yol1):\n    print(f\"{yol1} bir dosyadır.\")\nif os.path.isdir(yol2):\n    print(f\"{yol2} bir dizindir.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hedefi Sınıflandır",
      "description": "<code>os</code> modülünü import edin. <code>hedef_yol = \"/tmp\"</code> (bir dizin) verilmiştir. <code>os.path.isdir()</code> kullanarak bu yolun bir dizin olup olmadığını kontrol edin. Eğer dizinse <code>\"Hedef bir dizin.\"</code> yazdırın.",
      "hint": "<code>if os.path.isdir(hedef_yol): ...</code>"
    },
    "default_code": "import os\n\nhedef_yol = \"/tmp\"\n\n# Simülasyon: /tmp'nin dizin olduğunu varsayalım\noriginal_isdir = os.path.isdir\nos.path.isdir = lambda x: True if x == hedef_yol else original_isdir(x)\n\n# hedef_yol'un dizin olup olmadığını kontrol edin\n\n\n# Simülasyonu geri al\nos.path.isdir = original_isdir",
    "solution": "import os\n\nhedef_yol = \"/tmp\"\n\n# Simülasyon:\noriginal_isdir = os.path.isdir\nos.path.isdir = lambda x: True if x == hedef_yol else original_isdir(x)\n\nif os.path.isdir(hedef_yol):\n    print(\"Hedef bir dizin.\")\nelif os.path.isfile(hedef_yol):\n     print(\"Hedef bir dosya.\")\nelse:\n     print(\"Hedef bulunamadı veya türü bilinmiyor.\")\n\n# Simülasyonu geri al\nos.path.isdir = original_isdir"
  },
  {
    "id": "U7_T3_E7",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Ortam Değişkenleri (os.environ)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Ortam Değişkenleri: os.environ</h1><p>Ortam değişkenleri (Environment Variables), işletim sisteminin kendisinde saklanan ve çalışan programlara bilgi (örn: API anahtarları, sistem yolları) sağlamak için kullanılan anahtar-değer çiftleridir.</p><p><code>os.environ</code>, bu değişkenlere erişmenizi sağlayan *sözlük benzeri* bir nesnedir. Anahtarlar genellikle büyük harfle yazılır.</p><pre><code>import os\n\n# 'PATH' ortam değişkeninin değerini al (Linux/macOS)\n# Windows'ta 'Path' olabilir\nyol = os.environ.get('PATH') \nprint(f\"PATH: {yol[:50]}...\") # Çok uzun olabilir, ilk 50 karakteri\n\n# Olmayan bir değişkene erişmek hata verir (get kullanmazsanız)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adı",
      "description": "<code>os</code> modülünü import edin. <code>os.environ.get()</code> metodunu kullanarak <code>'USERNAME'</code> (Windows) veya <code>'USER'</code> (Linux/macOS) ortam değişkenini okumayı deneyin (hangisi varsa onu bulur). Bulunan kullanıcı adını yazdırın. (Pyodide ortamında bu değişkenler olmayabilir, <code>None</code> yazdırırsa normaldir).",
      "hint": "<code>kullanici = os.environ.get('USERNAME') or os.environ.get('USER')</code>"
    },
    "default_code": "# os modülünü import edin\n\n\n# USERNAME veya USER ortam değişkenini okuyup yazdırın\n",
    "solution": "import os\n\n# Pyodide'da bunlar olmayabilir, None dönebilir\nkullanici = os.environ.get('USERNAME') or os.environ.get('USER')\nprint(f\"Kullanıcı: {kullanici}\")"
  },
  {
    "id": "U7_T3_E8",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Ortam Değişkeni (os.getenv)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Ortam Değişkeni: os.getenv()</h1><p><code>os.environ.get(ANAHTAR, varsayilan)</code> yerine, daha kısa bir yazım olan <code>os.getenv(ANAHTAR, varsayilan)</code> fonksiyonunu da kullanabilirsiniz. İkisi de aynı işi yapar: Ortam değişkenini bulamazsa hata vermek yerine <code>None</code> veya belirttiğiniz varsayılan değeri döndürür.</p><p>API anahtarları gibi hassas bilgileri kodun içine yazmak yerine ortam değişkenlerinden okumak daha güvenli bir yöntemdir.</p><pre><code>import os\n\n# API_KEY ortam değişkenini oku, bulamazsan 'DEFAULT_KEY' kullan\napi_anahtari = os.getenv('API_KEY', 'DEFAULT_KEY')\nprint(f\"Kullanılacak API Anahtarı: {api_anahtari}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: API Anahtarını Oku",
      "description": "<code>os</code> modülünü import edin. <code>os.getenv()</code> fonksiyonunu kullanarak <code>'SECRET_API_KEY'</code> adlı ortam değişkenini okuyun. Eğer bu değişken tanımlı değilse, varsayılan değer olarak <code>\"anahtar_bulunamadi\"</code> string'ini kullanın. Sonucu <code>api_key</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>api_key = os.getenv('SECRET_API_KEY', 'anahtar_bulunamadi')</code>"
    },
    "default_code": "# os modülünü import edin\n\n\n# SECRET_API_KEY ortam değişkenini varsayılan değer ile okuyun\n\n\n# Sonucu yazdırın\n",
    "solution": "import os\n\napi_key = os.getenv('SECRET_API_KEY', 'anahtar_bulunamadi')\n\nprint(api_key)"
  },
  {
    "id": "U7_T3_E9",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "'sys' Modülü ve Komut Satırı Argümanları",
    "difficulty": "Orta",
    "lesson_html": "<h1>'sys' Modülü ve sys.argv</h1><p><code>sys</code> modülü, Python yorumlayıcısı ve sistemiyle ilgili bilgiler sağlar. En önemli özelliklerinden biri <code>sys.argv</code> listesidir.</p><p><code>sys.argv</code>, programınızı komut satırından çalıştırırken verdiğiniz argümanları içeren bir *listedir*. Listenin <strong>ilk elemanı (<code>sys.argv[0]</code>) her zaman betiğin (script) kendi adıdır</strong>.</p><p>Örnek: Komut satırına <code>python tara.py 192.168.1.1 80</code> yazdığınızda:</p><ul><li><code>sys.argv[0]</code> -> <code>'tara.py'</code></li><li><code>sys.argv[1]</code> -> <code>'192.168.1.1'</code></li><li><code>sys.argv[2]</code> -> <code>'80'</code></li></ul>",
    "challenge": {
      "title": "Meydan Okuma: sys.argv'ı Yazdır",
      "description": "<code>sys</code> modülünü import edin. <code>sys.argv</code> listesini doğrudan konsola yazdırın. (Bu platformda komut satırı argümanı veremediğimiz için, liste genellikle sadece betik adını veya benzeri bir şeyi içerecektir).",
      "hint": "<code>import sys</code> ... <code>print(sys.argv)</code>"
    },
    "default_code": "# sys modülünü import edin\n\n\n# sys.argv listesini yazdırın\n",
    "solution": "import sys\n\nprint(sys.argv)"
  },
  {
    "id": "U7_T3_E10",
    "unit_id": 7,
    "topic_id": 3,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "os ve sys Modülleri",
    "title": "Komut Satırı Argümanlarını Kullanma",
    "difficulty": "Zor",
    "lesson_html": "<h1>sys.argv Kullanımı</h1><p>Komut satırı araçları yazarken, kullanıcıdan hedef IP, port, dosya adı gibi bilgileri <code>sys.argv</code> aracılığıyla alırız.</p><p><strong>Unutmayın:</strong> <code>sys.argv</code>'daki tüm elemanlar *string* olarak gelir. Sayısal işlem yapacaksanız <code>int()</code> veya <code>float()</code> ile dönüştürmeniz gerekir. Ayrıca, yeterli sayıda argüman verilip verilmediğini kontrol etmek (<code>len(sys.argv)</code>) önemlidir.</p><pre><code>import sys\n\n# En az 1 argüman (hedef IP) beklendiğini varsayalım\nif len(sys.argv) < 2:\n    print(\"Hata: Lütfen hedef IP adresini girin.\")\n    # sys.exit(1) # Programı hata koduyla sonlandır (opsiyonel)\nelse:\n    hedef_ip = sys.argv[1] # İlk argümanı al (index 1)\n    print(f\"Hedef IP: {hedef_ip}\")\n    # ... tarama kodu ...</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Argümanları Al (Simülasyon)",
      "description": "<code>sys</code> modülünü import edin. Normalde komut satırından alınacak argümanları simüle etmek için <code>sys.argv = [\"scan.py\", \"10.0.0.1\", \"80\"]</code> satırını ekleyin. Ardından <code>sys.argv</code> listesinin <strong>ikinci</strong> (hedef IP) ve <strong>üçüncü</strong> (port) elemanlarını ayrı değişkenlere (<code>hedef</code>, <code>port_str</code>) atayın ve bunları <code>f\"Hedef: {hedef}, Port: {port_str}\"</code> formatında yazdırın.",
      "hint": "<code>hedef = sys.argv[1]</code> ... <code>port_str = sys.argv[2]</code>"
    },
    "default_code": "import sys\n\n# Simülasyon: Komut satırı argümanlarını ayarla\nsys.argv = [\"scan.py\", \"10.0.0.1\", \"80\"]\n\n# Hedef IP'yi (index 1) ve Port'u (index 2) alın\n\n\n# Alınan değerleri yazdırın\n",
    "solution": "import sys\n\n# Simülasyon:\nsys.argv = [\"scan.py\", \"10.0.0.1\", \"80\"]\n\n# Hedef IP'yi (index 1) ve Port'u (index 2) alın\nif len(sys.argv) > 2:\n    hedef = sys.argv[1]\n    port_str = sys.argv[2]\n    # İsterseniz portu int'e çevirebilirsiniz: port = int(port_str)\n    \n    # Alınan değerleri yazdırın\n    print(f\"Hedef: {hedef}, Port: {port_str}\")\nelse:\n    print(\"Yeterli argüman yok (simülasyon hatası)\")"
  },
  {
    "id": "U7_T4_E1",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "Problem: Sözlükte Anahtar Kontrolü",
    "difficulty": "Orta",
    "lesson_html": "<h1>'collections' Modülü</h1><p><code>collections</code> modülü, Python'un standart veri yapılarına (dict, list, tuple, set) ek olarak özel amaçlı, yüksek performanslı veri yapıları sunar.</p><p>Normal bir sözlükte bir anahtarın değerini artırmak istediğimizde, önce anahtarın var olup olmadığını kontrol etmemiz gerekir, yoksa <code>KeyError</code> alırız:</p><pre><code>sayac = {}\nanahtar = \"ip1\"\n\nif anahtar in sayac:\n    sayac[anahtar] += 1\nelse:\n    sayac[anahtar] = 1</code></pre><p>Bu, özellikle sayaç uygulamalarında tekrar eden bir koddur.</p>",
    "challenge": {
      "title": "Meydan Okuma: Manuel Sayaç",
      "description": "Boş bir <code>ip_sayaci</code> sözlüğü oluşturun. <code>\"10.0.0.1\"</code> IP'sini bu sayaçta 1 artırmak için yukarıdaki derste gösterilen <code>if/else</code> kontrolünü manuel olarak yazın. Ardından sayacı yazdırın.",
      "hint": "<code>if \"10.0.0.1\" in ip_sayaci: ... else: ...</code>"
    },
    "default_code": "ip_sayaci = {}\nip = \"10.0.0.1\"\n\n# 'ip' anahtarını kontrol edip sayacı artırın veya başlatın\n\n\nprint(ip_sayaci)",
    "solution": "ip_sayaci = {}\nip = \"10.0.0.1\"\n\nif ip in ip_sayaci:\n    ip_sayaci[ip] += 1\nelse:\n    ip_sayaci[ip] = 1\n\nprint(ip_sayaci)"
  },
  {
    "id": "U7_T4_E2",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "Çözüm: defaultdict",
    "difficulty": "Orta",
    "lesson_html": "<h1>collections.defaultdict</h1><p><code>defaultdict</code>, normal bir sözlük gibidir, ancak oluşturulurken bir 'varsayılan fabrika' (default factory) fonksiyonu (örn: <code>int</code>, <code>list</code>, <code>set</code>) alır.</p><p>Eğer var olmayan bir anahtara erişmeye çalışırsanız, <code>KeyError</code> vermek yerine, o anahtarı otomatik olarak oluşturur ve değerini varsayılan fabrikanın döndürdüğü değere (<code>int()</code> için <code>0</code>, <code>list()</code> için <code>[]</code>) ayarlar.</p><pre><code>from collections import defaultdict\n\n# Varsayılan değer olarak 0 üreten bir defaultdict (int() -> 0)\nsayac = defaultdict(int)\n\nanahtar = \"ip1\"\nsayac[anahtar] += 1 # Anahtar yoksa otomatik 0'dan başlar\n\nprint(sayac) # Çıktı: defaultdict(<class 'int'>, {'ip1': 1})</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: defaultdict ile Sayaç",
      "description": "<code>collections</code> modülünden <code>defaultdict</code>'i import edin. Varsayılan fabrika olarak <code>int</code> kullanarak <code>ip_sayaci</code> adında bir <code>defaultdict</code> oluşturun. Ardından, <i>hiçbir kontrol yapmadan</i> doğrudan <code>ip_sayaci[\"10.0.0.1\"] += 1</code> komutuyla sayacı artırın ve sonucu yazdırın.",
      "hint": "<code>from collections import defaultdict</code> ... <code>ip_sayaci = defaultdict(int)</code>"
    },
    "default_code": "# defaultdict'i burada import edin\n\n\n# defaultdict(int) kullanarak sayacı oluşturun\n\n\n# Anahtar kontrolü yapmadan sayacı artırın\n\n\n# Sayacı yazdırın\n",
    "solution": "from collections import defaultdict\n\nip_sayaci = defaultdict(int)\n\nip_sayaci[\"10.0.0.1\"] += 1\n\nprint(ip_sayaci)"
  },
  {
    "id": "U7_T4_E3",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "defaultdict(list)",
    "difficulty": "Orta",
    "lesson_html": "<h1>defaultdict(list)</h1><p><code>defaultdict(list)</code>, anahtarları belirli kategorilere göre gruplamak için çok kullanışlıdır. Var olmayan bir anahtara <code>.append()</code> yapmaya çalıştığınızda, otomatik olarak o anahtar için boş bir liste oluşturur.</p><pre><code>from collections import defaultdict\n\nkullanici_gruplari = defaultdict(list)\n\nkullanici_gruplari[\"admin\"].append(\"kullanici1\")\nkullanici_gruplari[\"guest\"].append(\"kullanici2\")\nkullanici_gruplari[\"admin\"].append(\"kullanici3\")\n\nprint(kullanici_gruplari)\n# Çıktı: defaultdict(<class 'list'>, {'admin': ['kullanici1', 'kullanici3'], 'guest': ['kullanici2']})</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Portları Servislere Göre Grupla",
      "description": "<code>defaultdict(list)</code> kullanarak <code>servis_portlari</code> adında bir sözlük oluşturun. <code>servis_portlari[\"WEB\"].append(80)</code> ve <code>servis_portlari[\"WEB\"].append(443)</code> komutlarıyla \"WEB\" anahtarına portları ekleyin. Ardından <code>servis_portlari[\"SSH\"].append(22)</code> ekleyin. Sonucu yazdırın.",
      "hint": "Anahtar kontrolü yapmanıza gerek yok."
    },
    "default_code": "from collections import defaultdict\n\n# defaultdict(list) oluşturun\n\n\n# Portları ilgili servislere ekleyin\n\n\n# Sözlüğü yazdırın\n",
    "solution": "from collections import defaultdict\n\nservis_portlari = defaultdict(list)\n\nservis_portlari[\"WEB\"].append(80)\nservis_portlari[\"WEB\"].append(443)\nservis_portlari[\"SSH\"].append(22)\n\nprint(servis_portlari)"
  },
  {
    "id": "U7_T4_E4",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "collections.Counter (Temel)",
    "difficulty": "Orta",
    "lesson_html": "<h1>collections.Counter</h1><p><code>Counter</code>, bir iterable (liste, string, tuple vb.) içindeki elemanların kaçar kez geçtiğini saymak için optimize edilmiş bir sözlük alt sınıfıdır. Sonuç, <code>eleman: tekrar_sayisi</code> şeklinde bir sözlük olarak döner.</p><pre><code>from collections import Counter\n\nip_listesi = [\"1.1.1.1\", \"2.2.2.2\", \"1.1.1.1\", \"3.3.3.3\"]\n\nip_sayaci = Counter(ip_listesi)\n\nprint(ip_sayaci)\n# Çıktı: Counter({'1.1.1.1': 2, '2.2.2.2': 1, '3.3.3.3': 1})\n\n# Belirli bir IP'nin sayısını al\nprint(ip_sayaci[\"1.1.1.1\"]) # Çıktı: 2</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Başarısız Girişleri Say",
      "description": "<code>collections</code>'dan <code>Counter</code>'ı import edin. Başarısız giriş yapılan IP adreslerini içeren <code>giris_loglari</code> listesi verilmiştir. <code>Counter()</code> yapıcısını kullanarak bu listedeki her IP'nin kaç kez geçtiğini saydırın ve sonucu (Counter nesnesini) yazdırın.",
      "hint": "<code>from collections import Counter</code> ... <code>sayac = Counter(giris_loglari)</code>"
    },
    "default_code": "# Counter'ı burada import edin\n\n\ngiris_loglari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\"]\n\n# Counter ile listeyi saydırın ve sonucu yazdırın\n",
    "solution": "from collections import Counter\n\ngiris_loglari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\"]\n\nip_sayaci = Counter(giris_loglari)\n\nprint(ip_sayaci)"
  },
  {
    "id": "U7_T4_E5",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "Counter Metodu: most_common()",
    "difficulty": "Orta",
    "lesson_html": "<h1>Counter: .most_common()</h1><p><code>Counter</code> nesnesinin <code>.most_common(n)</code> metodu, en sık tekrar eden <code>n</code> elemanı ve tekrar sayılarını, en çoktan en aza doğru sıralanmış bir liste (demet listesi) olarak döndürür. Eğer <code>n</code> verilmezse, tüm elemanları sırayla döndürür.</p><pre><code>from collections import Counter\n\ndata = ['a', 'b', 'a', 'c', 'a', 'b']\nsayac = Counter(data)\n\n# En sık tekrar eden 2 eleman\nprint(sayac.most_common(2)) # Çıktı: [('a', 3), ('b', 2)]</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: En Çok Saldıran IP",
      "description": "<code>giris_loglari</code> listesi için bir <code>Counter</code> (<code>ip_sayaci</code>) oluşturun. Ardından <code>.most_common(1)</code> metodunu kullanarak en sık tekrar eden (yani en çok başarısız giriş yapan) <strong>ilk</strong> IP'yi ve sayısını bulun ve sonucu (<code>[('10.0.0.5', 3)]</code> gibi bir liste) yazdırın.",
      "hint": "<code>sayac = Counter(...)</code> ... <code>print(sayac.most_common(1))</code>"
    },
    "default_code": "from collections import Counter\n\ngiris_loglari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\"]\n\n# Counter oluşturun\n\n\n# En sık tekrar eden 1 elemanı bulun ve yazdırın\n",
    "solution": "from collections import Counter\n\ngiris_loglari = [\"10.0.0.5\", \"10.0.0.1\", \"10.0.0.5\", \"10.0.0.2\", \"10.0.0.5\"]\n\nip_sayaci = Counter(giris_loglari)\n\nen_cok_saldiran = ip_sayaci.most_common(1)\nprint(en_cok_saldiran)"
  },
  {
    "id": "U7_T4_E6",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "Counter ve String",
    "difficulty": "Orta",
    "lesson_html": "<h1>Counter ve String</h1><p><code>Counter</code>, bir string içindeki karakterlerin frekansını (kaç kez geçtiğini) bulmak için de kullanılabilir.</p><pre><code>from collections import Counter\n\nmetin = \"aabbccc\"\nharf_sayaci = Counter(metin)\nprint(harf_sayaci) # Çıktı: Counter({'c': 3, 'a': 2, 'b': 2})</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Parola Karakter Frekansı",
      "description": "<code>parola = \"Guvenlik123!\"</code> string'i verilmiştir. <code>Counter</code> kullanarak bu paroladaki her bir karakterin kaç kez geçtiğini saydırın ve sonucu yazdırın.",
      "hint": "<code>Counter(parola)</code>"
    },
    "default_code": "from collections import Counter\n\nparola = \"Guvenlik123!\"\n\n# Paroladaki karakter frekansını Counter ile bulun\n\n\n# Sonucu yazdırın\n",
    "solution": "from collections import Counter\n\nparola = \"Guvenlik123!\"\n\nkarakter_sayaci = Counter(parola)\n\nprint(karakter_sayaci)"
  },
  {
    "id": "U7_T4_E7",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "collections.deque (Temel)",
    "difficulty": "Orta",
    "lesson_html": "<h1>collections.deque (Çift Uçlu Kuyruk)</h1><p><code>deque</code> (deck okunur), listenin hem başından (solundan) hem de sonundan (sağından) hızlı (~O(1)) eleman ekleme ve çıkarma yapabilen bir veri yapısıdır. Normal listelerde baştan eleman ekleme/çıkarma yavaştır (~O(n)) çünkü tüm elemanların kaydırılması gerekir.</p><p><code>deque</code>, <code>collections</code> modülünden import edilir ve bir liste gibi oluşturulabilir.</p><pre><code>from collections import deque\n\nkuyruk = deque([1, 2, 3])\n\n# Sona ekle (liste gibi)\nkuyruk.append(4)\n\n# Başa ekle\nkuyruk.appendleft(0)\n\nprint(kuyruk) # Çıktı: deque([0, 1, 2, 3, 4])\n\n# Sondan çıkar (liste gibi)\nsondan = kuyruk.pop()\n\n# Baştan çıkar\nbastan = kuyruk.popleft()\n\nprint(f\"Baştan: {bastan}, Sondan: {sondan}\")\nprint(kuyruk) # Çıktı: deque([1, 2, 3])</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İşlem Kuyruğu",
      "description": "<code>collections</code>'dan <code>deque</code>'i import edin. <code>deque(['islem2', 'islem3'])</code> ile bir <code>islem_kuyrugu</code> oluşturun. <code>.appendleft('islem1')</code> ile başa 'islem1'i ekleyin. <code>.append('islem4')</code> ile sona 'islem4'ü ekleyin. Kuyruğun son halini yazdırın.",
      "hint": "<code>from collections import deque</code>"
    },
    "default_code": "# deque'i burada import edin\n\n\n# deque oluşturun\nislem_kuyrugu = None # Bu satırı değiştirin\n\n# Başa ve sona eleman ekleyin\n\n\n# Kuyruğu yazdırın\n",
    "solution": "from collections import deque\n\nislem_kuyrugu = deque(['islem2', 'islem3'])\n\nislem_kuyrugu.appendleft('islem1')\nislem_kuyrugu.append('islem4')\n\nprint(islem_kuyrugu)"
  },
  {
    "id": "U7_T4_E8",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "deque: popleft() ile FIFO",
    "difficulty": "Orta",
    "lesson_html": "<h1>deque: FIFO Kuyruğu</h1><p><code>deque</code>, <code>.append()</code> (sona ekle) ve <code>.popleft()</code> (baştan çıkar) metodları kullanılarak verimli bir FIFO (First-In, First-Out - İlk Giren İlk Çıkar) kuyruğu oluşturmak için idealdir. (Örn: İşlenecek görevler, ağ paketleri)</p><pre><code>from collections import deque\n\ngorevler = deque()\n\ngorevler.append(\"Görev 1\")\ngorevler.append(\"Görev 2\")\n\n# İlk eklenen görevi al ve işle\nilk_gorev = gorevler.popleft()\nprint(f\"İşlenen: {ilk_gorev}\") # İşlenen: Görev 1\nprint(f\"Kalan: {gorevler}\") # Kalan: deque(['Görev 2'])</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Log İşleme",
      "description": "<code>log_kuyrugu = deque(['Log A', 'Log B', 'Log C'])</code> verilmiştir. <code>.popleft()</code> kullanarak kuyruktan işlenecek ilk logu (<code>'Log A'</code>) alın ve <code>islenen_log</code> değişkenine atayın. Hem <code>islenen_log</code>'u hem de kuyruğun kalanını yazdırın.",
      "hint": "<code>islenen_log = log_kuyrugu.popleft()</code>"
    },
    "default_code": "from collections import deque\n\nlog_kuyrugu = deque(['Log A', 'Log B', 'Log C'])\n\n# Kuyruğun başından bir log alın\n\n\n# İşlenen logu ve kuyruğun kalanını yazdırın\n",
    "solution": "from collections import deque\n\nlog_kuyrugu = deque(['Log A', 'Log B', 'Log C'])\n\nislenen_log = log_kuyrugu.popleft()\n\nprint(f\"İşlenen: {islenen_log}\")\nprint(f\"Kalan: {log_kuyrugu}\")"
  },
  {
    "id": "U7_T4_E9",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "deque: Sabit Boyut (maxlen)",
    "difficulty": "Zor",
    "lesson_html": "<h1>deque: Sabit Boyut (maxlen)</h1><p><code>deque</code> oluşturulurken <code>maxlen</code> parametresi verilerek boyutu sabitlenebilir. Eğer <code>maxlen</code> boyutuna ulaşılmışken yeni bir eleman (örn: <code>append</code> ile) eklenirse, diğer uçtan otomatik olarak bir eleman çıkarılır.</p><p>Bu, 'son N elemanı' (örn: son 5 log kaydı) tutmak için çok kullanışlıdır.</p><pre><code>from collections import deque\n\n# Sadece son 3 elemanı tutacak deque\nson_loglar = deque(maxlen=3)\n\nson_loglar.append(\"Log 1\")\nson_loglar.append(\"Log 2\")\nson_loglar.append(\"Log 3\")\nprint(son_loglar) # deque(['Log 1', 'Log 2', 'Log 3'], maxlen=3)\n\n# Yeni log eklenince en eski (Log 1) otomatik silinir\nson_loglar.append(\"Log 4\")\nprint(son_loglar) # deque(['Log 2', 'Log 3', 'Log 4'], maxlen=3)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Son 2 Komut",
      "description": "<code>maxlen=2</code> olacak şekilde <code>son_komutlar</code> adında bir <code>deque</code> oluşturun. <code>.append()</code> kullanarak sırasıyla <code>\"ls\"</code>, <code>\"cd /tmp\"</code> ve <code>\"pwd\"</code> komutlarını ekleyin. Her eklemeden sonra <code>deque</code>'in içeriğini yazdırarak sadece son 2 komutun nasıl tutulduğunu gözlemleyin.",
      "hint": "<code>son_komutlar = deque(maxlen=2)</code>"
    },
    "default_code": "from collections import deque\n\n# maxlen=2 olan deque'i burada oluşturun\n\n\n# Komutları sırayla ekleyin ve her adımdan sonra deque'i yazdırın\n\n",
    "solution": "from collections import deque\n\nson_komutlar = deque(maxlen=2)\nprint(f\"Başlangıç: {son_komutlar}\")\n\nson_komutlar.append(\"ls\")\nprint(f\"'ls' eklendi: {son_komutlar}\")\n\nson_komutlar.append(\"cd /tmp\")\nprint(f\"'cd /tmp' eklendi: {son_komutlar}\")\n\nson_komutlar.append(\"pwd\")\nprint(f\"'pwd' eklendi: {son_komutlar}\")"
  },
  {
    "id": "U7_T4_E10",
    "unit_id": 7,
    "topic_id": 4,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "collections Modülü",
    "title": "deque: Döndürme (rotate)",
    "difficulty": "Zor",
    "lesson_html": "<h1>deque: Döndürme (rotate)</h1><p><code>deque</code> nesnesinin <code>.rotate(n)</code> metodu, elemanları <code>n</code> adım sağa döndürür. Eğer <code>n</code> negatifse sola döndürür. Sağdan çıkanlar sola, soldan çıkanlar sağa eklenir.</p><pre><code>from collections import deque\n\nd = deque([1, 2, 3, 4])\n\nd.rotate(1) # 1 adım sağa\nprint(d) # deque([4, 1, 2, 3])\n\nd.rotate(-2) # 2 adım sola\nprint(d) # deque([2, 3, 4, 1])</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Alfabeyi Döndür",
      "description": "<code>harfler = deque(['A', 'B', 'C'])</code> verilmiştir. <code>.rotate(1)</code> metodunu kullanarak deque'i 1 adım sağa döndürün (Sonuç <code>deque(['C', 'A', 'B'])</code> olmalı) ve yazdırın.",
      "hint": "<code>harfler.rotate(1)</code>"
    },
    "default_code": "from collections import deque\n\nharfler = deque(['A', 'B', 'C'])\n\n# deque'i 1 adım sağa döndürün\n\n\n# Sonucu yazdırın\n",
    "solution": "from collections import deque\n\nharfler = deque(['A', 'B', 'C'])\n\nharfler.rotate(1)\n\nprint(harfler)"
  },
  {
    "id": "U7_T5_E1",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "'requests' Kütüphanesini İçeri Aktarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>'requests' Kütüphanesi</h1><p><code>requests</code> kütüphanesi, Python'da HTTP istekleri yapmayı son derece kolaylaştıran popüler bir harici kütüphanedir. Web API'leriyle etkileşim kurmak, web sayfalarını indirmek gibi işler için kullanılır.</p><p>Kullanmak için (normalde <code>pip install requests</code> ile kurulur) önce <code>import requests</code> yazmanız gerekir. (Pyodide ortamında genellikle önceden yüklenmiştir).</p><pre><code>import requests\n\n# Artık requests.get(), requests.post() gibi fonksiyonları kullanabiliriz.</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'requests' İçeri Aktar",
      "description": "<code>requests</code> kütüphanesini kodunuza <code>import</code> edin.",
      "hint": "<code>import requests</code>"
    },
    "default_code": "# requests kütüphanesini burada içeri aktarın\n\nprint(\"requests modülü içeri aktarıldı (veya Pyodide'da hazır).\")",
    "solution": "import requests\n\nprint(\"requests modülü içeri aktarıldı (veya Pyodide'da hazır).\")"
  },
  {
    "id": "U7_T5_E2",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "GET İsteği Yapma (requests.get)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>GET İsteği: requests.get()</h1><p>Web'den veri almanın en yaygın yolu HTTP GET isteğidir. <code>requests.get(url)</code> fonksiyonu, belirtilen URL'e bir GET isteği gönderir ve sunucudan gelen yanıtı bir 'Response' nesnesi olarak döndürür.</p><p>(Not: Pyodide ortamında dış ağ istekleri kısıtlı olabilir veya farklı çalışabilir. Güvenilir siteler veya test API'leri kullanacağız.)</p><pre><code>import requests\n\n# JSONPlaceholder - Test için sahte bir API\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\n\ntry:\n    yanit = requests.get(url)\n    print(yanit) # <Response [200]> gibi bir çıktı verir\nexcept Exception as e:\n    print(f\"İstek sırasında hata: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: API'ye GET İsteği",
      "description": "<code>requests</code> kütüphanesini kullanarak <code>\"https://httpbin.org/get\"</code> URL'ine (istek detaylarını JSON olarak döndüren bir test servisi) bir GET isteği yapın. Dönen 'Response' nesnesini <code>yanit</code> değişkenine atayın ve yazdırın.",
      "hint": "<code>yanit = requests.get(\"https://httpbin.org/get\")</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/get\"\n\n# GET isteğini burada yapın\nyanit = None # Bu satırı değiştirin\n\n# Yanıt nesnesini yazdırın\nprint(yanit)",
    "solution": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    print(yanit)\nexcept Exception as e:\n    # Pyodide'da ağ hatası olabilir, bunu yakala\n    print(f\"Hata: {e}. Pyodide ağ kısıtlaması olabilir.\")"
  },
  {
    "id": "U7_T5_E3",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Yanıt Durum Kodu (status_code)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Yanıt Durum Kodu: .status_code</h1><p>Bir HTTP isteğinin başarılı olup olmadığını anlamanın ilk yolu, dönen yanıtın 'durum koduna' (status code) bakmaktır. 'Response' nesnesinin <code>.status_code</code> niteliği bu kodu (bir tamsayı) içerir.</p><p>Yaygın Kodlar:</p><ul><li><code>200</code>: OK (Başarılı)</li><li><code>404</code>: Not Found (Bulunamadı)</li><li><code>403</code>: Forbidden (Yasaklı)</li><li><code>500</code>: Internal Server Error (Sunucu Hatası)</li></ul><pre><code>import requests\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nyanit = requests.get(url)\nprint(yanit.status_code) # Başarılıysa 200 yazar</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Durum Kodunu Kontrol Et",
      "description": "<code>https://httpbin.org/get</code> adresine bir GET isteği yapın. Dönen <code>yanit</code> nesnesinin <code>.status_code</code> niteliğini yazdırın.",
      "hint": "<code>yanit = requests.get(...)</code> ... <code>print(yanit.status_code)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    # Yanıtın durum kodunu burada yazdırın\n    \nexcept Exception as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    print(yanit.status_code)\nexcept Exception as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E4",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Başarılı İstek Kontrolü (if status_code)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Başarılı İstek Kontrolü</h1><p>Genellikle bir istekten sonra, işlem yapmadan önce durum kodunun <code>200</code> (başarılı) olup olmadığını kontrol ederiz.</p><pre><code>import requests\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nyanit = requests.get(url)\n\nif yanit.status_code == 200:\n    print(\"İstek başarılı!\")\nelse:\n    print(f\"Hata kodu: {yanit.status_code}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Google Erişimi",
      "description": "<code>https://www.google.com</code> adresine bir GET isteği yapın. <code>if</code> bloğu kullanarak, dönen yanıtın <code>status_code</code>'u <code>200</code> ise <code>\"Google'a erişildi\"</code>, değilse <code>\"Erişimde sorun var\"</code> yazdırın. (Google bazen bot isteklerini engelleyebilir, farklı bir kod dönebilir).",
      "hint": "<code>if yanit.status_code == 200: ... else: ...</code>"
    },
    "default_code": "import requests\n\nurl = \"https://www.google.com\"\n\ntry:\n    # Not: Google Pyodide'dan gelen isteği engelleyebilir.\n    yanit = requests.get(url, timeout=5) # Zaman aşımı ekleyelim\n    # Durum kodunu kontrol edin\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"İstek hatası: {e}\")\nexcept Exception as e:\n    print(f\"Genel Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://www.google.com\"\n\ntry:\n    yanit = requests.get(url, timeout=5)\n    if yanit.status_code == 200:\n        print(\"Google'a erişildi\")\n    else:\n        print(f\"Erişimde sorun var, durum kodu: {yanit.status_code}\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"İstek hatası: {e}\")\nexcept Exception as e:\n    print(f\"Genel Hata: {e}\")"
  },
  {
    "id": "U7_T5_E5",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Yanıt İçeriği (Metin - .text)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Yanıt İçeriği (Metin): .text</h1><p>Başarılı bir istekten sonra (genellikle <code>status_code == 200</code>), sunucudan dönen yanıtın içeriğini (HTML, JSON, XML vb.) almak isteriz.</p><p><code>.text</code> niteliği, yanıtın içeriğini bir *string* olarak döndürür.</p><pre><code>import requests\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nyanit = requests.get(url)\n\nif yanit.status_code == 200:\n    # İçeriği string olarak al\n    icerik_str = yanit.text\n    print(icerik_str)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: API Yanıtını Metin Olarak Al",
      "description": "<code>https://httpbin.org/get</code> adresine bir GET isteği yapın. Eğer istek başarılıysa (<code>status_code == 200</code>), yanıtın <code>.text</code> niteliğini yazdırın.",
      "hint": "<code>if yanit.status_code == 200: ... print(yanit.text)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    # Başarılıysa içeriği (.text) yazdırın\n\nexcept Exception as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    if yanit.status_code == 200:\n        print(yanit.text)\n    else:\n        print(f\"Hata kodu: {yanit.status_code}\")\nexcept Exception as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E6",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Yanıt İçeriği (JSON - .json())",
    "difficulty": "Orta",
    "lesson_html": "<h1>Yanıt İçeriği (JSON): .json()</h1><p>Eğer API yanıtının JSON formatında olduğunu biliyorsanız, <code>.text</code> ile string olarak alıp sonra <code>json.loads()</code> yapmak yerine, doğrudan <code>.json()</code> metodunu kullanabilirsiniz.</p><p><code>.json()</code> metodu, JSON yanıtını otomatik olarak parse eder ve bir Python sözlüğü veya listesi döndürür.</p><pre><code>import requests\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nyanit = requests.get(url)\n\nif yanit.status_code == 200:\n    try:\n        # JSON yanıtını Python sözlüğüne çevir\n        veri = yanit.json()\n        print(veri)\n        print(type(veri)) # <class 'dict'>\n        print(veri['title']) # Sözlük gibi eriş\n    except requests.exceptions.JSONDecodeError:\n        print(\"Yanıt JSON formatında değil!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: API Yanıtını JSON Olarak İşle",
      "description": "<code>https://jsonplaceholder.typicode.com/users/1</code> adresine (tek bir kullanıcı bilgisi döndürür) GET isteği yapın. Başarılıysa, yanıtı <code>.json()</code> metoduyla Python sözlüğüne çevirin (<code>kullanici_bilgisi</code>). Bu sözlükten kullanıcının <code>'name'</code> ve <code>'email'</code> değerlerini yazdırın.",
      "hint": "<code>veri = yanit.json()</code> ... <code>print(veri['name'])</code>"
    },
    "default_code": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/users/1\"\n\ntry:\n    yanit = requests.get(url)\n    if yanit.status_code == 200:\n        # Yanıtı .json() ile alın\n        kullanici_bilgisi = None # Bu satırı değiştirin\n        \n        # 'name' ve 'email' değerlerini yazdırın\n        pass # Bu pass'ı silin\n    else:\n        print(f\"Hata kodu: {yanit.status_code}\")\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"İstek hatası: {e}\")\nexcept requests.exceptions.JSONDecodeError:\n    print(\"JSON parse hatası\")",
    "solution": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/users/1\"\n\ntry:\n    yanit = requests.get(url)\n    if yanit.status_code == 200:\n        kullanici_bilgisi = yanit.json()\n        print(f\"İsim: {kullanici_bilgisi['name']}\")\n        print(f\"Email: {kullanici_bilgisi['email']}\")\n    else:\n        print(f\"Hata kodu: {yanit.status_code}\")\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"İstek hatası: {e}\")\nexcept requests.exceptions.JSONDecodeError:\n    print(\"JSON parse hatası\")"
  },
  {
    "id": "U7_T5_E7",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Yanıt Başlıkları (Headers)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Yanıt Başlıkları: .headers</h1><p>HTTP yanıtları, içerikten (body) önce 'başlıklar' (headers) adı verilen metadata bilgileri içerir. Bunlar sunucu türü (<code>Server</code>), içeriğin tipi (<code>Content-Type</code>), tarih gibi bilgileri barındırır.</p><p><code>.headers</code> niteliği, bu başlıklara erişmenizi sağlayan *özel bir sözlük benzeri* nesnedir (büyük/küçük harfe duyarsız anahtarlar).</p><pre><code>import requests\nurl = \"https://www.google.com\"\nyanit = requests.get(url)\n\nprint(yanit.headers)\n\n# Belirli bir başlığı al (varsa)\ncontent_type = yanit.headers.get('Content-Type')\nprint(f\"İçerik Tipi: {content_type}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: İçerik Tipini Öğren",
      "description": "<code>https://httpbin.org/get</code> adresine GET isteği yapın. Başarılıysa, yanıtın <code>.headers</code> niteliğinden <code>'Content-Type'</code> başlığını (<code>.get()</code> ile güvenli olarak) alın ve yazdırın. (Genellikle <code>application/json</code> olmalı).",
      "hint": "<code>content_type = yanit.headers.get('Content-Type')</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    if yanit.status_code == 200:\n        # 'Content-Type' başlığını alın ve yazdırın\n        pass\n    else:\n        print(f\"Hata: {yanit.status_code}\")\nexcept Exception as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://httpbin.org/get\"\n\ntry:\n    yanit = requests.get(url)\n    if yanit.status_code == 200:\n        content_type = yanit.headers.get('Content-Type')\n        print(f\"Content-Type: {content_type}\")\n    else:\n        print(f\"Hata: {yanit.status_code}\")\nexcept Exception as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E8",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "URL Parametreleri (params)",
    "difficulty": "Orta",
    "lesson_html": "<h1>URL Parametreleri (Query Parameters)</h1><p>Bazı API'ler veya web sayfaları, URL'in sonuna eklenen <code>?anahtar1=deger1&anahtar2=deger2</code> gibi parametrelerle (query parameters) filtreleme veya özel bilgi ister.</p><p><code>requests.get()</code> fonksiyonuna bu parametreleri manuel olarak URL'e eklemek yerine, bir sözlük olarak <code>params</code> argümanıyla verebiliriz. <code>requests</code> kütüphanesi URL'i bizim için doğru şekilde oluşturur.</p><pre><code>import requests\n\nurl = \"https://httpbin.org/get\" # Ana URL\nparametreler = {\"kullanici_id\": \"123\", \"limit\": 10}\n\n# requests, URL'i \"https://httpbin.org/get?kullanici_id=123&limit=10\" yapar\nyanit = requests.get(url, params=parametreler)\n\nprint(yanit.url) # Oluşturulan tam URL'i gösterir\nprint(yanit.json()['args']) # Gönderilen parametreleri gösterir</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Arama Yap",
      "description": "<code>https://jsonplaceholder.typicode.com/posts</code> adresine (tüm postları listeler) bir GET isteği yapın. Ancak sadece <code>userId</code>'si <code>1</code> olan postları almak için <code>params</code> argümanına <code>{\"userId\": 1}</code> sözlüğünü gönderin. Dönen yanıtın <code>.json()</code> içeriğini yazdırın (sadece userId=1 olan postlar gelmeli).",
      "hint": "<code>payload = {\"userId\": 1}</code> ... <code>requests.get(url, params=payload)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\n# Parametreler sözlüğünü oluşturun\nparametreler = None # Bu satırı değiştirin\n\ntry:\n    # GET isteğini 'params' argümanıyla yapın\n    yanit = requests.get(url, params=parametreler)\n    yanit.raise_for_status() # Hata kodu varsa exception fırlatır\n    \n    # Dönen JSON verisini yazdırın\n    veri = yanit.json()\n    print(veri)\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\nparametreler = {\"userId\": 1}\n\ntry:\n    yanit = requests.get(url, params=parametreler)\n    yanit.raise_for_status()\n    \n    veri = yanit.json()\n    # Sadece ilk postu yazdıralım, çok uzun olmasın\n    if veri:\n      print(veri[0]) \n    else:\n      print(\"Veri bulunamadı\")\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E9",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "POST İsteği (requests.post - Temel)",
    "difficulty": "Zor",
    "lesson_html": "<h1>POST İsteği: requests.post()</h1><p>Sunucuya yeni veri göndermek (örn: form doldurmak, yeni kullanıcı oluşturmak) için genellikle HTTP POST isteği kullanılır.</p><p><code>requests.post(url, data=veri_sozlugu)</code> fonksiyonu kullanılır. Gönderilecek veri genellikle <code>data</code> parametresine bir sözlük olarak verilir (form verisi gibi).</p><pre><code>import requests\n\nurl = \"https://httpbin.org/post\" # Gönderilen veriyi geri yansıtır\nveri = {\"kullanici\": \"test\", \"sifre\": \"1234\"}\n\ntry:\n    yanit = requests.post(url, data=veri)\n    yanit.raise_for_status()\n    \n    # Sunucunun veriyi nasıl aldığını gör\n    print(yanit.json()['form'])\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Veri Gönder",
      "description": "<code>https://jsonplaceholder.typicode.com/posts</code> adresine yeni bir 'post' oluşturmak için POST isteği yapın. <code>data</code> parametresine <code>{'title': 'Yeni Başlık', 'body': 'İçerik', 'userId': 1}</code> sözlüğünü gönderin. Başarılı yanıtın (genellikle 201 Created döner) <code>.json()</code> içeriğini (oluşturulan postun ID'sini içerir) yazdırın.",
      "hint": "<code>payload = {...}</code> ... <code>yanit = requests.post(url, data=payload)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\n# Gönderilecek veriyi (sözlük) oluşturun\nyeni_post = None # Bu satırı değiştirin\n\ntry:\n    # POST isteğini 'data' argümanıyla yapın\n    yanit = requests.post(url, data=yeni_post)\n    yanit.raise_for_status()\n    \n    # Dönen JSON yanıtını (oluşturulan post) yazdırın\n    print(yanit.json())\n    print(f\"Durum Kodu: {yanit.status_code}\") # Genellikle 201 olmalı\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\nyeni_post = {'title': 'Yeni Başlık', 'body': 'İçerik', 'userId': 1}\n\ntry:\n    yanit = requests.post(url, data=yeni_post)\n    yanit.raise_for_status()\n    \n    print(yanit.json())\n    print(f\"Durum Kodu: {yanit.status_code}\")\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E10",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "JSON Verisi Gönderme (json)",
    "difficulty": "Zor",
    "lesson_html": "<h1>JSON Verisi Gönderme (json=)</h1><p>Eğer POST isteği ile form verisi (<code>data=</code>) yerine doğrudan JSON verisi göndermek istiyorsanız (API'ler bunu sıkça ister), <code>data=</code> yerine <code>json=</code> parametresini kullanırsınız.</p><p><code>requests</code> kütüphanesi, verdiğiniz Python sözlüğünü otomatik olarak JSON string'ine çevirir ve doğru <code>Content-Type: application/json</code> başlığını ekler.</p><pre><code>import requests\n\nurl = \"https://httpbin.org/post\"\nveri = {\"kullanici\": \"test\", \"aktif\": True, \"roller\": [\"admin\", \"dev\"]}\n\ntry:\n    # Veriyi Python sözlüğü olarak 'json' parametresiyle gönder\n    yanit = requests.post(url, json=veri)\n    yanit.raise_for_status()\n    \n    # Sunucunun aldığı JSON verisini gör\n    print(yanit.json()['json'])\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: JSON ile Post Oluştur",
      "description": "Bir önceki alıştırmadaki gibi <code>https://jsonplaceholder.typicode.com/posts</code> adresine POST isteği yapın. Ancak bu kez <code>yeni_post</code> sözlüğünü <code>data=</code> yerine <code>json=</code> parametresi ile gönderin. Dönen yanıtı yazdırın.",
      "hint": "<code>yanit = requests.post(url, json=yeni_post)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\nyeni_post = {'title': 'JSON Başlık', 'body': 'JSON İçerik', 'userId': 2}\n\ntry:\n    # POST isteğini 'json' argümanıyla yapın\n    yanit = None # Bu satırı değiştirin\n    yanit.raise_for_status()\n    \n    print(yanit.json())\n    print(f\"Durum Kodu: {yanit.status_code}\")\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\n\nyeni_post = {'title': 'JSON Başlık', 'body': 'JSON İçerik', 'userId': 2}\n\ntry:\n    yanit = requests.post(url, json=yeni_post)\n    yanit.raise_for_status()\n    \n    print(yanit.json())\n    print(f\"Durum Kodu: {yanit.status_code}\")\n    \nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E11",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Özel Başlık Gönderme (headers)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Özel Başlık Gönderme (headers=)</h1><p>API'ler bazen kimlik doğrulama (Authentication token), içerik tipi belirtme (Content-Type) veya özel ayarlar için HTTP başlıkları (headers) göndermenizi gerektirir.</p><p><code>requests</code> fonksiyonlarına (get, post vb.) <code>headers=</code> parametresi ile bir sözlük göndererek özel başlıklar ekleyebilirsiniz.</p><pre><code>import requests\n\nurl = \"https://httpbin.org/headers\" # Gönderilen başlıkları yansıtır\n\n# Gönderilecek özel başlıklar\nbasliklar = {\n    'User-Agent': 'BenimTarayici/1.0',\n    'X-Api-Key': 'GIZLI_ANAHTAR_123'\n}\n\ntry:\n    yanit = requests.get(url, headers=basliklar)\n    yanit.raise_for_status()\n    \n    # Sunucunun aldığı başlıkları gör\n    print(yanit.json()['headers'])\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: User-Agent Ayarla",
      "description": "<code>https://httpbin.org/user-agent</code> adresine (sadece User-Agent başlığını yansıtır) GET isteği yapın. <code>headers=</code> parametresi ile <code>{'User-Agent': 'CyberSecTool/0.1'}</code> başlığını gönderin. Başarılı yanıttaki <code>.json()</code> içeriğini yazdırın.",
      "hint": "<code>hdrs = {'User-Agent': ...}</code> ... <code>requests.get(url, headers=hdrs)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/user-agent\"\n\n# Özel başlık sözlüğünü oluşturun\ncustom_headers = None # Bu satırı değiştirin\n\ntry:\n    # İsteği 'headers' parametresiyle yapın\n    yanit = requests.get(url, headers=custom_headers)\n    yanit.raise_for_status()\n    \n    # Dönen JSON yanıtını yazdırın\n    print(yanit.json())\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")",
    "solution": "import requests\n\nurl = \"https://httpbin.org/user-agent\"\n\ncustom_headers = {'User-Agent': 'CyberSecTool/0.1'}\n\ntry:\n    yanit = requests.get(url, headers=custom_headers)\n    yanit.raise_for_status()\n    \n    print(yanit.json())\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E12",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Hata Durum Kodu Kontrolü (raise_for_status)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Hata Kontrolü: .raise_for_status()</h1><p>Yanıt aldıktan sonra <code>if yanit.status_code != 200:</code> gibi kontroller yapmak yerine, <code>requests</code>'in <code>.raise_for_status()</code> metodunu kullanabilirsiniz.</p><p>Bu metod, eğer durum kodu bir HTTP hatasıysa (4xx veya 5xx), otomatik olarak bir <code>requests.exceptions.HTTPError</code> hatası fırlatır. Başarılıysa (2xx) hiçbir şey yapmaz. Bu, <code>try/except</code> ile birlikte kullanıldığında kodu temizler.</p><pre><code>import requests\n\nurl = \"https://httpbin.org/status/404\" # 404 hatası döndürecek\n\ntry:\n    yanit = requests.get(url)\n    yanit.raise_for_status() # Burada HTTPError fırlatılacak\n    print(\"Başarılı (olmamalı)\")\nexcept requests.exceptions.HTTPError as e:\n    print(f\"HTTP Hatası: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 404 Hatasını Yakala",
      "description": "Var olmayan bir sayfa olan <code>\"https://jsonplaceholder.typicode.com/posts/9999\"</code> adresine GET isteği yapın. Dönen <code>yanit</code> nesnesi üzerinde <code>.raise_for_status()</code> metodunu çağırın. Bu işlem <code>HTTPError</code> fırlatacağı için, tüm isteği bir <code>try/except requests.exceptions.HTTPError as e:</code> bloğu içine alın ve hata mesajını (<code>e</code>) yazdırın.",
      "hint": "<code>try: ... yanit.raise_for_status() ... except requests.exceptions.HTTPError as e: ... print(e)</code>"
    },
    "default_code": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts/9999\"\n\n# try/except HTTPError bloğunu buraya yazın\ntry:\n  pass # Bu pass'ı silin\nexcept:\n  pass # Bu pass'ı silin",
    "solution": "import requests\n\nurl = \"https://jsonplaceholder.typicode.com/posts/9999\"\n\ntry:\n    yanit = requests.get(url)\n    print(f\"Durum Kodu: {yanit.status_code}\") # 404 olmalı\n    yanit.raise_for_status() # Hata burada fırlatılacak\n    print(\"Veri alındı (alınmamalı)\")\nexcept requests.exceptions.HTTPError as e:\n    print(f\"HTTP Hatası Yakalandı: {e}\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"İstek Hatası: {e}\")"
  },
  {
    "id": "U7_T5_E13",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Zaman Aşımı (timeout)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Zaman Aşımı (timeout=)</h1><p>Bir web sunucusu yanıt vermediğinde programınızın sonsuza kadar beklemesini önlemek için isteklere bir 'zaman aşımı' (timeout) süresi (saniye cinsinden) eklemek çok önemlidir.</p><p>Eğer sunucu belirtilen sürede yanıt vermezse, <code>requests.exceptions.Timeout</code> hatası fırlatılır.</p><pre><code>import requests\n\n# Çok yavaş yanıt veren veya vermeyen bir URL (örnek)\nurl = \"https://httpbin.org/delay/10\" # 10 saniye bekler\n\ntry:\n    # En fazla 5 saniye bekle\n    yanit = requests.get(url, timeout=5)\n    print(\"Yanıt alındı\")\nexcept requests.exceptions.Timeout:\n    print(\"Hata: İstek zaman aşımına uğradı!\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"Diğer istek hatası: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hızlı Timeout",
      "description": "<code>https://httpbin.org/delay/3</code> adresine (3 saniye bekleyip yanıt verir) GET isteği yapın, ancak <code>timeout=1</code> (sadece 1 saniye bekle) parametresini ayarlayın. Bu durumda <code>Timeout</code> hatası almanız gerekir. İsteği <code>try/except requests.exceptions.Timeout:</code> bloğu içine alarak bu hatayı yakalayın ve <code>\"Zaman aşımı!\"</code> yazdırın.",
      "hint": "<code>requests.get(url, timeout=1)</code> ... <code>except requests.exceptions.Timeout: ...</code>"
    },
    "default_code": "import requests\n\nurl = \"https://httpbin.org/delay/3\"\n\n# try/except Timeout bloğunu buraya yazın\ntry:\n    pass\nexcept:\n    pass",
    "solution": "import requests\n\nurl = \"https://httpbin.org/delay/3\"\n\ntry:\n    print(\"İstek gönderiliyor (max 1sn bekleyecek)...\")\n    yanit = requests.get(url, timeout=1)\n    print(\"Yanıt alındı (alınmamalı)\")\nexcept requests.exceptions.Timeout:\n    print(\"Zaman aşımı!\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"Diğer hata: {e}\")"
  },
  {
    "id": "U7_T5_E14",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Session Nesnesi",
    "difficulty": "Zor",
    "lesson_html": "<h1>Session Nesnesi</h1><p>Eğer aynı sunucuya birden fazla istek yapacaksanız (örn: önce login olup sonra veri çekmek), her seferinde <code>requests.get()</code>, <code>requests.post()</code> çağırmak yerine bir <code>requests.Session()</code> nesnesi oluşturmak daha verimlidir.</p><p>Session nesnesi, TCP bağlantısını açık tutabilir (performansı artırır) ve çerezleri (cookies) istekler arasında otomatik olarak saklar (login durumunu korur).</p><pre><code>import requests\n\n# Session nesnesi oluştur\nwith requests.Session() as s:\n    # İlk istek (belki login)\n    # s.post('https://example.com/login', data=...)\n    \n    # İkinci istek (aynı session üzerinden)\n    yanit = s.get('https://example.com/data')\n    print(yanit.text)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Session ile GET",
      "description": "<code>requests.Session()</code> kullanarak <code>s</code> adında bir session nesnesi oluşturun (<code>with</code> bloğu kullanın). Bu <code>s</code> nesnesinin <code>.get()</code> metodunu kullanarak <code>\"https://httpbin.org/cookies/set?mycookie=123\"</code> adresine (çerez ayarlar) istek yapın. Ardından, yine aynı <code>s</code> nesnesiyle <code>\"https://httpbin.org/cookies\"</code> adresine (çerezleri gösterir) istek yapın ve dönen yanıtın <code>.json()</code> içeriğini yazdırın (içinde 'mycookie' görünmeli).",
      "hint": "<code>with requests.Session() as s: ... s.get(...) ... yanit2 = s.get(...) ... print(yanit2.json())</code>"
    },
    "default_code": "import requests\n\nurl_set_cookie = \"https://httpbin.org/cookies/set?mycookie=123\"\nurl_get_cookies = \"https://httpbin.org/cookies\"\n\n# 'with requests.Session()' bloğunu buraya yazın\n\n",
    "solution": "import requests\n\nurl_set_cookie = \"https://httpbin.org/cookies/set?mycookie=123\"\nurl_get_cookies = \"https://httpbin.org/cookies\"\n\ntry:\n    with requests.Session() as s:\n        print(\"Çerez ayarlanıyor...\")\n        s.get(url_set_cookie) # Çerezi ayarla\n        \n        print(\"\\nÇerezler kontrol ediliyor...\")\n        yanit = s.get(url_get_cookies) # Çerezleri kontrol et\n        yanit.raise_for_status()\n        print(yanit.json())\nexcept requests.exceptions.RequestException as e:\n    print(f\"Hata: {e}\")"
  },
  {
    "id": "U7_T5_E15",
    "unit_id": 7,
    "topic_id": 5,
    "unit_name": "Standart Kütüphane ve Uygulamalar",
    "topic_name": "requests ile API İşlemleri",
    "title": "Özet ve Siber Güvenlik Uygulamaları",
    "difficulty": "Orta",
    "lesson_html": "<h1>Özet ve Siber Güvenlik Uygulamaları</h1><p><code>requests</code> kütüphanesi ile:</p><ul><li><code>.get()</code>: Web sayfalarını veya API verilerini çekebiliriz.</li><li><code>.post()</code>: Web formlarını gönderebilir, API'lere veri yazabiliriz.</li><li><code>params=</code>: URL parametreleri ile sorguları filtreleyebiliriz.</li><li><code>data=</code>/<code>json=</code>: Sunucuya veri gönderebiliriz.</li><li><code>headers=</code>: Kimlik doğrulama veya özel bilgiler için başlık ekleyebiliriz.</li><li><code>.status_code</code>, <code>.text</code>, <code>.json()</code>, <code>.headers</code>: Yanıtı analiz edebiliriz.</li><li><code>.raise_for_status()</code>, <code>timeout=</code>, <code>try/except</code>: Hataları yönetebiliriz.</li><li><code>Session()</code>: Performansı artırıp durumu (çerezler) koruyabiliriz.</li></ul><p>Siber güvenlikte: Otomatik zafiyet tarama araçları, API entegrasyonları (VirusTotal, Shodan), kimlik avı (phishing) analizi, log gönderimi/alımı gibi birçok alanda kullanılır.</p>",
    "challenge": {
      "title": "Meydan Okuma: Kavram Tekrarı",
      "description": "Bir web API'sinden JSON formatında veri almak için genellikle <code>requests.get()</code>'ten sonra hangi yanıt nesnesi metodu kullanılır? Cevabınızı bir yorum satırı olarak yazın.",
      "hint": "JSON'ı otomatik parse eden metod hangisiydi?"
    },
    "default_code": "# API'den JSON almak için kullanılan yaygın metod:\n",
    "solution": "# API'den JSON almak için kullanılan yaygın metod:\n# .json()"
  },
  {
    "id": "U8_T1_E1",
    "unit_id": 8,
    "topic_id": 1,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Veri Kodlama: base64",
    "title": "'base64' Modülü ve Encoding",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Base64 Kodlama</h1><p>Base64, ikili (binary) veriyi, yalnızca 64 farklı ASCII karakteri (A-Z, a-z, 0-9, +, /) ve dolgu için '=' kullanarak metin formatına dönüştüren bir kodlama şemasıdır. Şifreleme değildir, sadece veriyi temsil etme biçimidir; kolayca geri çözülebilir.</p><p>Python'un standart <code>base64</code> modülü bu işlemi yapmak için fonksiyonlar sunar. <code>base64.b64encode()</code> fonksiyonu, *byte* dizisini base64 formatına kodlar.</p><p><strong>Önemli:</strong> Base64 fonksiyonları metin (string) değil, <strong>byte</strong> dizileri üzerinde çalışır.</p><pre><code>import base64\n\n# Önce veriyi byte'a çevirmeliyiz (örnek)\nveri_bytes = b'Merhaba'\n\n# Byte dizisini base64'e kodla\nkodlanmis_bytes = base64.b64encode(veri_bytes)\n\nprint(kodlanmis_bytes) # Çıktı: b'TWVyaGFiYQ=='</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bytes Kodla",
      "description": "<code>base64</code> modülünü import edin. <code>b'admin'</code> byte dizisini <code>base64.b64encode()</code> fonksiyonu kullanarak base64 formatına kodlayın ve sonucu (byte dizisi olarak) yazdırın.",
      "hint": "<code>import base64</code> ... <code>kodlanmis = base64.b64encode(b'admin')</code>"
    },
    "default_code": "# base64 modülünü import edin\n\n\nveri = b'admin'\n\n# Veriyi base64 ile kodlayın ve yazdırın\n",
    "solution": "import base64\n\nveri = b'admin'\n\nkodlanmis = base64.b64encode(veri)\nprint(kodlanmis)"
  },
  {
    "id": "U8_T1_E2",
    "unit_id": 8,
    "topic_id": 1,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Veri Kodlama: base64",
    "title": "String -> Bytes -> Base64",
    "difficulty": "Orta",
    "lesson_html": "<h1>String'i Base64'e Kodlama</h1><p>Normal bir Python string'ini base64'e kodlamak için önce onu <code>.encode(encoding='utf-8')</code> metoduyla byte dizisine çevirmemiz gerekir. Genellikle <code>'utf-8'</code> kodlaması kullanılır.</p><p>Kodlama sonucu dönen byte dizisini (<code>b'...'</code>) okunabilir bir string olarak görmek isterseniz, onu da <code>.decode('utf-8')</code> ile string'e çevirebilirsiniz.</p><pre><code>import base64\n\nmesaj_str = \"Gizli Bilgi\"\n\n# 1. String'i byte'a çevir\nmesaj_bytes = mesaj_str.encode('utf-8')\n\n# 2. Byte'ları base64'e kodla\nkodlanmis_bytes = base64.b64encode(mesaj_bytes)\n\n# 3. Sonucu okunabilir string'e çevir (opsiyonel)\nkodlanmis_str = kodlanmis_bytes.decode('utf-8')\n\nprint(kodlanmis_str) # Çıktı: R2l6bGkgQmlsZ2k=</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adını Kodla",
      "description": "<code>kullanici = \"root\"</code> string'ini önce <code>.encode('utf-8')</code> ile byte'a çevirin, ardından <code>base64.b64encode()</code> ile kodlayın. Son olarak kodlanmış byte dizisini <code>.decode('utf-8')</code> ile okunabilir bir string'e çevirip yazdırın.",
      "hint": "3 adım: encode -> b64encode -> decode"
    },
    "default_code": "import base64\n\nkullanici = \"root\"\n\n# String'i base64 string'ine kodlayın\nkodlanmis_kullanici = None # Bu satırı değiştirin\n\n\nprint(kodlanmis_kullanici)",
    "solution": "import base64\n\nkullanici = \"root\"\n\n# Adım 1: String -> Bytes\nbyte_kullanici = kullanici.encode('utf-8')\n\n# Adım 2: Bytes -> Base64 Bytes\nkodlanmis_bytes = base64.b64encode(byte_kullanici)\n\n# Adım 3: Base64 Bytes -> String\nkodlanmis_kullanici = kodlanmis_bytes.decode('utf-8')\n\nprint(kodlanmis_kullanici)"
  },
  {
    "id": "U8_T1_E3",
    "unit_id": 8,
    "topic_id": 1,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Veri Kodlama: base64",
    "title": "Base64 -> Bytes (Decoding)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Base64'ten Geri Çözme: b64decode()</h1><p>Base64 formatındaki bir veriyi orijinal byte dizisine geri döndürmek için <code>base64.b64decode()</code> fonksiyonu kullanılır. Bu fonksiyon da argüman olarak byte dizisi alır (veya ASCII uyumlu string).</p><pre><code>import base64\n\nkodlanmis_bytes = b'R2l6bGkgQmlsZ2k='\n\n# Base64 byte dizisini orijinal byte dizisine çöz\ncozulmus_bytes = base64.b64decode(kodlanmis_bytes)\n\nprint(cozulmus_bytes) # Çıktı: b'Gizli Bilgi'</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kodlanmış Mesajı Çöz",
      "description": "<code>kodlu_mesaj_bytes = b'UGFzc3dvcmQxMjM='</code> base64 kodlu byte dizisi verilmiştir. <code>base64.b64decode()</code> fonksiyonunu kullanarak bu mesajı orijinal byte dizisine çözün ve sonucu (<code>b'...'</code> formatında) yazdırın.",
      "hint": "<code>cozulmus = base64.b64decode(kodlu_mesaj_bytes)</code>"
    },
    "default_code": "import base64\n\nkodlu_mesaj_bytes = b'UGFzc3dvcmQxMjM='\n\n# Mesajı burada çözün ve yazdırın\n",
    "solution": "import base64\n\nkodlu_mesaj_bytes = b'UGFzc3dvcmQxMjM='\n\ncozulmus_bytes = base64.b64decode(kodlu_mesaj_bytes)\nprint(cozulmus_bytes)"
  },
  {
    "id": "U8_T1_E4",
    "unit_id": 8,
    "topic_id": 1,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Veri Kodlama: base64",
    "title": "Base64 String -> String",
    "difficulty": "Orta",
    "lesson_html": "<h1>Base64 String'den Orijinal String'e</h1><p>Eğer elinizdeki base64 verisi string formatındaysa (örn: bir API yanıtından geldi), onu orijinal string'e geri çevirmek için şu adımlar izlenir:</p><ol><li>Base64 string'ini <code>.encode('utf-8')</code> ile byte'a çevir.</li><li><code>base64.b64decode()</code> ile orijinal byte'lara çöz.</li><li>Orijinal byte'ları <code>.decode('utf-8')</code> ile okunabilir string'e çevir.</li></ol><pre><code>import base64\n\nkodlanmis_str = \"SGVsbG8gV29ybGQ=\" # 'Hello World'\n\n# Adım 1: String -> Base64 Bytes\nkodlanmis_bytes = kodlanmis_str.encode('utf-8')\n\n# Adım 2: Base64 Bytes -> Orijinal Bytes\ncozulmus_bytes = base64.b64decode(kodlanmis_bytes)\n\n# Adım 3: Orijinal Bytes -> Orijinal String\norijinal_str = cozulmus_bytes.decode('utf-8')\n\nprint(orijinal_str) # Çıktı: Hello World</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Konfigürasyonu Çöz",
      "description": "<code>base64_config = \"dXNlcj1hZG1pbixwYXNzd29yZD1wQDU1dzByZA==\"</code> string'i verilmiştir. Yukarıdaki 3 adımı (encode -> b64decode -> decode) uygulayarak bu base64 string'ini orijinal okunabilir string'e çevirin ve yazdırın.",
      "hint": "Sırayla: `.encode('utf-8')`, `base64.b64decode()`, `.decode('utf-8')`"
    },
    "default_code": "import base64\n\nbase64_config = \"dXNlcj1hZG1pbixwYXNzd29yZD1wQDU1dzByZA==\"\n\n# Base64 string'ini orijinal string'e çevirin\norijinal_config = None # Bu satırı değiştirin\n\n\nprint(orijinal_config)",
    "solution": "import base64\n\nbase64_config = \"dXNlcj1hZG1pbixwYXNzd29yZD1wQDU1dzByZA==\"\n\n# Adım 1\nkodlanmis_bytes = base64_config.encode('utf-8')\n\n# Adım 2\ncozulmus_bytes = base64.b64decode(kodlanmis_bytes)\n\n# Adım 3\norijinal_config = cozulmus_bytes.decode('utf-8')\n\nprint(orijinal_config)"
  },
  {
    "id": "U8_T1_E5",
    "unit_id": 8,
    "topic_id": 1,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Veri Kodlama: base64",
    "title": "Base64 Kullanım Alanları",
    "difficulty": "Orta",
    "lesson_html": "<h1>Base64 Kullanım Alanları (Siber Güvenlik)</h1><p>Base64 şifreleme olmasa da, siber güvenlikte çeşitli amaçlarla kullanılır:</p><ul><li><b>Veri Aktarımı:</b> İkili veriyi metin tabanlı protokollerde (HTTP başlıkları, E-posta) taşımak.</li><li><b>Basit Gizleme (Obfuscation):</b> Zararlı yazılım analizini zorlaştırmak veya basit filtreleri atlatmak için komutları/payloadları kodlamak (ancak kolayca geri çözülebilir).</li><li><b>Veri Saklama:</b> İkili veriyi JSON veya XML gibi metin formatlarında saklamak.</li><li><b>Kimlik Doğrulama:</b> HTTP Basic Authentication gibi bazı eski kimlik doğrulama mekanizmalarında 'kullanıcı:şifre' çiftini kodlamak için.</li></ul><p>Unutmayın: Güvenlik için asla tek başına Base64'e güvenmeyin!</p>",
    "challenge": {
      "title": "Meydan Okuma: Basic Auth Kodla",
      "description": "HTTP Basic Authentication için 'kullanici:sifre' formatı base64 ile kodlanır. <code>credentials = \"hacker:p4ssw0rd\"</code> string'ini base64 formatına kodlayıp (string olarak) yazdırın.",
      "hint": "Önce <code>.encode('utf-8')</code>, sonra <code>base64.b64encode()</code>, sonra <code>.decode('utf-8')</code>."
    },
    "default_code": "import base64\n\ncredentials = \"hacker:p4ssw0rd\"\n\n# credentials string'ini base64'e kodlayın\nkodlanmis_str = None # Bu satırı değiştirin\n\n\nprint(f\"Basic Auth Header (kodlanmış): {kodlanmis_str}\")",
    "solution": "import base64\n\ncredentials = \"hacker:p4ssw0rd\"\n\n# credentials string'ini base64'e kodlayın\nkodlanmis_bytes = base64.b64encode(credentials.encode('utf-8'))\nkodlanmis_str = kodlanmis_bytes.decode('utf-8')\n\nprint(f\"Basic Auth Header (kodlanmış): {kodlanmis_str}\")"
  },
  {
    "id": "U8_T2_E1",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "'hashlib' Modülünü İçeri Aktarma",
    "difficulty": "Kolay",
    "lesson_html": "<h1>Hashing ve 'hashlib' Modülü</h1><p>Hashing, veriyi tek yönlü olarak sabit boyutlu bir özete dönüştürme işlemidir. Parola güvenliği ve veri bütünlüğü için kullanılır.</p><p>Python'un standart <code>hashlib</code> modülü, MD5, SHA-1, SHA-256, SHA-512 gibi yaygın hash algoritmalarını içerir.</p><p>Kullanmak için önce <code>import hashlib</code> yazmalısınız.</p><p><strong>Önemli:</strong> Hash fonksiyonları da base64 gibi metin (string) değil, <strong>byte</strong> dizileri üzerinde çalışır.</p><pre><code>import hashlib\n\n# hashlib.md5(), hashlib.sha256() gibi fonksiyonları kullanabiliriz.</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'hashlib' İçeri Aktar",
      "description": "<code>hashlib</code> modülünü kodunuza <code>import</code> edin.",
      "hint": "<code>import hashlib</code>"
    },
    "default_code": "# hashlib modülünü burada içeri aktarın\n\nprint(\"hashlib modülü içeri aktarıldı.\")",
    "solution": "import hashlib\n\nprint(\"hashlib modülü içeri aktarıldı.\")"
  },
  {
    "id": "U8_T2_E2",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "MD5 Hash Oluşturma (Bytes)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>MD5 Hash (Bytes)</h1><p>MD5, eski ve artık <strong>güvensiz</strong> kabul edilen bir hash algoritmasıdır (çakışmalara - collision - karşı zayıftır), ancak hala dosya bütünlüğü kontrolü gibi amaçlarla (güvenlik kritik olmayan) kullanılabilir.</p><p><code>hashlib.md5(byte_dizisi)</code> fonksiyonu bir MD5 hash nesnesi oluşturur.</p><p>Hash değerini almak için <code>.hexdigest()</code> metodu kullanılır (okunabilir onaltılık - hexadecimal - formatta string döndürür).</p><pre><code>import hashlib\n\nveri_bytes = b'Merhaba'\n\n# MD5 hash nesnesi oluştur\nhash_nesnesi = hashlib.md5(veri_bytes)\n\n# Hash değerini hex string olarak al\nmd5_hash = hash_nesnesi.hexdigest()\n\nprint(md5_hash) # Çıktı: 9a6ddf23a6a8a1c81530e3863a355651</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'admin' MD5 Hash",
      "description": "<code>hashlib</code> modülünü import edin. <code>b'admin'</code> byte dizisinin MD5 hash değerini hesaplayın ve <code>.hexdigest()</code> ile hex string olarak yazdırın.",
      "hint": "<code>hash_obj = hashlib.md5(b'admin')</code> ... <code>print(hash_obj.hexdigest())</code>"
    },
    "default_code": "# hashlib modülünü import edin\n\n\nveri = b'admin'\n\n# MD5 hash'ini hesaplayın ve hex olarak yazdırın\n",
    "solution": "import hashlib\n\nveri = b'admin'\n\nhash_nesnesi = hashlib.md5(veri)\nmd5_hash = hash_nesnesi.hexdigest()\nprint(md5_hash)"
  },
  {
    "id": "U8_T2_E3",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "SHA-256 Hash Oluşturma (Bytes)",
    "difficulty": "Kolay",
    "lesson_html": "<h1>SHA-256 Hash (Bytes)</h1><p>SHA-256, günümüzde parola hashing ve dijital imzalar için güvenli kabul edilen yaygın bir hash algoritmasıdır. MD5'ten daha uzundur (256 bit vs 128 bit) ve çakışmalara karşı çok daha dayanıklıdır.</p><p>Kullanımı MD5 ile aynıdır, sadece <code>hashlib.sha256()</code> kullanılır.</p><pre><code>import hashlib\n\nveri_bytes = b'Merhaba'\n\n# SHA-256 hash nesnesi oluştur\nhash_nesnesi = hashlib.sha256(veri_bytes)\n\n# Hash değerini hex string olarak al\nsha256_hash = hash_nesnesi.hexdigest()\n\nprint(sha256_hash)\n# Çıktı: 58e174e5b85a3c61bf00450ff7bdc7f66a01d6360c7f1a30f305c485da813958</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'admin' SHA-256 Hash",
      "description": "<code>hashlib</code> modülünü import edin. <code>b'admin'</code> byte dizisinin SHA-256 hash değerini hesaplayın ve <code>.hexdigest()</code> ile hex string olarak yazdırın.",
      "hint": "<code>hash_obj = hashlib.sha256(b'admin')</code> ... <code>print(hash_obj.hexdigest())</code>"
    },
    "default_code": "# hashlib modülünü import edin\n\n\nveri = b'admin'\n\n# SHA-256 hash'ini hesaplayın ve hex olarak yazdırın\n",
    "solution": "import hashlib\n\nveri = b'admin'\n\nhash_nesnesi = hashlib.sha256(veri)\nsha256_hash = hash_nesnesi.hexdigest()\nprint(sha256_hash)"
  },
  {
    "id": "U8_T2_E4",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "String'i Hashleme (encode)",
    "difficulty": "Orta",
    "lesson_html": "<h1>String'i Hashleme</h1><p>Normal bir Python string'ini hashlemek için, önce onu <code>.encode('utf-8')</code> metoduyla byte dizisine çevirmeniz gerekir.</p><pre><code>import hashlib\n\nparola_str = \"gizli123\"\n\n# 1. String'i byte'a çevir\nparola_bytes = parola_str.encode('utf-8')\n\n# 2. Byte'ları hashle\nhash_nesnesi = hashlib.sha256(parola_bytes)\nparola_hash = hash_nesnesi.hexdigest()\n\nprint(parola_hash)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Parola Hash",
      "description": "<code>parola = \"P@sswOrd\"</code> string'ini önce UTF-8 byte dizisine çevirin, ardından SHA-256 ile hashleyin ve hex digest'ini yazdırın.",
      "hint": "<code>parola.encode('utf-8')</code> sonucunu <code>hashlib.sha256()</code> içine verin."
    },
    "default_code": "import hashlib\n\nparola = \"P@sswOrd\"\n\n# String parolayı SHA-256 ile hashleyin\nparola_hash = None # Bu satırı değiştirin\n\n\nprint(parola_hash)",
    "solution": "import hashlib\n\nparola = \"P@sswOrd\"\n\n# String parolayı SHA-256 ile hashleyin\nparola_bytes = parola.encode('utf-8')\nhash_nesnesi = hashlib.sha256(parola_bytes)\nparola_hash = hash_nesnesi.hexdigest()\n\nprint(parola_hash)"
  },
  {
    "id": "U8_T2_E5",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "Digest vs Hexdigest",
    "difficulty": "Orta",
    "lesson_html": "<h1>.digest() vs .hexdigest()</h1><p>Hash nesnesinden hash değerini almanın iki yolu vardır:</p><ul><li><code>.digest()</code>: Hash değerini ham <strong>byte</strong> dizisi olarak döndürür. Bu, başka işlemler (örn: şifreleme anahtarı olarak kullanma) için daha uygundur ama doğrudan okunamaz.</li><li><code>.hexdigest()</code>: Hash değerini, sadece onaltılık (hexadecimal) karakterler (0-9, a-f) içeren okunabilir bir <strong>string</strong> olarak döndürür. Genellikle gösterim veya karşılaştırma için bu kullanılır.</li></ul><pre><code>import hashlib\nveri = b'test'\nh = hashlib.sha256(veri)\n\ndigest_bytes = h.digest()\nhex_string = h.hexdigest()\n\nprint(f\"Digest (bytes): {digest_bytes}\")\nprint(f\"Hexdigest (str): {hex_string}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Ham Digest",
      "description": "<code>b'data'</code> byte dizisinin SHA-256 hash'ini hesaplayın. Hem <code>.digest()</code> ile ham byte dizisini, hem de <code>.hexdigest()</code> ile hex string'ini ayrı ayrı yazdırın.",
      "hint": "İki farklı print satırı olacak: biri <code>h.digest()</code>, diğeri <code>h.hexdigest()</code> için."
    },
    "default_code": "import hashlib\n\nveri = b'data'\n\n# SHA-256 hash nesnesini oluşturun\nh = None # Bu satırı değiştirin\n\n# Hem .digest() hem de .hexdigest() sonucunu yazdırın\n",
    "solution": "import hashlib\n\nveri = b'data'\n\nh = hashlib.sha256(veri)\n\nprint(f\"Digest: {h.digest()}\")\nprint(f\"Hexdigest: {h.hexdigest()}\")"
  },
  {
    "id": "U8_T2_E6",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "MD5 Güvensizliği (Collision)",
    "difficulty": "Orta",
    "lesson_html": "<h1>MD5 Güvensizliği (Collision)</h1><p>MD5'in güvensiz kabul edilmesinin ana nedeni 'çakışma' (collision) saldırılarına açık olmasıdır. Yani, farklı girdilerin *aynı* MD5 hash değerini üretmesi (kötü niyetli olarak) mümkün hale gelmiştir.</p><p>Bu nedenle, parola hashing gibi güvenlik açısından kritik uygulamalarda MD5 <strong>kullanılmamalıdır</strong>. SHA-256 veya daha güçlü algoritmalar tercih edilmelidir.</p><p>(Aşağıda farklı girdilerin aynı MD5'i verdiğini gösteren bir örnek var - bu değerler özel olarak bulunmuştur).</p><pre><code>import hashlib\n# Bu iki farklı byte dizisi\nd1 = bytes.fromhex('d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f89...')\nd2 = bytes.fromhex('d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f89...')\n\nprint(hashlib.md5(d1).hexdigest())\nprint(hashlib.md5(d2).hexdigest()) # Çıktılar aynı!</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Güvenli Algoritma Seçimi",
      "description": "Yeni bir sistemde parola hash'lerini saklamak için MD5 mi yoksa SHA-256 mı kullanmak daha güvenlidir? Nedenini bir yorum satırıyla açıklayın.",
      "hint": "Hangi algoritma çakışmalara karşı daha dayanıklı?"
    },
    "default_code": "# Parola hashing için tercih edilen algoritma ve nedeni:\n",
    "solution": "# Parola hashing için tercih edilen algoritma ve nedeni:\n# SHA-256 (veya daha güçlüleri SHA-512, bcrypt, Argon2 gibi).\n# Çünkü MD5, çakışma (collision) saldırılarına karşı zayıftır,\n# yani farklı parolaların aynı hash'i üretmesi mümkündür,\n# bu da parola güvenliğini tehlikeye atar."
  },
  {
    "id": "U8_T2_E7",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "Parola Hashing ve Tuzlama (Salting)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Parola Hashing ve Tuzlama (Salting)</h1><p>Parolaları hashleyerek saklamak, orijinal parolaları saklamaktan çok daha güvenlidir. Ancak, aynı parolaya sahip kullanıcıların hash'leri de aynı olur. Bu durum 'gökkuşağı tabloları' (rainbow tables) gibi önceden hesaplanmış hash listeleriyle saldırıları kolaylaştırır.</p><p>Çözüm: 'Tuzlama' (Salting). Her kullanıcının parolasına, hashlemeden *önce*, o kullanıcıya özel rastgele bir 'tuz' (salt - genellikle rastgele byte dizisi) eklenir. Tuz da hash ile birlikte veritabanında saklanır.</p><p>Böylece aynı parolaya sahip olsalar bile, farklı tuzlar nedeniyle kullanıcıların hash'leri tamamen farklı olur.</p><pre><code>import hashlib\nimport os\n\nparola = \"gizli123\".encode('utf-8')\nsalt = os.urandom(16) # Rastgele 16 byte tuz oluştur\n\nhashlenecek_veri = salt + parola\nparola_hash = hashlib.sha256(hashlenecek_veri).hexdigest()\n\nprint(f\"Salt: {salt.hex()}\")\nprint(f\"Hash: {parola_hash}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Basit Tuzlama",
      "description": "<code>parola = b\"sifre\"</code> ve <code>tuz = b\"rastgele\"</code> verilmiştir. Bu iki byte dizisini birleştirin (<code>+</code> ile). Birleşmiş byte dizisinin SHA-256 hash'ini hesaplayın ve hex digest olarak yazdırın.",
      "hint": "<code>birlesik = tuz + parola</code> ... <code>hashlib.sha256(birlesik).hexdigest()</code>"
    },
    "default_code": "import hashlib\n\nparola = b\"sifre\"\ntuz = b\"rastgele\"\n\n# Tuzlanmış parolayı oluşturun\ntuzlanmis_veri = None # Bu satırı değiştirin\n\n# Tuzlanmış verinin SHA-256 hash'ini hesaplayıp yazdırın\n",
    "solution": "import hashlib\n\nparola = b\"sifre\"\ntuz = b\"rastgele\"\n\n# Tuzlanmış parolayı oluşturun\ntuzlanmis_veri = tuz + parola\n\n# Tuzlanmış verinin SHA-256 hash'ini hesaplayıp yazdırın\nhash_degeri = hashlib.sha256(tuzlanmis_veri).hexdigest()\nprint(hash_degeri)"
  },
  {
    "id": "U8_T2_E8",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "Veri Bütünlüğü Kontrolü",
    "difficulty": "Orta",
    "lesson_html": "<h1>Veri Bütünlüğü (Integrity) Kontrolü</h1><p>Hashing, bir dosyanın veya mesajın aktarım sırasında veya saklanırken değiştirilip değiştirilmediğini kontrol etmek için kullanılır. İndirilen bir dosyanın hash değeri, web sitesinde verilen orijinal hash değeriyle eşleşiyorsa, dosya bozulmamış veya değiştirilmemiştir.</p><pre><code>import hashlib\n\n# İndirdiğimiz dosyanın içeriği (varsayım)\ndosya_icerigi = b\"Bu dosyanın orijinal içeriğidir.\"\n\n# Hesaplanan hash\nhesaplanan_hash = hashlib.sha256(dosya_icerigi).hexdigest()\n\n# Web sitesinden alınan beklenen hash\nbeklenen_hash = \"orijinal_hash_degeri_burada\"\n\nif hesaplanan_hash == beklenen_hash:\n    print(\"Dosya bütünlüğü doğrulandı.\")\nelse:\n    print(\"UYARI: Dosya değiştirilmiş veya bozulmuş!\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Mesaj Bütünlüğü",
      "description": "<code>mesaj = b\"Gizli mesaj\"</code> byte dizisi ve <code>beklenen_sha256 = \"...\"</code> (doğru hash değeri) verilmiştir. Mesajın SHA-256 hash'ini hesaplayın. Hesaplanan hash ile <code>beklenen_sha256</code> değerini karşılaştırın. Eğer eşitse <code>\"Mesaj bozulmamış\"</code>, değilse <code>\"Mesaj değiştirilmiş!\"</code> yazdırın.",
      "hint": "<code>hesaplanan = hashlib.sha256(mesaj).hexdigest()</code> ... <code>if hesaplanan == beklenen_sha256: ...</code>"
    },
    "default_code": "import hashlib\n\nmesaj = b\"Gizli mesaj\"\nbeklenen_sha256 = \"c87fd9962e245053e1a6ecd42f7186635c9103c8121bf9f0f9b54c0e64f78e47\"\n\n# Mesajın hash'ini hesaplayın\nhesaplanan_hash = None # Bu satırı değiştirin\n\n# Hash'leri karşılaştırıp sonucu yazdırın\n",
    "solution": "import hashlib\n\nmesaj = b\"Gizli mesaj\"\nbeklenen_sha256 = \"c87fd9962e245053e1a6ecd42f7186635c9103c8121bf9f0f9b54c0e64f78e47\"\n\nhesaplanan_hash = hashlib.sha256(mesaj).hexdigest()\n\nif hesaplanan_hash == beklenen_sha256:\n    print(\"Mesaj bozulmamış\")\nelse:\n    print(\"Mesaj değiştirilmiş!\")"
  },
  {
    "id": "U8_T2_E9",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "Büyük Dosyaları Hashleme (.update)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Büyük Dosyaları Hashleme (.update())</h1><p>Çok büyük dosyaları (gigabaytlarca) hashlerken, tüm dosyayı belleğe okumak verimsizdir. Bunun yerine, dosyayı parçalar halinde (chunks) okuyup, her parçayı hash nesnesine <code>.update(parca_bytes)</code> metodu ile ekleriz.</p><p>Hash nesnesi, bu parçaları birleştirerek sanki tek seferde hashlenmiş gibi sonuç üretir. Hash değeri yine en sonda <code>.hexdigest()</code> ile alınır.</p><pre><code>import hashlib\n\nBLOCK_SIZE = 65536 # Okunacak parça boyutu (byte)\nhash_nesnesi = hashlib.sha256()\n\n# Gerçek kod (dosya okuma ile):\n# with open('buyuk_dosya.zip', 'rb') as f: # 'rb' = read binary\n#     while True:\n#         parca = f.read(BLOCK_SIZE)\n#         if not parca:\n#             break # Dosya bitti\n#         hash_nesnesi.update(parca)\n\n# Simülasyon:\nhash_nesnesi.update(b\"Bu ilk parca.\")\nhash_nesnesi.update(b\"Bu ikinci parca.\")\n\ndosya_hash = hash_nesnesi.hexdigest()\nprint(dosya_hash)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Parçalı Hash",
      "description": "Boş bir SHA-256 hash nesnesi (<code>h</code>) oluşturun. <code>h.update(b\"parca1\")</code> ve <code>h.update(b\"parca2\")</code> komutlarıyla hash nesnesini iki parça veriyle güncelleyin. Son olarak <code>h.hexdigest()</code> ile nihai hash değerini yazdırın.",
      "hint": "<code>h = hashlib.sha256()</code> ... <code>h.update(...)</code> ... <code>h.update(...)</code> ... <code>print(h.hexdigest())</code>"
    },
    "default_code": "import hashlib\n\n# Boş hash nesnesini oluşturun\nh = None # Bu satırı değiştirin\n\n# İki parçayı 'update' ile ekleyin\n\n\n# Nihai hash'i yazdırın\n",
    "solution": "import hashlib\n\n# Boş hash nesnesini oluşturun\nh = hashlib.sha256()\n\n# İki parçayı 'update' ile ekleyin\nh.update(b\"parca1\")\nh.update(b\"parca2\")\n\n# Nihai hash'i yazdırın\nprint(h.hexdigest())"
  },
  {
    "id": "U8_T2_E10",
    "unit_id": 8,
    "topic_id": 2,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Hashing: hashlib",
    "title": "Diğer Hash Algoritmaları",
    "difficulty": "Zor",
    "lesson_html": "<h1>Diğer Hash Algoritmaları</h1><p><code>hashlib</code> modülü, MD5 ve SHA-256 dışında birçok başka algoritmayı da destekler:</p><ul><li><b>SHA-1:</b> MD5 gibi güvensiz kabul edilir (çakışmalar bulundu).</li><li><b>SHA-512, SHA-384:</b> SHA-2 ailesinin daha uzun (ve genellikle daha güvenli ama biraz daha yavaş) üyeleri.</li><li><b>SHA-3 Ailesi (örn: SHA3-256):</b> NIST tarafından düzenlenen yarışma sonucu seçilen, farklı bir iç yapıya sahip yeni nesil hash algoritması.</li><li><b>BLAKE2 (örn: blake2b, blake2s):</b> Genellikle SHA-3'ten daha hızlı ve en az onun kadar güvenli kabul edilen modern algoritmalar.</li></ul><p>Algoritma seçimi, güvenlik gereksinimlerinize ve performans ihtiyaçlarınıza bağlıdır.</p><pre><code>import hashlib\n\nveri = b\"test\"\nprint(f\"SHA512: {hashlib.sha512(veri).hexdigest()}\")\nprint(f\"BLAKE2b: {hashlib.blake2b(veri).hexdigest()}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: SHA-512 Kullan",
      "description": "<code>hashlib</code> modülünü kullanarak <code>b\"GuvenliVeri\"</code> byte dizisinin <strong>SHA-512</strong> hash'ini hesaplayın ve hex digest olarak yazdırın.",
      "hint": "<code>hashlib.sha512(...)</code> kullanın."
    },
    "default_code": "import hashlib\n\nveri = b\"GuvenliVeri\"\n\n# Verinin SHA-512 hash'ini hesaplayıp yazdırın\n",
    "solution": "import hashlib\n\nveri = b\"GuvenliVeri\"\n\nsha512_hash = hashlib.sha512(veri).hexdigest()\nprint(sha512_hash)"
  },
  {
    "id": "U8_T3_E1",
    "unit_id": 8,
    "topic_id": 3,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Soket Programlama (Temel)",
    "title": "'socket' Modülü ve Temel Kavramlar",
    "difficulty": "Orta",
    "lesson_html": "<h1>Soket Programlama</h1><p>Soketler, ağ üzerindeki iki programın iletişim kurması için kullanılan uç noktalardır (endpoints). En yaygın kullanılanı TCP/IP soketleridir (güvenilir, bağlantı odaklı).</p><p>İletişim genellikle 'istemci-sunucu' (client-server) modeline dayanır:</p><ul><li><b>Sunucu (Server):</b> Belirli bir IP adresi ve port numarasında dinlemeye başlar, gelen bağlantıları kabul eder.</li><li><b>İstemci (Client):</b> Sunucunun IP adresine ve port numarasına bağlanma isteği gönderir.</li></ul><p>Python'un standart <code>socket</code> modülü bu işlemleri sağlar.</p><pre><code>import socket\n\n# socket.socket() ile soket nesnesi oluşturulur.\n# socket.AF_INET: IPv4 kullanılacağını belirtir.\n# socket.SOCK_STREAM: TCP protokolü kullanılacağını belirtir.</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 'socket' İçeri Aktar",
      "description": "Ağ programlama için gerekli olan <code>socket</code> modülünü kodunuza <code>import</code> edin.",
      "hint": "<code>import socket</code>"
    },
    "default_code": "# socket modülünü burada içeri aktarın\n\nprint(\"socket modülü içeri aktarıldı.\")",
    "solution": "import socket\n\nprint(\"socket modülü içeri aktarıldı.\")"
  },
  {
    "id": "U8_T3_E2",
    "unit_id": 8,
    "topic_id": 3,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Soket Programlama (Temel)",
    "title": "Soket Nesnesi Oluşturma",
    "difficulty": "Orta",
    "lesson_html": "<h1>Soket Nesnesi Oluşturma</h1><p>Bir soket oluşturmak için <code>socket.socket(family, type)</code> fonksiyonu kullanılır.</p><ul><li><code>family</code>: Adres ailesi. Genellikle <code>socket.AF_INET</code> (IPv4 için) veya <code>socket.AF_INET6</code> (IPv6 için).</li><li><code>type</code>: Soket tipi. Genellikle <code>socket.SOCK_STREAM</code> (TCP için) veya <code>socket.SOCK_DGRAM</code> (UDP için).</li></ul><pre><code>import socket\n\n# IPv4 ve TCP kullanan bir soket oluştur\ntcp_soket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nprint(\"TCP Soketi oluşturuldu.\")\n\n# İş bittiğinde kapatmak önemlidir (normalde)\n# tcp_soket.close()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: TCP Soketi Oluştur",
      "description": "<code>socket</code> modülünü kullanarak IPv4 (<code>AF_INET</code>) ve TCP (<code>SOCK_STREAM</code>) için bir soket nesnesi oluşturun ve <code>istemci_soketi</code> değişkenine atayın. Ardından bu nesneyi yazdırın.",
      "hint": "<code>istemci_soketi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</code>"
    },
    "default_code": "import socket\n\n# TCP soketini burada oluşturun\nistemci_soketi = None # Bu satırı değiştirin\n\n# Soket nesnesini yazdırın\nprint(istemci_soketi)\n\n# Simülasyon: Normalde kapatılır\n# istemci_soketi.close()",
    "solution": "import socket\n\n# TCP soketini burada oluşturun\nistemci_soketi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Soket nesnesini yazdırın\nprint(istemci_soketi)\n\n# Simülasyon: Normalde kapatılır\n# istemci_soketi.close()"
  },
  {
    "id": "U8_T3_E3",
    "unit_id": 8,
    "topic_id": 3,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Soket Programlama (Temel)",
    "title": "İstemci: Sunucuya Bağlanma (connect)",
    "difficulty": "Zor",
    "lesson_html": "<h1>İstemci: Sunucuya Bağlanma (.connect())</h1><p>İstemci tarafında, oluşturulan soket nesnesinin <code>.connect((hedef_ip, hedef_port))</code> metodu kullanılarak sunucuya bağlanılır. Argüman olarak IP adresi ve port numarasını içeren bir *demet (tuple)* alır.</p><p>(Pyodide ortamında bu komut genellikle hata verecektir).</p><pre><code>import socket\n\nhedef_ip = \"127.0.0.1\" # Genellikle localhost (kendi makinemiz)\nhedef_port = 80\n\nistemci_soketi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n    print(f\"{hedef_ip}:{hedef_port} adresine bağlanılıyor...\")\n    istemci_soketi.connect((hedef_ip, hedef_port))\n    print(\"Bağlantı başarılı!\")\n    # ... veri gönderme/alma ...\nexcept ConnectionRefusedError:\n    print(\"Hata: Bağlantı reddedildi (sunucu çalışmıyor veya port kapalı).\")\nexcept socket.error as e:\n    print(f\"Soket hatası: {e}\")\nfinally:\n    istemci_soketi.close()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Bağlantı Simülasyonu",
      "description": "Bir TCP soketi oluşturun. <code>.connect((\"8.8.8.8\", 53))</code> metodunu (Google DNS'e bağlanmayı dener gibi) bir <code>try/except socket.error as e:</code> bloğu içinde çağırın. <code>except</code> bloğunda <code>\"Bağlantı kurulamadı (Simülasyon).\"</code> mesajını ve hata detayını (<code>e</code>) yazdırın. <code>finally</code> bloğunda soketi kapatın (simüle).",
      "hint": "<code>try: ... soket.connect(...) ... except socket.error as e: ... print(...) ... finally: print('Soket kapatıldı (Simülasyon)')</code>"
    },
    "default_code": "import socket\n\n# Soketi oluşturun\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# try/except/finally bloğunu buraya yazın\ntry:\n    pass\nexcept:\n    pass\nfinally:\n    pass\n",
    "solution": "import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n    print(\"Bağlanmayı deniyor...\")\n    # Pyodide'da bu genellikle başarısız olur\n    s.connect((\"8.8.8.8\", 53))\n    print(\"Bağlantı başarılı (beklenmiyor)\")\nexcept socket.error as e:\n    print(f\"Bağlantı kurulamadı (Simülasyon). Hata: {e}\")\nexcept Exception as e:\n    # Pyodide farklı hatalar verebilir\n    print(f\"Beklenmedik Hata: {e}\")\nfinally:\n    # s.close() # Normalde kapatılır\n    print('Soket kapatıldı (Simülasyon)')"
  },
  {
    "id": "U8_T3_E4",
    "unit_id": 8,
    "topic_id": 3,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Soket Programlama (Temel)",
    "title": "Veri Gönderme/Alma (send/recv)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Veri Gönderme/Alma (.send() / .recv())</h1><p>Bağlantı kurulduktan sonra (hem istemci hem sunucu tarafında) veri göndermek için <code>.send(byte_dizisi)</code>, veri almak için <code>.recv(buffer_boyutu)</code> metodları kullanılır.</p><ul><li><code>.send()</code>: Gönderilecek veriyi *byte* olarak alır.</li><li><code>.recv()</code>: Tek seferde en fazla alınacak byte sayısını (buffer boyutu, örn: 1024, 4096) parametre olarak alır ve alınan veriyi *byte* olarak döndürür.</li></ul><p>(Yine, Pyodide'da bunlar genellikle çalışmaz).</p><pre><code># --- İstemci Tarafı (Varsayım) ---\nistek = b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\"\ntry:\n    istemci_soketi.send(istek)\n    yanit_bytes = istemci_soketi.recv(4096) # En fazla 4096 byte oku\n    print(\"Sunucudan yanıt alındı:\")\n    print(yanit_bytes.decode('utf-8', errors='ignore')) # Byte'ı string'e çevir\nexcept socket.error as e:\n    print(f\"İletişim hatası: {e}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: send/recv Kavramı",
      "description": "<code>.send()</code> ve <code>.recv()</code> metodlarının veri alışverişini hangi formatta (string mi, bytes mı) yaptığını bir yorum satırıyla açıklayın.",
      "hint": "Ders metninde vurgulanan kelimeye dikkat edin."
    },
    "default_code": "# send() ve recv() hangi veri formatında çalışır?\n# Açıklama:\n",
    "solution": "# send() ve recv() hangi veri formatında çalışır?\n# Açıklama: Her iki metod da veriyi byte dizisi (bytes) formatında gönderir ve alır."
  },
  {
    "id": "U8_T3_E5",
    "unit_id": 8,
    "topic_id": 3,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "Soket Programlama (Temel)",
    "title": "Sunucu Tarafı (bind, listen, accept)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Sunucu Tarafı (bind, listen, accept)</h1><p>Sunucu tarafında adımlar biraz daha farklıdır:</p><ol><li><code>socket.socket(...)</code>: Soket oluşturulur.</li><li><code>.bind((host, port))</code>: Soket belirli bir IP adresi (genellikle <code>''</code> - tüm arayüzler veya <code>'127.0.0.1'</code> - sadece localhost) ve port numarasına 'bağlanır'.</li><li><code>.listen(kuyruk_boyutu)</code>: Soket gelen bağlantıları dinlemeye başlar. Kuyruk boyutu, kabul edilmeyi bekleyen kaç bağlantının sıraya girebileceğini belirtir.</li><li><code>.accept()</code>: Gelen bir bağlantıyı kabul eder. Bu metod *engelleyici*dir (blocking), yani yeni bir bağlantı gelene kadar programı bekletir. Bağlantı geldiğinde, istemciyle iletişim kurmak için *yeni bir soket nesnesi* ve istemcinin adresini döndürür.</li></ol><pre><code>import socket\n\nHOST = '' # Tüm arayüzleri dinle\nPORT = 12345\n\nsunucu_soketi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n    sunucu_soketi.bind((HOST, PORT))\n    sunucu_soketi.listen(1)\n    print(f\"{PORT} portu dinleniyor...\")\n    \n    # Yeni bağlantı bekle\n    istemci_soketi, adres = sunucu_soketi.accept()\n    print(f\"{adres} bağlandı.\")\n    \n    # ... istemci_soketi ile send/recv ...\n    # istemci_soketi.close()\n\nexcept socket.error as e:\n    print(f\"Sunucu hatası: {e}\")\nfinally:\n    sunucu_soketi.close()</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Sunucu Kavramları",
      "description": "Gelen bağlantı isteklerini kabul etmek için sunucu soketinde hangi metod çağrılır? Cevabı bir yorum satırı olarak yazın.",
      "hint": "Ders metnindeki 4. adıma bakın."
    },
    "default_code": "# Gelen bağlantıyı kabul eden metod:\n",
    "solution": "# Gelen bağlantıyı kabul eden metod:\n# .accept()"
  },
  {
    "id": "U8_T4_E1",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "'re' Modülü ve Temel Kavramlar",
    "difficulty": "Orta",
    "lesson_html": "<h1>Düzenli İfadeler ('re' Modülü)</h1><p>Düzenli ifadeler (Regular Expressions veya RegEx), metin içinde belirli karakter dizisi desenlerini (patterns) aramak ve eşleştirmek için kullanılan özel bir sözdizimidir. Log analizi, veri çıkarma, girdi doğrulama gibi alanlarda çok güçlüdür.</p><p>Python'un standart <code>re</code> modülü, RegEx desenlerini metinler üzerinde kullanmak için fonksiyonlar sağlar. Kullanmak için <code>import re</code> yazılır.</p><p>En temel fonksiyonlardan biri <code>re.search(desen, metin)</code>'dir. Desen metin içinde *herhangi bir yerde* bulunursa bir 'Match' nesnesi döndürür, bulunmazsa <code>None</code> döndürür.</p><pre><code>import re\n\nmetin = \"Bu bir test metnidir.\"\ndesen = \"test\"\n\neslesme = re.search(desen, metin)\n\nif eslesme:\n    print(\"Desen bulundu!\")\nelse:\n    print(\"Desen bulunamadı.\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: 're' İçeri Aktar ve Ara",
      "description": "<code>re</code> modülünü import edin. <code>log_satiri = \"[ERROR] Disk dolu\"</code> metninde <code>\"ERROR\"</code> desenini <code>re.search()</code> ile arayın. Eğer eşleşme bulunursa (<code>if eslesme:</code>) <code>\"Hata logu bulundu.\"</code> yazdırın.",
      "hint": "<code>import re</code> ... <code>eslesme = re.search(\"ERROR\", log_satiri)</code> ... <code>if eslesme: ...</code>"
    },
    "default_code": "# re modülünü import edin\n\n\nlog_satiri = \"[ERROR] Disk dolu\"\n\n# 'ERROR' desenini arayın ve sonucu yazdırın\n",
    "solution": "import re\n\nlog_satiri = \"[ERROR] Disk dolu\"\n\neslesme = re.search(\"ERROR\", log_satiri)\n\nif eslesme:\n    print(\"Hata logu bulundu.\")\nelse:\n    print(\"Hata logu bulunamadı.\")"
  },
  {
    "id": "U8_T4_E2",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Özel Karakterler: '.' ve '*'",
    "difficulty": "Orta",
    "lesson_html": "<h1>RegEx Özel Karakterleri: '.' ve '*'</h1><p>RegEx'in gücü özel karakterlerden gelir:</p><ul><li><code>.</code> (Nokta): Yeni satır (<code>\\n</code>) hariç *herhangi bir tek karakterle* eşleşir.</li><li><code>*</code> (Yıldız): Kendinden *önceki* karakterin 0 veya daha fazla kez tekrarıyla eşleşir ('hiç olma' durumu dahil).</li></ul><pre><code>import re\n\n# 'a' ile başlayıp 'c' ile biten, arada herhangi 2 karakter olan\nre.search(\"a..c\", \"abcde\") # Eşleşir ('abc')\nre.search(\"a..c\", \"a_cde\") # Eşleşmez\n\n# 'go' ile başlayıp, arada sıfır veya daha fazla 'o',\n# ve 'l' ile biten\nre.search(\"go*l\", \"gl\")    # Eşleşir ('gl')\nre.search(\"go*l\", \"gol\")   # Eşleşir ('gol')\nre.search(\"go*l\", \"gooool\")# Eşleşir ('gooool')\nre.search(\"go*l\", \"gaal\")  # Eşleşmez</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hata Kodu Deseni",
      "description": "<code>log = \"[ERROR 123] Bağlantı hatası\"</code> metninde, 'ERROR' kelimesinden sonra bir boşluk ve ardından *herhangi bir sayıda* karakterin geldiği deseni (<code>ERROR .*</code>) <code>re.search()</code> ile arayın. Eşleşme varsa <code>\"Hata mesajı deseni bulundu.\"</code> yazdırın.",
      "hint": "<code>desen = \"ERROR .*\"</code> (Nokta: herhangi bir karakter, Yıldız: 0 veya daha fazla kez)"
    },
    "default_code": "import re\n\nlog = \"[ERROR 123] Bağlantı hatası\"\n\n# Deseni tanımlayın ve arayın\n\n\n# Eşleşme varsa mesaj yazdırın\n",
    "solution": "import re\n\nlog = \"[ERROR 123] Bağlantı hatası\"\n\ndesen = \"ERROR .*\"\neslesme = re.search(desen, log)\n\nif eslesme:\n    print(\"Hata mesajı deseni bulundu.\")\nelse:\n    print(\"Desen bulunamadı.\")"
  },
  {
    "id": "U8_T4_E3",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Özel Karakterler: '+' ve '?'",
    "difficulty": "Orta",
    "lesson_html": "<h1>RegEx Özel Karakterleri: '+' ve '?'</h1><ul><li><code>+</code> (Artı): Kendinden *önceki* karakterin <strong>1</strong> veya daha fazla kez tekrarıyla eşleşir ('hiç olma' durumu hariç).</li><li><code>?</code> (Soru İşareti): Kendinden *önceki* karakterin <strong>0</strong> veya <strong>1</strong> kez tekrarıyla eşleşir (yani, 'opsiyonel' yapar).</li></ul><pre><code>import re\n\n# 'go' ile başlayıp, arada BİR veya daha fazla 'o',\n# ve 'l' ile biten\nre.search(\"go+l\", \"gl\")    # Eşleşmez (en az 1 'o' lazım)\nre.search(\"go+l\", \"gol\")   # Eşleşir ('gol')\nre.search(\"go+l\", \"gooool\")# Eşleşir ('gooool')\n\n# 'col' ile başlayıp, 'u' opsiyonel, 'r' ile biten\nre.search(\"colou?r\", \"color\") # Eşleşir ('color')\nre.search(\"colou?r\", \"colour\")# Eşleşir ('colour')\nre.search(\"colou?r\", \"coloor\")# Eşleşmez</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: HTTP/S Deseni",
      "description": "<code>url = \"https://google.com\"</code> metninde, URL'in 'http' ile başlayıp, 's' harfinin opsiyonel olduğu (<code>?</code>) ve ardından '://' geldiği deseni (<code>https?://</code>) <code>re.search()</code> ile arayın. Eşleşme varsa <code>\"Protokol bulundu.\"</code> yazdırın.",
      "hint": "<code>desen = \"https?://\"</code> ('s' opsiyoneldir)"
    },
    "default_code": "import re\n\nurl = \"https://google.com\"\n# url = \"http://example.com\" # Bunu da deneyin\n\n# Deseni tanımlayın ve arayın\n\n\n# Eşleşme varsa mesaj yazdırın\n",
    "solution": "import re\n\nurl = \"https://google.com\"\n# url = \"http://example.com\"\n\ndesen = \"https?://\"\neslesme = re.search(desen, url)\n\nif eslesme:\n    print(\"Protokol bulundu.\")\nelse:\n    print(\"Protokol bulunamadı.\")"
  },
  {
    "id": "U8_T4_E4",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Karakter Setleri ([])",
    "difficulty": "Orta",
    "lesson_html": "<h1>Karakter Setleri: []</h1><p>Köşeli parantezler <code>[]</code>, içindeki karakterlerden *herhangi biriyle* eşleşen bir 'karakter seti' tanımlar.</p><ul><li><code>[abc]</code>: 'a', 'b', veya 'c' harflerinden biriyle eşleşir.</li><li><code>[0-9]</code>: Herhangi bir rakamla eşleşir (0'dan 9'a kadar).</li><li><code>[a-z]</code>: Herhangi bir küçük harfle eşleşir.</li><li><code>[A-Za-z0-9]</code>: Herhangi bir harf veya rakamla eşleşir.</li><li><code>[^abc]</code>: Başındaki <code>^</code>, 'hariç' anlamına gelir. 'a', 'b', 'c' *dışındaki* herhangi bir karakterle eşleşir.</li></ul><pre><code>import re\n\n# İçinde 'a', 'e' veya 'i' harfi geçen var mı?\nre.search(\"[aei]\", \"Merhaba\") # Eşleşir ('e')\n\n# Rakamla başlayan var mı?\nre.search(\"^[0-9]\", \"1_dosya\") # Eşleşir ('1') ('^' burada satır başı demek)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Hex Karakteri",
      "description": "<code>hash_degeri = \"9a6ddf...\"</code> string'inde, başlangıcında (<code>^</code>) 0-9 arası rakam VEYA a-f arası küçük harflerden oluşan bir karakter seti (<code>[0-9a-f]</code>) olup olmadığını <code>re.search()</code> ile kontrol edin. Eşleşme varsa <code>\"Hex deseni başlangıcı bulundu.\"</code> yazdırın.",
      "hint": "<code>desen = \"^[0-9a-f]\"</code>"
    },
    "default_code": "import re\n\nhash_degeri = \"9a6ddf23a6a8a1c81530e3863a355651\"\n\n# Deseni tanımlayın ve arayın\n\n\n# Eşleşme varsa mesaj yazdırın\n",
    "solution": "import re\n\nhash_degeri = \"9a6ddf23a6a8a1c81530e3863a355651\"\n\ndesen = \"^[0-9a-f]\"\neslesme = re.search(desen, hash_degeri)\n\nif eslesme:\n    print(\"Hex deseni başlangıcı bulundu.\")\nelse:\n    print(\"Desen bulunamadı.\")"
  },
  {
    "id": "U8_T4_E5",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Özel Diziler (\\d, \\w, \\s)",
    "difficulty": "Orta",
    "lesson_html": "<h1>Özel Diziler</h1><p>Sık kullanılan bazı karakter setleri için kısayollar vardır:</p><ul><li><code>\\d</code>: Herhangi bir rakamla eşleşir (<code>[0-9]</code> ile aynı).</li><li><code>\\w</code>: 'Word' karakteriyle eşleşir (harf, rakam veya alt çizgi <code>_</code>). <code>[A-Za-z0-9_]</code> ile aynı.</li><li><code>\\s</code>: 'Whitespace' (boşluk) karakteriyle eşleşir (boşluk, tab <code>\\t</code>, yeni satır <code>\\n</code> vb.).</li></ul><p>Bunların büyük harfli versiyonları (<code>\\D</code>, <code>\\W</code>, <code>\\S</code>) ise tam tersi anlama gelir (rakam OLMAYAN, word karakteri OLMAYAN, boşluk OLMAYAN).</p><pre><code>import re\n\n# Üç rakam yan yana var mı?\nre.search(\"\\d\\d\\d\", \"Hata kodu 123\") # Eşleşir ('123')\n\n# Boşluk var mı?\nre.search(\"\\s\", \"Kullanıcı Adı\") # Eşleşir (' ')</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP Adresi (Basit)",
      "description": "<code>log = \"IP: 192.168.1.1 bağlandı\"</code> metninde, bir veya daha fazla rakamdan (<code>\\d+</code>) oluşan dört grubun noktalarla (<code>\\.</code> - nokta özel karakter olduğu için kaçış gerekir) ayrıldığı basit bir IP adresi desenini (<code>\\d+\\.\\d+\\.\\d+\\.\\d+</code>) <code>re.search()</code> ile arayın. Eşleşme varsa <code>\"IP adresi deseni bulundu.\"</code> yazdırın.",
      "hint": "<code>desen = \"\\d+\\.\\d+\\.\\d+\\.\\d+\"</code> (<code>+</code>: 1 veya daha fazla kez)"
    },
    "default_code": "import re\n\nlog = \"IP: 192.168.1.1 bağlandı\"\n\n# Basit IP adresi desenini tanımlayın ve arayın\n\n\n# Eşleşme varsa mesaj yazdırın\n",
    "solution": "import re\n\nlog = \"IP: 192.168.1.1 bağlandı\"\n\ndesen = \"\\d+\\.\\d+\\.\\d+\\.\\d+\"\neslesme = re.search(desen, log)\n\nif eslesme:\n    print(\"IP adresi deseni bulundu.\")\nelse:\n    print(\"Desen bulunamadı.\")"
  },
  {
    "id": "U8_T4_E6",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Tekrarlar ({})",
    "difficulty": "Orta",
    "lesson_html": "<h1>Tekrarlar: {}</h1><p>Bir karakterin veya grubun tam olarak kaç kez tekrarlayacağını belirtmek için süslü parantez <code>{}</code> kullanılır:</p><ul><li><code>{n}</code>: Tam olarak <code>n</code> kez tekrar.</li><li><code>{n,}</code>: En az <code>n</code> kez tekrar.</li><li><code>{n,m}</code>: En az <code>n</code>, en fazla <code>m</code> kez tekrar.</li></ul><pre><code>import re\n\n# Tam olarak 3 rakam\nre.search(\"\\d{3}\", \"kod123\") # Eşleşir ('123')\nre.search(\"\\d{3}\", \"kod12\")  # Eşleşmez\n\n# En az 2, en fazla 4 tane 'a' harfi\nre.search(\"a{2,4}\", \"baaac\") # Eşleşir ('aaa')\nre.search(\"a{2,4}\", \"baaaaac\")# Eşleşir ('aaaa')</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tam IP Okteti",
      "description": "<code>ip_parcasi = \"192.168\"</code> string'inde, 1 ile 3 arasında rakamdan (<code>\\d{1,3}</code>) oluşan bir desenin varlığını <code>re.search()</code> ile kontrol edin.",
      "hint": "<code>desen = \"\\d{1,3}\"</code>"
    },
    "default_code": "import re\n\nip_parcasi = \"192.168\"\n\n# 1-3 rakam desenini tanımlayın ve arayın\n\n\n# Eşleşme varsa mesaj yazdırın\n",
    "solution": "import re\n\nip_parcasi = \"192.168\"\n\ndesen = \"\\d{1,3}\"\neslesme = re.search(desen, ip_parcasi)\n\nif eslesme:\n    print(\"IP oktet deseni bulundu.\")\nelse:\n    print(\"Desen bulunamadı.\")"
  },
  {
    "id": "U8_T4_E7",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Gruplama ve Yakalama (())",
    "difficulty": "Zor",
    "lesson_html": "<h1>Gruplama ve Yakalama: ()</h1><p>Normal parantezler <code>()</code>, desende birden fazla işlevi yerine getirir:</p><ol><li>Operatörlerin (<code>*</code>, <code>+</code>, <code>?</code>, <code>{}</code>) uygulanacağı grubu belirler (örn: <code>(ab)+</code>).</li><li>Eşleşen metnin belirli kısımlarını 'yakalar' (capture).</li></ol><p><code>re.search()</code> bir Match nesnesi döndürdüğünde, <code>.group(0)</code> (veya <code>.group()</code>) eşleşen tüm metni verirken, <code>.group(1)</code> birinci parantez grubunun yakaladığı kısmı, <code>.group(2)</code> ikinciyi vb. verir.</p><pre><code>import re\n\nlog = \"Kullanıcı: admin, Eylem: login\"\n# İki grup yakala: kullanıcı adı ve eylem\ndesen = r\"Kullanıcı: (\\w+), Eylem: (\\w+)\" # r\"...\" raw string\n\neslesme = re.search(desen, log)\n\nif eslesme:\n    print(f\"Tam Eşleşme: {eslesme.group(0)}\")\n    print(f\"Kullanıcı: {eslesme.group(1)}\")\n    print(f\"Eylem: {eslesme.group(2)}\")</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: IP ve Portu Yakala",
      "description": "<code>adres = \"192.168.1.1:8080\"</code> metninde, IP adresini (<code>(\\d+\\.\\d+\\.\\d+\\.\\d+)</code>) birinci grup, port numarasını (<code>(\\d+)</code>) ikinci grup olarak yakalayan bir RegEx deseni (<code>:</code> ile ayrılmış) yazın. <code>re.search()</code> kullanın. Eşleşme varsa, <code>.group(1)</code> ile IP'yi ve <code>.group(2)</code> ile portu ayrı ayrı yazdırın.",
      "hint": "<code>desen = r\"(\\d+\\.\\d+\\.\\d+\\.\\d+):(\\d+)\"</code> (<code>r\"...\"</code> raw string kullanmak <code>\\</code>'ları kolaylaştırır)"
    },
    "default_code": "import re\n\nadres = \"192.168.1.1:8080\"\n\n# Yakalama grupları içeren deseni tanımlayın\ndesen = r\"...\"\n\neslesme = re.search(desen, adres)\n\n# Eşleşme varsa grupları yazdırın\nif eslesme:\n    # IP (grup 1) ve Port'u (grup 2) yazdırın\n    pass",
    "solution": "import re\n\nadres = \"192.168.1.1:8080\"\n\ndesen = r\"(\\d+\\.\\d+\\.\\d+\\.\\d+):(\\d+)\"\n\neslesme = re.search(desen, adres)\n\nif eslesme:\n    print(f\"IP Adresi: {eslesme.group(1)}\")\n    print(f\"Port: {eslesme.group(2)}\")\nelse:\n    print(\"Eşleşme bulunamadı.\")"
  },
  {
    "id": "U8_T4_E8",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Tüm Eşleşmeleri Bulma (re.findall)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Tüm Eşleşmeleri Bulma: re.findall()</h1><p><code>re.search()</code> sadece ilk eşleşmeyi bulurken, <code>re.findall(desen, metin)</code> metin içindeki *tüm* eşleşmeleri bulur ve bunları bir <strong>liste</strong> olarak döndürür.</p><p>Eğer desende yakalama grubu <code>()</code> yoksa, liste eşleşen tüm string'leri içerir. Eğer yakalama grubu varsa, liste sadece yakalanan grupların string'lerini (veya birden fazla grup varsa demetlerini) içerir.</p><pre><code>import re\n\nmetin = \"IP1: 1.1.1.1, IP2: 2.2.2.2\"\n\n# Tüm IP adreslerini bul (grup kullanarak sadece IP'leri al)\nip_deseni = r\"(\\d+\\.\\d+\\.\\d+\\.\\d+)\"\n\nipler = re.findall(ip_deseni, metin)\nprint(ipler) # Çıktı: ['1.1.1.1', '2.2.2.2']</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Tüm Hata Kodlarını Bul",
      "description": "<code>loglar = \"Hata 404 bulundu. Hata 500 oluştu. Kod 200 OK.\"</code> metninde, 'Hata' kelimesinden sonra gelen 3 haneli sayıları (<code>Hata (\\d{3})</code>) yakalayan bir desenle <code>re.findall()</code> kullanarak tüm hata kodlarını (<code>['404', '500']</code>) bir liste olarak bulun ve yazdırın.",
      "hint": "<code>desen = r\"Hata (\\d{3})\"</code> (Parantez grubu sadece sayıları yakalar)"
    },
    "default_code": "import re\n\nloglar = \"Hata 404 bulundu. Hata 500 oluştu. Kod 200 OK.\"\n\n# Hata kodlarını yakalayan deseni tanımlayın\ndesen = r\"...\"\n\n# re.findall() ile tüm kodları bulun ve listeyi yazdırın\n",
    "solution": "import re\n\nloglar = \"Hata 404 bulundu. Hata 500 oluştu. Kod 200 OK.\"\n\ndesen = r\"Hata (\\d{3})\"\n\nhata_kodlari = re.findall(desen, loglar)\nprint(hata_kodlari)"
  },
  {
    "id": "U8_T4_E9",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "Değiştirme (re.sub)",
    "difficulty": "Zor",
    "lesson_html": "<h1>Değiştirme: re.sub()</h1><p><code>re.sub(desen, degistirilecek_metin, orijinal_metin)</code> fonksiyonu, <code>orijinal_metin</code> içinde <code>desen</code> ile eşleşen *tüm* yerleri <code>degistirilecek_metin</code> ile değiştirir ve yeni bir string döndürür.</p><p>Bu, metin sansürleme, format düzeltme gibi işlemler için kullanılır.</p><pre><code>import re\n\nmetin = \"IP adresi 192.168.1.1 olarak ayarlandı.\"\nip_deseni = r\"\\d+\\.\\d+\\.\\d+\\.\\d+\"\n\n# IP adresini sansürle\nyeni_metin = re.sub(ip_deseni, \"[IP SANSÜRLENDİ]\", metin)\nprint(yeni_metin)</code></pre>",
    "challenge": {
      "title": "Meydan Okuma: Kullanıcı Adını Sansürle",
      "description": "<code>log = \"Kullanıcı 'admin' giriş yaptı.\"</code> metninde, tek tırnaklar içindeki kullanıcı adını (<code>'(\\w+)'</code> deseniyle yakalayabilirsiniz) <code>\"[KULLANICI]\"</code> ile değiştirmek için <code>re.sub()</code> kullanın ve sonucu yazdırın.",
      "hint": "<code>desen = r\"'(\\w+)'\"</code> ... <code>re.sub(desen, \"[KULLANICI]\", log)</code>"
    },
    "default_code": "import re\n\nlog = \"Kullanıcı 'admin' giriş yaptı.\"\n\n# Kullanıcı adını bulan desen\ndesen = r\"...\"\n# Değiştirilecek metin\nyeni = \"[KULLANICI]\"\n\n# re.sub() ile değişikliği yapın ve sonucu yazdırın\n",
    "solution": "import re\n\nlog = \"Kullanıcı 'admin' giriş yaptı.\"\n\ndesen = r\"'(\\w+)'\"\nyeni = \"[KULLANICI]\"\n\nyeni_log = re.sub(desen, yeni, log)\nprint(yeni_log)"
  },
  {
    "id": "U8_T4_E10",
    "unit_id": 8,
    "topic_id": 4,
    "unit_name": "Siber Güvenliğe Yönelik Python",
    "topic_name": "re (Regular Expressions)",
    "title": "RegEx Test Araçları ve Kaynaklar",
    "difficulty": "Orta",
    "lesson_html": "<h1>RegEx Test Araçları ve Kaynaklar</h1><p>Düzenli ifadeler karmaşık olabilir. Desenlerinizi test etmek ve öğrenmek için online araçlar çok faydalıdır:</p><ul><li><b>Regex101 (regex101.com):</b> En popüler online RegEx test edici ve açıklayıcı. Python modunu seçebilirsiniz.</li><li><b>Pythex (pythex.org):</b> Python'a özgü RegEx testi için basit bir araç.</li></ul><p>RegEx öğrenmek pratik gerektirir. Siber güvenlikte sıkça karşılaşacağınız desenler (IP, MAC, URL, e-posta, dosya yolları, log formatları) üzerine alıştırma yapmak önemlidir.</p>",
    "challenge": {
      "title": "Meydan Okuma: Regex101",
      "description": "Bir web tarayıcısında regex101.com adresini ziyaret edin. 'TEST STRING' alanına <code>Log line: IP=10.0.0.1 User=guest</code> yazın. 'REGULAR EXPRESSION' alanına <code>IP=(\\d+\\.\\d+\\.\\d+\\.\\d+)</code> desenini yazın. Sağdaki 'EXPLANATION' (Açıklama) ve 'MATCH INFORMATION' (Eşleşme Bilgisi) bölümlerini inceleyerek desenin nasıl çalıştığını ve IP adresini nasıl yakaladığını (Group 1) anlamaya çalışın. Anladığınızı belirtmek için <code># Regex101 incelendi</code> yorumunu ekleyin.",
      "hint": "Web sitesini ziyaret edip deneme yapın."
    },
    "default_code": "# Bu alıştırma için harici web sitesini kullanın.\n# Anladığınızı belirtmek için yorum ekleyin.\n",
    "solution": "# Regex101 incelendi"
  }
]